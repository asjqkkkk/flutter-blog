{"b6703db5":"---\r\ntitle: 2019年总结\r\ndate: 2019-12-31 22:16:06\r\nindex_img: /img/zongjie_2019.png\r\ntags: 总结\r\n---\r\n\r\n\r\n\r\n# 开头\r\n\r\n第一次写总结，没有经验，不知道从哪里入手。\r\n\r\n同时，以我懒惰的天性来看，我本来是没有写这个的打算的。\r\n\r\n但是今年的我确实是有一些明显的变化，并且其中大部分都是正面的变化，所以想想还是准备在今年的最后一天记录下来这些东西。\r\n\r\n期待日后回首往事的时候，能有一番别样的感受。\r\n\r\n# 身体与健康\r\n\r\n这一年来，我每周都有三次锻炼，身体还算健康吧，除了偶发的感冒、上火。\r\n\r\n关于“身体健康”这个概念，我觉得不仅是对未来的自己负责，也是对自己的家人负责吧。\r\n\r\n所以经常锻炼，是非常有必要的，长期的锻炼下来，变化还算明显。\r\n\r\n具体的变化，可以看一下下面的对比\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/zongjie_2019/001.jpg)\r\n\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/zongjie_2019/002.jpg)\r\n\r\n\r\n# 工作与生活\r\n\r\n这一年，换了一家新的公司。于我个人而言，成长是比较明显的。不仅了解到了各种各样的规范，也在这一年从从侧面和经历体会到了资本的温度。而这个算是我心态上最大的改变了，起码在我的认知中多了一项“工作与生活”的平衡。\r\n\r\n接下来，在工作上，我希望能更进一步。\r\n\r\n在生活上，我只希望可以继续保持健康，并且能常常感受快乐就好。\r\n\r\n# 技术与学习\r\n\r\n2019年，另外一个对于我最明显的变化，就是我开源了一个flutter项目 [flutter-todos](https://github.com/asjqkkkk/flutter-todos)\r\n\r\n并且截止到今天，已经有了超越1K的star数量，这对于我来说是一种莫大的鼓励，起码证明2018年学习了flutter后辞职换工作不是一个错误的决定。\r\n\r\n同时，这也是我学习路上一份成长的见证\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/zongjie_2019/003.png)\r\n\r\n当然了，英语我也有学，不过效果看起来还不够明显，也许是时间还不够吧\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/zongjie_2019/004.png)\r\n\r\n\r\n# 情感与恋爱\r\n\r\n无\r\n\r\n\r\n# 尾\r\n\r\n总结就到这里吧，希望来年更好！","9cf75a87":"---\ntitle: 周六闲记\ndate: 2021-05-22 11:54:21\nindex_img: /img/2021_05_22.png\ntags: 杂谈\n---\n# 头\n\n似乎每次放假的周末，都是没有早晨的。在被手机消息唤醒的那一刻，也预示午饭时间快到了\n\n完成各种繁琐的起床步骤后，吃了桶泡面，看了会儿《模范出租车》，又睡到了三点多\n\n深圳的中午还是一如既往的热，自从上次在深圳的烈日下骑半个小时自行车，第二天发现晒伤后。我就对这里的太阳产生了阴影\n\n抱着“即便是大老爷们，因为过于炎热，所以在烈日下撑伞也是情有可原”想法，我硬着头皮打着伞，出门买冰咖啡去了\n\n# 身\n\n深圳的中午虽然酷热难挡，但天上的白云依旧无比纯净\n\n这也算是我在深圳为数不多的，舒缓心情的好办法了\n\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/2021-5-22/001.png)\n\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/2021-5-22/002.png)\n\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/2021-5-22/003.png)\n\n\n# 尾\n\n逛完到家，打开朋友圈。发现几乎都是关于袁隆平去世的消息。\n\n今天是2021年5月22号，袁老去世的日子。一开始是讣告，然后有人辟谣，最后才确定是真实的新闻。\n\n袁老享年91岁，我爷爷去世的时候是85岁，在我看来都算寿终正寝的高龄了，所以对于这个突如其来的的消息，我的情绪并没有出现太大的波动\n\n不由得想到，小时候课本上记录在册的知名人物，那些活生生的人逐渐开始变得只剩下名号与事迹了。感怀于大江东去，时代落幕，突然生出了些许的伤感\n\n与之对比十分明显的是，在前两天，也就是5月20号，刚好是娱乐圈某对夫妻宣布离婚的消息，它的确像发布人的预期一样，引起了网络上的一个广泛讨论。不过相对于今天的，朋友圈众多自发悼念的行为，不禁让我感叹于网络价值观的提升，从我有了互联网记忆到现在，实在是有了巨大的进步\n\n\n袁老的杂交水稻，让无数人免于饥寒。而对于现在生活在大都市的人，吃饱饭自然是不在话下，按理说衣食无忧，应当比以前幸福才对，可结果大多数人竟是时刻身处在工作与生活的压力之下。有时候我也搞不明白，究竟是社会的内卷化让人们无法正常的前进，还是对于物质的诉求使人陷入压力的沼泽。\n\n希望未来不远的某天，我能找到一个属于自己的解答方案。如果恰好这个答案能帮到其他人，那我今天也算没有白吃两大碗米饭\n","1e29a354":"---\r\ntitle: 国庆-2019\r\ndate: 2019-10-07 21:49:47\r\nindex_img: /img/guoqing_2019.png\r\ntags: 逢年过节\r\n---\r\n\r\n去年国庆，没有回家，宅在出租屋里，每天打游戏，过的浑浑噩噩。\r\n\r\n今年国庆，终于是决定回家了。回家确实满怀期待，毕竟和家人在一起还是蛮轻松的。\r\n\r\n下面就简单的介绍这七天是如何过的吧\r\n\r\n\r\n## 10月1号\r\n\r\n节假日的火车票似乎都特别难抢，而我抢到的火车票是 **10月2号** 发车的，所以这一天我还待在广州。\r\n\r\n由于前几日新换了住处，宽带的事情尚未办妥，并且旧住处的宽带套餐还未取消，于是一大早就坐公交去了营业厅准备取消业务，等到10点营业厅才正式营业。\r\n\r\n因为是国庆当天，貌似各个地方都在播放北京天安门举行的“中国成立70周年庆典”，举国上下一片欢快景象，在营业厅看了一会儿庆典后终于解决了旧宽带的问题。接下来坐公交车回去，剪了头发，在没有网络的情况下煎熬着无所事事过完了这一天。\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/001.png)\r\n\r\n## 10月2号\r\n\r\n早上5点30就匆匆忙忙起来，洗漱、**如厕**完毕后过了6点，就开始去赶公交车，为了能提前赶上8点多开动的火车。\r\n\r\n车票是卧铺下铺，在火车上百无聊赖的度过10个小时后，终于到了岳阳，然后看着我爸在出口处接我。开车一个半小时左右到了荆州，一群长辈等着吃饭，勉为其难的还要去敬酒，我太讨厌酒的味道了，不过菜吃的还是很多的。\r\n\r\n<video src=\"https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/002.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/003.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n\r\n## 10月3号\r\n\r\n**回老家**\r\n\r\n因为爷爷是去年过世的，老家就奶奶独自一人待着，正好过节有时间回来一趟就去看一下她老人家，顺便带一点吃的喝的。\r\n\r\n八点多吃完炒拉面后就动身了，十点左右到了老家，在一旁听我爸与奶奶交谈，之后顺便帮忙锄了锄地，到了接近12点就回去了。\r\n\r\n这期间听说我爸在老家的一个医生朋友，因为打牌被抓了，我深感诧异，后来听说也是**国庆节指标**的缘故。\r\n\r\n中午在家吃了些非常简单的菜，基本是素菜，味道非常平淡，只吃了一碗饭。\r\n\r\n上一晚是我的一位亲戚请客吃饭，这天晚上是我们家请客，虽然人和昨天的一样，但是今天我没去敬酒了，照样是大吃了一顿。\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/004.png)\r\n\r\n<video src=\"https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/005.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n\r\n## 10月4号\r\n\r\n\r\n既然是国庆，总是想着要出去玩一下的，毕竟是个假期，总觉得不出去玩就可惜了。\r\n\r\n于是今天一大早便跑去岳阳看了看**岳阳楼**，大人门票价70一位，小孩不要钱。\r\n\r\n进去后花了差不多一个小时左右的时间就将岳阳楼看完了，由于游客稍多，所以也没有排队上景区中的“岳阳楼”。看完后觉得大失所望，一是因为游客较多显得景点过小，二是可看的东西确实不多，感觉这个景点就是一篇“岳阳楼记”的衍生周边产物，还不如旁边的**洞庭湖**来的壮阔\r\n\r\n然后在景点附近吃完一顿二百左右的午饭后就回去了\r\n\r\n晚饭本来打算在家里吃，突然得知原定10月5号一起玩的小伙伴今天晚上就得开车回上海了。于是晚饭就跑出去和小伙伴一起吃，小伙伴请客。\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/006.png)\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/007.png)\r\n\r\n![image](https://oldchen-blog-1256696029.cos.ap-guangzhou.myqcloud.com/guoqing_2019/008.png)\r\n\r\n\r\n## 10月5号\r\n\r\n这天没有什么多余的想法，就想宅在家里打游戏。\r\n\r\n不过早上还是陪同老爸一起去养老院看了一下，也是为了奶奶后面的生活考虑。\r\n\r\n今天的天气气温骤降，和昨天顶着太阳外出的情况截然相反，在养老院穿梭的时候，还下起了蒙蒙细雨。院中的老人有的三五成群围在一起打牌，有的形单影只在轮椅上静坐。\r\n\r\n最后询问了工作人员，养老院的名额目前已经满了，只能等后面看看会不会空出一些位置。于是拿了养老院的宣传单便回家了。\r\n\r\n因为懒得出去，中午我就一个人在外面解决了伙食问题，吃的7元的炒面，加了鸡蛋和火腿。开始觉得挺好吃的，吃着吃着就没了胃口，然后放下筷子和还剩一小半的炒面就走了。\r\n\r\n\r\n到了晚上，老爸的朋友请客，于是我也过去吃了顿好的，坐席中还发现了老爸之前谈到过的因为国庆节打牌被抓了去的朋友，由于在座的都是老爸年轻时玩到现在的朋友，相较于之前陪同其他亲戚长辈们一起吃饭，基本上没有什么压力。\r\n\r\n## 10月6号\r\n\r\n早上7点半起床，准备到岳阳搭乘返回广州的火车。\r\n\r\n这次依旧是卧铺，不过这次变成了中铺，并且火车的环境相较于来时的要脏乱一些。\r\n\r\n在火车上狭窄的中铺内煎熬到了广州，下车时已是晚上9点。坐了公交车抵达住处，洗完睡觉。这一天算是过去了。\r\n\r\n## 10月7号\r\n\r\n起床后称了称体重，重了六斤多，看着体重秤的数字，我不禁陷入沉思。好在后来再次确认时发现是自己算错了，只重了两斤多。我应该高兴吗？\r\n\r\n早上去了营业厅，办理了百兆宽带的业务。终于不用忍受没有网络的环境了。\r\n\r\n下午宽带就可以正常使用了，又是玩了一下午的游戏，只想做个无忧无虑的sb。之后还是一如既往的进行锻炼、洗澡、睡觉。\r\n\r\n我的2019年的国庆节就这样过去了。\r\n\r\n\r\n## 最后\r\n\r\n国庆期间，看着朋友圈里面的美景展览大赛，不禁心痒难耐，想着要去一个好看好玩的地方，结果岳阳的岳阳楼打破的我的幻想。但是能出去玩，我依旧蛮开心的，虽然游玩并不是一件看起来很轻松的事情。\r\n\r\n期待下次和家人出去玩的地点是黄鹤楼，或者张家界吧。\r\n\r\n在此之前，我一直都是一个宅在家里讨厌出门的死宅，但是现在对于旅游没有了抗拒的情绪。想来还得感谢那帮经常约我出去玩的朋友，我不仅变得愿意去旅游，我还变得更黑了。\r\n\r\n也希望自己能一直处于轻松的状态，一边感受生活，一边在生活中自得其乐。\r\n\r\n那么，今年的国庆播客就到此结束啦！","643f10e3":"---\r\ntitle: 天灾与人祸\r\ndate: 2020-04-04 10:42:40\r\nindex_img: /img/mourn.png\r\ntags: 杂谈\r\n---\r\n# 开头语\r\n\r\n今天是 **2020.4.4** ，刚好是清明节。国家选择将今天作为哀悼日，以此祭奠在抗疫战斗中牺牲的人们，并为被因感染病毒而逝去的同胞们默哀。\r\n\r\n随处可见的黑白图片，向所有的看客们展示了这份沉痛的真实性\r\n\r\n当我们开始追悼时，说明我们的抗疫行动已经接近尾声，然而此刻全世界的疫情蔓延却是愈演愈烈。世界级的哀悼会，什么时候才会开始呢？\r\n\r\n\r\n\r\n# 天灾\r\n\r\n目前看来，似乎并不能确定新冠肺炎的源头究竟是什么。但在疫情初期，它看起来就是一场由野味引发的天灾\r\n\r\n依稀记得是2019年的12月份，新闻报道说武汉发现了几例 **不明原因肺炎** , 彼时我与一名同事刚看到了相关的新闻。因为他是广东人，有非典的前车之鉴，所以对于这个新闻的警惕性比我高得多，当时我还不以为意，没想到不久之后事情就发展到了这么严重的地步。\r\n\r\n截止今日，全球累计确诊人数已经超过了 **110万** \r\n\r\n回过头看，我们付出了巨大的代价，也做出了前所未有的努力，才得以遏制这场疫情。但这并不是说我们成功了，因为我们所做的都是在亡羊补牢。再看之前的一系列行为，有很多做的不好的地方可以改进很多，有很多做错的地方可以完全避免\r\n\r\n# 人祸\r\n\r\n在武汉刚发现这群病人的时候，新闻随之即来是对此进行**辟谣**的声明。\r\n\r\n目前看来，在当时病毒初发的时候，说它具有很高的传染性的确是一件非常困难的事情。毕竟现在许多人在发烧咳嗽的时候都不能确定自己是感冒还是感染，何况对一个知之甚少的病毒定下这个可能会影响十几亿人的定论。\r\n\r\n但是即便如此，也不应该说病毒具有传染性是谣言，并同时将 **李文亮** 医生等人带去问话。想想如今的烈士和当时的 **谣言制造者** ，这么强烈的对比莫不是一个巨大的教训。\r\n\r\n从一开始的 **谣言**， 到后来的 **不具备传染性**， 再到后来的 **有限人传人**， 直到 **钟南山** 院士再次出面，整个事件才发生了重大转变。即便在外省人看来，武汉当时已经需要进入戒备状态了，可还是出现了百步亭的 **万家宴** 事件。\r\n\r\n此疫之后，人们对于类似灾害的警戒心，是否会有所增强呢？\r\n\r\n# 尾声\r\n\r\n一次灾难，可以暴露出诸多问题。人类的进步，往往都是从解决这些问题开始的。\r\n\r\n在此纪念那些在病毒抗争中殉职的各行各业的人们，尤其是医疗行业的奉献者们。我不信神鬼，也不信上帝，所以只能在心底留存一份对你们的钦佩、缅怀和悼念。\r\n\r\n同时，还有那些在抗争中没有倒下的各位奉献者们，愿你们健康幸福，愿你们一帆风顺，愿你们劳有所得。\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/mourn_for/mourn.png)\r\n\r\n\r\n","50a6b4b4":"---\r\ntitle: 奇思妙想\r\ndate: 2019-09-08 22:30:58\r\nindex_img: /img/my_idea.png\r\ntags: 奇思妙想\r\n---\r\n\r\n# 一闪而过的念头\r\n\r\n由于人类无法控制自己的思想，所以在日常生活里，我的脑袋中经常会冒出一些惊为天人(夸张手法)、莫名其妙、难以琢磨的想法。有的时候，想法的出现是由原因的，比如下雨天忘记带伞我就会想——“如果有传送工具直接避开户外行走就好了”；而有的时候，想法的出现可能是突如其来的，比如说突然想找女朋友然后谈一场说来就来的恋爱???\r\n\r\n\r\n现在，无论是什么想法，只要是我觉得有意思的，我都会将它们记录于此。并且保持长期更新。\r\n\r\n# 脑洞脑洞脑洞\r\n\r\n\r\n让这些想法公之于众吧\r\n\r\n## 马赛克去除工具\r\n\r\n由于常年关注社会新闻的缘故。经常能看到案发视频中，被打上马赛克的“坏人”，而在我的三观中，我是不希望这样的人被打码可，所以去码工具还是有必要的（当然不是用于某些两三个人就演完的电影，想错的小伙伴请自动面壁）\r\n\r\n## 气味记录与气味释放\r\n\r\n因为经常观看美食视频，所以我对美食有着强烈的执念，但是基本上除了卖相以外，我完全无法感受到食物的气味，如果在录视频的时候可以记录气味，在观看视频的时候顺便可以“播放”气味，那样“色香味”的前两者才能被真实感受到吧。\r\n\r\n## 关于5G的猜想\r\n\r\n我希望5G带来的速度，可以让我等游戏玩家非常便捷的玩到游戏。也就是说，云游戏是很有必要的，也许以前玩一款3A大作需要配置高端且笨重的游戏本，那么5G环境下也许只需要一个大屏的平板+蓝牙手柄就可以了。\r\n\r\n期待吧！","fb70e826":"---\r\ntitle: 开始新的一天吧\r\ndate: 2019-09-01 22:15:31\r\nindex_img: /img/new_day.png\r\ntags: 杂谈\r\n---\r\n\r\n# 好久不见\r\n\r\n几个月没有写个人博客了，这次和之前有许多的不同。\r\n\r\n博客的主题被我从 <code>**nexT**</code> 换成了  <code>**Material-T**</code> ,并不是因为 <code>**nexT**</code> 不够好看，恰恰是因为它太简洁出色，用的人实在太多了，所以为了保证一定的“个性”，我选择更换掉主题。正好，现在的主题也是我非常喜欢的。\r\n\r\n<!--more--> \r\n\r\n# 过的好吗\r\n\r\n没有写个人博客的这段时间里，我是有所改变的。\r\n\r\n来到了新的公司，接触了许多非常棒的新同事。也许技术上目前公司没有能够提供太多帮助，但是在程序规范、其他软技能等方面，我的提升是非常明显的。\r\n\r\n这段时间，我花了大概一个多月，牺牲掉个人的下班时间与双休日，总算是完成了一由个Flutter编写的开源app。开源后的一个月，github上的star数从0涨到600多，期间我总是时不时的打开github，像是在开奖一样，紧张又期待的看着star的数量是不是又有所增长。时而失望，时而惊喜。\r\n\r\n然后我逐渐开始讨厌自己这样的状态，因为这太耗费我的精力了，好在之后star数到了500，而我也终于放下了，因为我的目标算是达到了。\r\n\r\n\r\n\r\n# 有何打算\r\n\r\n最近公司搬到了一个新的地方，环境有了极大的改善，再也不用承受拥挤的座位了，并且我也可以骑着放置了三个月的自行车去上班，时间上稳定了不少，也减少了不少。\r\n\r\n不过因为公司架构组织的调整，我也不清楚下一步会发生什么。但是不论接下来会有何动作，我都能够以轻松的态度去面对，也算是没有任何后顾之忧吧。\r\n\r\n在技术上，还是一如既往的保持不断学习，之前是往广度上学，之后应该会在深度上再多费些心思。\r\n\r\n接下来，这个博客就不准备再写技术性的文章了，而是写一些心情类的、生活类的文章。技术文章我会全部放在掘金上，而这个博客，就作为真真正正的个人博客吧，不以服务大众为目的，而是服务自己。\r\n\r\n\r\n# 下次再会\r\n\r\n这次的博客就写到这里了。我要开始过新的日子了！再会.","84f8e3cb":"---\r\ntitle: 早睡早起身体好\r\ndate: 2019-09-03 22:37:57\r\nindex_img: /img/sleep_early.png\r\ntags: 随笔\r\n---\r\n\r\n今天早晨，上完厕所后称体重，刚好70KG整。\r\n\r\n想想，我已经持续每周锻炼三次有快一年了吧。之前65KG左右的时候是看得到腹肌的，现在已经练的九九归一了。按照我对自己的期待值，我觉得我目前的体重已经不需要再增加了，接下来应该要减脂了。所以我决定把自己的生活习惯更改一下。\r\n\r\n之后的日子里，我要强制自己晚上11:00之前开始躺在床上睡觉，这表示我要结束我五年多每天12:00以后才睡觉的习惯，所以其中艰辛是可以预料到的。但是说到这里，我想我的强迫症会在一定程度上帮助我完成这个任务，当然不是说要11:00就要睡着，这是不可能的，躺着去睡觉就行了。\r\n\r\n由于今天锻炼的原因，所以现在写这篇博客的时候已经快要11点了，计划从今天开始，所以原本每天学习英语的计划就无法执行了(还有点小开心呢!)，这也是在所难免的,谁让我“说到做到”呢！\r\n\r\n接下来的目标，就是体重往65KG靠拢，让我的腹肌不再被脂肪掩盖，当我到时候能明显看到轮廓的时候，就可以开始新的增肌计划了。\r\n\r\n\r\n不多说了，准备睡觉吧！好梦...","0997ea48":"---\r\ntitle: 杀死那个程序员\r\ndate: 2020-08-23 01:11:20\r\nindex_img: /img/kill_that_man.jpg\r\ntags: 随笔\r\n---\r\n\r\n\r\n# 序\r\n\r\n原词来自于[《杀死那个石家庄人》](https://baike.baidu.com/item/%E6%9D%80%E6%AD%BB%E9%82%A3%E4%B8%AA%E7%9F%B3%E5%AE%B6%E5%BA%84%E4%BA%BA/9654001?fr=aladdin)，讲述的是经济体制改革下，一群在浪潮中被理想主义抛弃掉的工人们的生活写照。\r\n\r\n想要进行改编是因为，当前行业的各种加班，让我想要找个记录与倾诉的地方。在初入新公司时，就开始改词了，不过过了几天也没动多少笔墨，所以暂且停了下来。\r\n\r\n而在加班两个月后，我的感受与经历终于可以支撑我补完剩下的内容了\r\n\r\n<youtube id=\"xbq-_2TqHVQ\">\r\n\r\n# 原词\r\n\r\n    傍晚6点下班 换掉药厂的衣裳\r\n    \r\n    妻子在熬粥 我去喝几瓶啤酒  \r\n    \r\n    如此生活30年 直到大厦崩塌\r\n    \r\n    云层深处的黑暗啊淹没心底的景观\r\n    \r\n    在八角柜台 疯狂的人民商场\r\n    \r\n    用一张假钞 买一把假枪\r\n    \r\n    保卫她的生活直到大厦崩塌\r\n    \r\n    夜幕覆盖华北平原 忧伤浸透她的脸\r\n    \r\n    河北师大附中 乒乓少年背向我\r\n    \r\n    沉默的注视 无法离开的教室\r\n    \r\n    生活在经验里 直到大厦崩塌\r\n    \r\n    一万匹脱缰的马 在他脑海中奔跑\r\n    \r\n    如此生活30年 直到大厦崩塌\r\n    \r\n    云层深处的黑暗啊 淹没心底的景观\r\n\r\n\r\n# 改编\r\n\r\n\r\n    深夜十点下班 恭候多时的月亮\r\n    \r\n    固定的站台 明灭交错的车牌\r\n    \r\n    如此生活三五年 直到伤病爆发\r\n    \r\n    一眼到头的未来啊 熟悉陌生的城市\r\n    \r\n    在城中角落 亮起的老旧房楼\r\n    \r\n    放一段老歌 冲一身热水\r\n    \r\n    松懈他的肩头 直到思绪迸发\r\n    \r\n    夜幕掀开心中杂念 迷惘透出他的眼\r\n    \r\n    阔别久逢梦中 明眸少年望着我\r\n    \r\n    天真的问答 遥不可及的童话\r\n    \r\n    生活在未知里 直到宿命抵达\r\n    \r\n    一万匹飞奔的马 在他脑海里踩踏\r\n    \r\n    如此生活三五年 直到理想蒸发\r\n    \r\n    高楼里的蚂蚁呀 没有自己的巢穴\r\n\r\n","73adf4ad":"---\r\ntitle: 杂谈-gun & legal\r\ndate: 2019-04-16 21:49:47\r\nindex_img: /img/chat_something.png\r\ntags: 杂谈\r\n---\r\n\r\n# sequence\r\n\r\n好久都没有写博客了，久到我几乎要忘了markdown的写作格式。\r\n\r\n当初给自己的目标是每个月至少一篇技术博客，如今看来这个目标因为种种原因而被搁置，好在我每周锻炼三次的习惯一直持续了半年之久。\r\n\r\n<!--more--> \r\n\r\n停写博客的这段时间，我又学了许多新的东西，我的技术旅途上也多了一个新的伙伴——Flutter,相较于原来的Android而言，我实在是太喜欢Flutter了，从这种喜新厌旧的表现上来看，也许我是一个渣男吧？\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E6%9D%82%E8%B0%88/001.jpg)\r\n\r\n# leave\r\n\r\n这一个月里，我经历了离职、(因为离职)请朋友吃饭、面试、朋友(后脚离职)请我们吃饭等各种事情。\r\n\r\n关于这群朋友，我感触颇深，和他们在公司的这段日子里我成长了不少，而我特别感谢的就是他们曾经热情地带领一个刚毕业的大学生融入了公司的环境，不然以那个涉世未深且又颇为内向的大学生的能力，想要达到这种效果可得费好大一番功夫。\r\n\r\n也是因为这群朋友，我比以前优秀了！\r\n\r\n\r\n在这里再次默默祝你们——前程似锦，万事可期！\r\n\r\n\r\n# recent\r\n\r\n上周，面试了整整一个星期，除了周一外，每天两场面试。最赶一次，上午面试完回家刚吃完饭，就要开始下一家的面试，而下一家光是往返就花了我近五个小时。这样的奔波劳碌，直接导致我这周不想再去投递简历，除了上周约了今天下午的面试，这周我再没投过简历。\r\n\r\n我打算休息一下。\r\n\r\n写博客对我而言是一种爱好，也是休息方式之一。不过写这篇博客的主要目的还是想写下我心中的一个想法，一个早已根植心底的想法。\r\n\r\n# idea\r\n\r\n这个想法，很久之前就有过了，只是最近社会上又发生的一些事情，导致我的想法更加清晰、具象。\r\n\r\n这段日子里，发生了好多人尽皆知的社会新闻，比如：\r\n\r\n[【女车主称被迫交纳1.5万金融服务费 奔驰发声明回应】](https://news.163.com/19/0414/20/ECOGCK760001899O.html)\r\n\r\n[【一张图赔2万!视觉中国年赚3亿背后每天15.6起官司】](https://news.163.com/19/0413/04/ECK70O1L0001899N.html)\r\n\r\n\r\n以及和我们程序员相关的996事件：\r\n\r\n[【996.ICU】](https://github.com/996icu/996.ICU/blob/master/README_CN.md)\r\n\r\n\r\n[【刘强东朋友圈回应996：\"混日子的人不是我的兄弟\"】](https://tech.163.com/19/0412/18/ECJ6M1PE00097U7R.html)\r\n\r\n[【马云谈\"996\":能做是一种巨大福气 很多人都没机会】](https://news.163.com/19/0412/18/ECJ56LP00001875P.html)\r\n\r\n在我看来，这些新闻都说明了一个问题：我们离“**法制社会**”还有着很长一段距离！\r\n\r\n而我的想法，就是和这相关的。\r\n\r\n\r\n# idea_origin\r\n\r\n在正式说明这个想法之前，我还是想写一下我是怎么产生这样的想法的。\r\n\r\n**大概是有过一段中二且愤世嫉俗的时期吧。**\r\n\r\n当时经常看到XXX村的干部又对XXX村民做了强取豪夺之事这类的新闻,比如这样：\r\n\r\n[【村支书因货车刮到遮阳棚将司机打死 之后继续打牌】](https://news.163.com/19/0415/11/ECQ4K3SH0001899O.html)\r\n\r\n又或者这样：\r\n\r\n[【\"劫后\"谭秦东称今生绝不入蒙 曾吐槽鸿茅药酒被抓】](http://money.163.com/18/0927/11/DSN633T4002580T4.html)\r\n\r\n那时我是这么想的：\r\n    \r\n    如果这种事情发生在美国，会是这样的结果吗？不会，美国人的持枪率导致他们的自卫能力远远强于其他国家没有武器的人们。\r\n\r\n现在看来，当初的想法过于简单粗暴，因为它会造成许多新的问题，在不持有枪支的情况下，你都能看到类似下面这样的新闻：\r\n\r\n[【江西一男子在校门口持刀伤人 砍伤学生辅警等11人】](http://news.163.com/19/0221/10/E8HJIL0B0001899O.html)\r\n\r\n而如果全民持枪的话，不知道又会出现多少起类似美国的枪支伤人事件。这个想法除了简单粗暴以外，还有一点就是天方夜谭，除了小说里面，现实是不可能出现全民持枪的情况的，永远都不会。\r\n\r\n\r\n# idea_transform\r\n\r\n如果有可以替代枪支用于自卫的武器，那么它一定是 **法律** 。\r\n\r\n同时，法律公正、具备执行力、不带有任何情感，相较于枪支而言，它安全的多。\r\n\r\n不过就如同我之前所说，真正意义上的 **法制社会** 我们还是难以企及。脱离了现实基础去谈论法律的使用无异于建造一所空中楼阁。\r\n\r\n目前的法律显然不具备这些特点：普及性、易用性、服务性。\r\n\r\n普通人想去使用法律，成本与难度还是很高的，就连我这种把技术作为代号的程序员，对法律也是一窍不通。\r\n\r\n所以写到这里，我就要说出我真实的想法了。\r\n\r\n\r\n# I have an idea\r\n\r\n**我希望未来有一家公司，可以实现让人们低成本、便捷的去使用法律**\r\n\r\n对，不是一家机构，是一个公司。就像阿里巴巴一样，本来应该交给银行去做的无现金社会，最后还需要靠马云去实现。而真正的无障碍使用法律的实现，也许只能由非官方非机构的某家公司去做。\r\n\r\n我希望未来不管是谁，一定要出现一家这样的公司，实现这样的目的。\r\n\r\n虽然我很想亲自去做这件事，但是目前而言我没有这个胆量，也没有这么坚定的信念，不过目前关于公司的一些构想，已经在我脑海里有了初步的雏形。\r\n\r\n\r\n# idea blueprint\r\n\r\n<!--公司的终极目的：实现 **法治社会** -->\r\n\r\n<!--公司的主要目的：普及法律知识、降低法律使用成本、提高法律作为武器与防具的力量-->\r\n\r\n下面是我脑海中一个模糊的结构：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E6%9D%82%E8%B0%88/002.png)\r\n\r\n项目的名字就叫 **民律**\r\n\r\n虽然我不知道这样对不对，但是我希望未来我或者其他人可以去完成这个事业。\r\n\r\n而我对于它的发展与结局是这样看待的，最理想的情况就是：生于乱世，匿于盛世。\r\n\r\n当真正处于 **法治社会** 的时候，这样的产品自然也就销声匿迹了，这也是我乐于见到的场景。\r\n\r\n**那么，我心中的想法就此写下，以后我睡觉的时候再不用去花时间考虑这个问题了  :D**\r\n\r\n\r\n# about 996\r\n\r\n最后，关于996谈一下我的看法。\r\n\r\n本来马云在我心中是99分的第一类钦佩的存在，现在因为他的996言论，他只有95分了，第一类目前还有雷军、任正非，都是99分。\r\n\r\n关于996这个问题，我觉得它一定是不适合技术人员的，特别是程序员这个种族。\r\n\r\n因为技术人员的技术是会随着自身的积累慢慢增加的，技术越高的人会越讨厌毫无意义的重复性劳动，也会越追崇高效率的工作，同时他们思考的质量也会逐渐上升。\r\n\r\n拿我自身的经历来说，如果让我全神贯注去敲代码，四个小时后我就会宕机，之后再进行这样高强度的脑力活动，我的效率会大幅度下降，并且工作积极性也会因为脑力下降而跌落。这时候加班反而不能起到正面促进的效果，只是把人带入了一个恶循环当中。\r\n\r\n虽然我不提倡996，但是就像人有三急一样，有的时候项目确实会出现很赶的情况，这时候适当的加班也是没问题的。但我理想的情况应该是这样：项目规划的好，任务安排合理，基本上用不着加班，每天在工作时限内就可以很好的完成任务。如果需要加班，一定不能是长期的，并且加班需要有加班费，而这个加班费，我希望永远不会有拿的机会。\r\n\r\n那关于996就是这样了，人们工作是为了更好的生活，就像人们健身也是为了生活而服务的。现在许多人因为健身耽误了正常的生活状态，反而是本末倒置，就像现在的996一样，得不偿失。\r\n\r\n最后，关于我之前的想法，如果有朝一日我能实现这个想法，我一定推己及人，从自身的行业开始，让955成为常态，如果影响力够大的话，甚至是可以去实行10，5，5的。然而这也只是实现想法后的冰山一角，能改善的东西，还有更多！\r\n\r\n","cf288e3c":"---\r\ntitle: 论国庆节的几种过法\r\ndate: 2018-10-01 21:49:47\r\nindex_img: /img/play_1.png\r\ntags: 逢年过节\r\n---\r\n\r\n>  中秋刚过才一个星期，国庆就来了。这七天小长假可不能就这样寥寥草草，得好好准备准备看看怎么过才行！\r\n\r\n**下面就介绍一下国庆节的几种过法**\r\n\r\n## 一、干粮\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%AE%BA%E5%9B%BD%E5%BA%86%E8%8A%82%E7%9A%84%E5%A5%BD%E5%87%A0%E7%A7%8D%E8%BF%87%E6%B3%95/%E5%B9%B2%E7%B2%AE.jpg)\r\n\r\n干粮是必不可少的一部分，有了这个，你就不必担心饿死了！\r\n\r\n\r\n## 二、游戏\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%AE%BA%E5%9B%BD%E5%BA%86%E8%8A%82%E7%9A%84%E5%A5%BD%E5%87%A0%E7%A7%8D%E8%BF%87%E6%B3%95/%E6%B8%B8%E6%88%8F.jpg)\r\n\r\n所谓饱暖思淫欲，当你不必为了食物而犯愁之后，你就可以思考自身的娱乐需求了。无论是召唤师峡谷，还是艾泽拉斯大陆，都有承载你欢乐的地方，如果这些地方你不满意，还剩下索尼微软任天堂好些游戏平台呢！\r\n\r\n\r\n## 三、阅读\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%AE%BA%E5%9B%BD%E5%BA%86%E8%8A%82%E7%9A%84%E5%A5%BD%E5%87%A0%E7%A7%8D%E8%BF%87%E6%B3%95/%E9%98%85%E8%AF%BB.jpg)\r\n\r\n劳逸结合一直是一种非常良好的生活方式，游戏玩过头了反而会荒废你的大脑，这时候应该静下心来看看书，文学类、科学类、教材类，各式各样，应有尽有。\r\n\r\n## 四、运动\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%AE%BA%E5%9B%BD%E5%BA%86%E8%8A%82%E7%9A%84%E5%A5%BD%E5%87%A0%E7%A7%8D%E8%BF%87%E6%B3%95/%E8%BF%90%E5%8A%A8.jpg)\r\n\r\n一个人身体要是不好，那多少事情都干不了，学习、娱乐之余，可别忘了运动，毕竟90后的年轻人没几个希望中年发福吧！\r\n\r\n\r\n## 五、出行\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%AE%BA%E5%9B%BD%E5%BA%86%E8%8A%82%E7%9A%84%E5%A5%BD%E5%87%A0%E7%A7%8D%E8%BF%87%E6%B3%95/%E9%AA%91%E8%A1%8C.jpg)\r\n\r\n在家待久了会生霉的，所以出去转转还能让自己保持新鲜！\r\n\r\n而且节日出行也是蛮合理的一件事，如果你真有一颗不安分的心，外面的人山人海又怎能拦得住你？\r\n\r\n\r\n---\r\n\r\n\r\n**那么，国庆节的过法就谈到这里！我要开始享受国庆了！**\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%AE%BA%E5%9B%BD%E5%BA%86%E8%8A%82%E7%9A%84%E5%A5%BD%E5%87%A0%E7%A7%8D%E8%BF%87%E6%B3%95/001.jpeg)\r\n\r\n---\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%AE%BA%E5%9B%BD%E5%BA%86%E8%8A%82%E7%9A%84%E5%A5%BD%E5%87%A0%E7%A7%8D%E8%BF%87%E6%B3%95/002.png)","1a4cecb3":"---\r\ntitle: 长鹿游\r\ndate: 2019-09-22 18:02:37\r\nindex_img: /img/changlu.png\r\ntags: 旅行\r\n---\r\n\r\n话不多说，看视频吧\r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/wx_camera_1569042496250.mp4\" controls=\"controls\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_184216.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_175551.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_161147.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_161001.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_160411.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_160315.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_155908.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_155542.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_155338.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_154611.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_153858.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_153533.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_152751.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_152520.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_152457.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_152215.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_152057.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_152044.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_151943.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_151651.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_151521.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/VID_20190921_151202.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/1569145952431.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/1569145947107.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/1569145943919.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/1569145940209.mp4\" controls=\"controls\" width=\"500\"></video> \r\n\r\n<video src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/changlu_tour/1569145936738.mp4\" controls=\"controls\" width=\"500\"></video> ","dc99a0a8":"---\r\ntitle: Activity启动流程分析\r\ndate: 2020-03-22 11:38:15\r\nindex_img: /img/activity_start.png\r\ntags: 源码系列\r\n---\r\n\r\n\r\n# 序\r\n\r\n前面已经写完了三篇android方面的学习文章啦，而这一篇关于 **Activity的启动流程**，它涉及的源码量非常大并且非常广。\r\n\r\n在阅读源码之前，需要先做好准备工作。因为有的时候android sdk中的源码并不一定可以随心所欲的跳转，这时候你就需要替换一下sdk文件了，可以从这里下载：[android-hidden-api](https://github.com/anggrayudi/android-hidden-api)\r\n> ps:替换之前记得备份哦\r\n\r\n# 引子\r\n\r\n对于 **Activity启动的流程**，这里我们很好去选择一个源码的阅读入口\r\n\r\n那就是我们非常熟悉的：`startActivity(...)` 方法\r\n\r\n\r\n\r\n# App内Activity启动流程\r\n\r\n进入 `startActivity()` 康康吧\r\n\r\n## Activity\r\n\r\n### startActivity(...)\r\n\r\n```\r\n    public void startActivity(Intent intent) { this.startActivity(intent, null); }\r\n    \r\n    public void startActivity(Intent intent, @Nullable Bundle options) {\r\n        if (options != null) {\r\n            startActivityForResult(intent, -1, options);\r\n        } else {\r\n            startActivityForResult(intent, -1);\r\n        }\r\n    }\r\n    \r\n    public void startActivityForResult(@RequiresPermission Intent intent, int requestCode) {\r\n        startActivityForResult(intent, requestCode, null);\r\n    }\r\n    \r\n    public void startActivityForResult(@RequiresPermission Intent intent, int requestCode,\r\n            @Nullable Bundle options) {...}\r\n    \r\n```\r\n\r\n可以看到最终 `startActivity()` 方法会进入 `startActivityForResult(...)` 方法\r\n\r\n### startActivityForResult(...)\r\n\r\n\r\n```\r\n    public void startActivityForResult(@RequiresPermission Intent intent, int requestCode,\r\n            @Nullable Bundle options) {\r\n        if (mParent == null) {\r\n            options = transferSpringboardActivityOptions(options);\r\n            Instrumentation.ActivityResult ar =\r\n                mInstrumentation.execStartActivity(\r\n                    this, mMainThread.getApplicationThread(), mToken, this,\r\n                    intent, requestCode, options);\r\n            if (ar != null) {\r\n                mMainThread.sendActivityResult(\r\n                    mToken, mEmbeddedID, requestCode, ar.getResultCode(),\r\n                    ar.getResultData());\r\n            }\r\n            if (requestCode >= 0) {\r\n                mStartedActivity = true;\r\n            }\r\n\r\n            cancelInputsAndStartExitTransition(options);\r\n        } else {\r\n            ...\r\n        }\r\n    }\r\n```\r\n\r\n上面的代码中根据 `mParent` 是否为 **null** 分了两种情况，关于 `mParent` 的来龙去脉，目前查阅资料得出的结果是由 `ActivityGroup` 遗留下来的代码\r\n\r\n> 而我也通过在主Activity启动另一个Activity的方式测试得 getParent() 的方法打印为null， 也就是 ActivityGroup 已经被 Fragment + Activity 代替掉了\r\n\r\n我们只需要注意 `execStartActivity(...)` 方法即可\r\n\r\n## Instrumentation\r\n\r\n关于 `Instrumentation` 这个类，它主要用于应用的自动化测试，可以看一下这里：[插桩测试](https://source.android.google.cn/compatibility/tests/development/instrumentation?hl=zh-cn)\r\n\r\n我们直接看 `execStartActivity(...)` 方法\r\n\r\n### execStartActivity(...)\r\n\r\n\r\n```\r\n    public ActivityResult execStartActivity(\r\n        Context who, IBinder contextThread, IBinder token, String target,\r\n        Intent intent, int requestCode, Bundle options) {\r\n        IApplicationThread whoThread = (IApplicationThread) contextThread;\r\n        ...//监视器相关\r\n        try {\r\n            intent.migrateExtraStreamToClipData();\r\n            intent.prepareToLeaveProcess(who);\r\n            int result = ActivityManager.getService()\r\n                .startActivity(whoThread, who.getBasePackageName(), intent,\r\n                        intent.resolveTypeIfNeeded(who.getContentResolver()),\r\n                        token, target, requestCode, 0, null, options);\r\n            checkStartActivityResult(result, intent);\r\n        } catch (RemoteException e) {\r\n            throw new RuntimeException(\"Failure from system\", e);\r\n        }\r\n        return null;\r\n    }\r\n```\r\n这里主要关注 `startActivity(...)` 方法，不过在此之前可以看一下 `ActivityManager.getService()` 返回的对象是什么\r\n\r\n\r\n```\r\n    public static IActivityManager getService() {\r\n        return IActivityManagerSingleton.get();\r\n    }\r\n    \r\n    private static final Singleton<IActivityManager> IActivityManagerSingleton =\r\n            new Singleton<IActivityManager>() {\r\n                @Override\r\n                protected IActivityManager create() {\r\n                    final IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);\r\n                    final IActivityManager am = IActivityManager.Stub.asInterface(b);\r\n                    return am;\r\n                }\r\n            };\r\n```\r\n\r\n上面的写法除了单例以外，是一个很典型的 **AIDL** 写法，返回的对象是通过 IBinder 对象提供的 **IActivityManager** 引用，而通过 `IActivityManager` 对象，就可以和 `ActivityManagerService` 通信了, 因为 `ActivityManagerService` 是服务端的实现：\r\n\r\n```\r\npublic class ActivityManagerService extends IActivityManager.Stub\r\n        implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {...}\r\n```\r\n关于 **AIDL** 的使用与介绍，可以看这篇：[Android 接口定义语言 (AIDL)](https://developer.android.google.cn/guide/components/aidl?hl=zh_cn#Implement)\r\n\r\n接下来，我们就进入 `ActivityManagerService` 去寻找 `startActivity(...)` 的实现吧：\r\n\r\n## ActivityManagerService\r\n\r\n`ActivityManagerService` 是 `Activity` 启动流程中非常关键的一个对象，大家经常能看到它的简称：**AMS**\r\n\r\n那么 `Activity` 启动的流程中它都参与了哪些内容？我们继续往下看\r\n\r\n下面就是一系列的方法调用了\r\n\r\n### startActivity(...) -> startActivityAsUser(...)\r\n\r\n\r\n```\r\n    public final int startActivity(IApplicationThread caller, String callingPackage,\r\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\r\n            int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {\r\n        return startActivityAsUser(...);\r\n    }\r\n```\r\n⬇\r\n\r\n```\r\n    public final int startActivityAsUser(IApplicationThread caller, String callingPackage,\r\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\r\n            int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {\r\n        return startActivityAsUser(...);\r\n    }\r\n```\r\n⬇\r\n\r\n```\r\n    public final int startActivityAsUser(IApplicationThread caller, String callingPackage,\r\n            Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode,\r\n            int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId,\r\n            boolean validateIncomingUser) {\r\n        enforceNotIsolatedCaller(\"startActivity\");\r\n\r\n        userId = mActivityStartController.checkTargetUser(userId, validateIncomingUser,\r\n                Binder.getCallingPid(), Binder.getCallingUid(), \"startActivityAsUser\");\r\n\r\n        // TODO: Switch to user app stacks here.\r\n        return mActivityStartController.obtainStarter(intent, \"startActivityAsUser\")\r\n                ...//这里给ActivityStarter设置各种参数\r\n                .setMayWait(userId)\r\n                .execute();\r\n\r\n    }\r\n```\r\n上面的 `checkTargetUser(...)` 用于检测调用方的权限等，这里就涉及到多用户和Linux的一些知识了，此处就不说了(如果以后会研究Linux的话，再做说明吧)\r\n\r\n后面的 `obtainStarter(...)` 返回的是一个 `ActivityStarter` 对象，看这个类的名字，就知道它是干什么的了，我们进入它的 `execute()` 方法看看\r\n\r\n## ActivityStarter\r\n\r\n### execute()\r\n\r\n```\r\n    int execute() {\r\n        try {\r\n            if (mRequest.mayWait) {\r\n                return startActivityMayWait(...);\r\n            } else {\r\n                return startActivity(...);\r\n            }\r\n        } finally {\r\n            onExecutionComplete();\r\n        }\r\n    }\r\n    \r\n    \r\n```\r\n\r\n这里的 `mRequest.mayWait` 标志位是通过 `setMayWait(int userId)` 方法来更改的\r\n\r\n```\r\n    ActivityStarter setMayWait(int userId) {\r\n        mRequest.mayWait = true;\r\n        mRequest.userId = userId;\r\n\r\n        return this;\r\n    }\r\n```\r\n而我们在之前的 `startActivityAsUser(...)` 中，就调用过了 `setMayWait()` 方法，所以我们接下来会走到 `startActivityMayWait(...)` 中去\r\n\r\n### startActivityMayWait(...)\r\n\r\n这个方法的参数，以及方法体中的代码量非常大，我们只看最关键的流程部分\r\n\r\n\r\n```\r\n    private int startActivityMayWait(IApplicationThread caller, int callingUid,\r\n            String callingPackage, Intent intent, String resolvedType,\r\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\r\n            IBinder resultTo, String resultWho, int requestCode, int startFlags,\r\n            ProfilerInfo profilerInfo, WaitResult outResult,\r\n            Configuration globalConfig, SafeActivityOptions options, boolean ignoreTargetSecurity,\r\n            int userId, TaskRecord inTask, String reason,\r\n            boolean allowPendingRemoteAnimationRegistryLookup) {\r\n                \r\n            ...    \r\n            int res = startActivity(caller, intent, ephemeralIntent, resolvedType, aInfo, rInfo,\r\n                    voiceSession, voiceInteractor, resultTo, resultWho, requestCode, callingPid,\r\n                    callingUid, callingPackage, realCallingPid, realCallingUid, startFlags, options,\r\n                    ignoreTargetSecurity, componentSpecified, outRecord, inTask, reason,\r\n                    allowPendingRemoteAnimationRegistryLookup);\r\n            ...        \r\n                \r\n                \r\n    }\r\n```\r\n进入 `startActivity(...)`\r\n\r\n### startActivity(...) -> startActivity(...)\r\n\r\n\r\n```\r\n    private int startActivity(IApplicationThread caller, Intent intent, Intent ephemeralIntent,\r\n            String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,\r\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\r\n            IBinder resultTo, String resultWho, int requestCode, int callingPid, int callingUid,\r\n            String callingPackage, int realCallingPid, int realCallingUid, int startFlags,\r\n            SafeActivityOptions options, boolean ignoreTargetSecurity, boolean componentSpecified,\r\n            ActivityRecord[] outActivity, TaskRecord inTask, String reason,\r\n            boolean allowPendingRemoteAnimationRegistryLookup) {\r\n            \r\n            ...\r\n        mLastStartActivityResult = startActivity(caller, intent, ephemeralIntent, resolvedType,\r\n                aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode,\r\n                callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,\r\n                options, ignoreTargetSecurity, componentSpecified, mLastStartActivityRecord,\r\n                inTask, allowPendingRemoteAnimationRegistryLookup);\r\n            ...\r\n                \r\n    }\r\n```\r\n\r\n进入下一个 `startActivity(...)`，依旧是一个行数非常多的方法体\r\n\r\n```\r\n    private int startActivity(IApplicationThread caller, Intent intent, Intent ephemeralIntent,\r\n            String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,\r\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\r\n            IBinder resultTo, String resultWho, int requestCode, int callingPid, int callingUid,\r\n            String callingPackage, int realCallingPid, int realCallingUid, int startFlags,\r\n            SafeActivityOptions options,\r\n            boolean ignoreTargetSecurity, boolean componentSpecified, ActivityRecord[] outActivity,\r\n            TaskRecord inTask, boolean allowPendingRemoteAnimationRegistryLookup) {\r\n                \r\n        ...        \r\n        return startActivity(r, sourceRecord, voiceSession, voiceInteractor, startFlags,\r\n                true /* doResume */, checkedOptions, inTask, outActivity);\r\n    }\r\n```\r\n进入最后的 `startActivity(...)` \r\n```\r\n    private int startActivity(final ActivityRecord r, ActivityRecord sourceRecord,\r\n                IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\r\n                int startFlags, boolean doResume, ActivityOptions options, TaskRecord inTask,\r\n                ActivityRecord[] outActivity) {\r\n        int result = START_CANCELED;\r\n        try {\r\n            ...\r\n            result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,\r\n                    startFlags, doResume, options, inTask, outActivity);\r\n        } finally {\r\n          ...\r\n        }\r\n\r\n        postStartActivityProcessing(r, result, mTargetStack);\r\n\r\n        return result;\r\n    }\r\n```\r\n这里调用了 `startActivityUnchecked(...)`方法，进去看一看\r\n\r\n\r\n\r\n### startActivityUnchecked(...)\r\n\r\n\r\n```\r\n    private int startActivityUnchecked(final ActivityRecord r, ActivityRecord sourceRecord,\r\n            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,\r\n            int startFlags, boolean doResume, ActivityOptions options, TaskRecord inTask,\r\n            ActivityRecord[] outActivity) {\r\n        ...    \r\n        //根据Activity的启动模式来决定如何启动Activity，比如LAUNCH_SINGLE_TOP或LAUNCH_SINGLE_TASK等    \r\n        ...\r\n        mTargetStack.startActivityLocked(mStartActivity, topFocused, newTask, mKeepCurTransition,\r\n                mOptions);\r\n        if (mDoResume) {\r\n        ...\r\n            mSupervisor.resumeFocusedStackTopActivityLocked(mTargetStack, mStartActivity,\r\n                        mOptions);\r\n        ...\r\n        }\r\n        ...\r\n    }\r\n```\r\n上面的方法中有一个 `mTargetStack` 的 `startActivityLocked(...)` 方法，它是一个 `ActivityStack` 对象，这里的方法并不是去启动一个 `Activity`，而是将要启动的 `Activity` 放入 要展示的 `ActivityStack` 中，并且初始化 `WindowManager` ，而让顶层 `Activity` 获取焦点(也就是让用户看到的那个)的方法就是 `resumeFocusedStackTopActivityLocked(...)`\r\n\r\n## ActivityStackSupervisor\r\n\r\n**Supervisor** 有监管员的意思，所以 `ActivityStackSupervisor` 从名字上来看，是用于监控和管理 `ActivityStack` 的\r\n\r\n### resumeFocusedStackTopActivityLocked(...)\r\n\r\n\r\n```\r\n    boolean resumeFocusedStackTopActivityLocked(\r\n            ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions) {\r\n\r\n        if (!readyToResume()) {\r\n            return false;\r\n        }\r\n\r\n        if (targetStack != null && isFocusedStack(targetStack)) {\r\n            return targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);\r\n        }\r\n\r\n        final ActivityRecord r = mFocusedStack.topRunningActivityLocked();\r\n        if (r == null || !r.isState(RESUMED)) {\r\n            mFocusedStack.resumeTopActivityUncheckedLocked(null, null);\r\n        } else if (r.isState(RESUMED)) {\r\n            // Kick off any lingering app transitions form the MoveTaskToFront operation.\r\n            mFocusedStack.executeAppTransition(targetOptions);\r\n        }\r\n\r\n        return false;\r\n    }\r\n```\r\n\r\n接下来，进入 `ActivityStack` 的 `resumeTopActivityUncheckedLocked(...)` 方法\r\n\r\n## ActivityStack\r\n\r\n### resumeTopActivityUncheckedLocked(...)\r\n\r\n```\r\n    boolean resumeTopActivityUncheckedLocked(ActivityRecord prev, ActivityOptions options) {\r\n        if (mStackSupervisor.inResumeTopActivity) {\r\n            return false;\r\n        }\r\n\r\n        boolean result = false;\r\n        try {\r\n            mStackSupervisor.inResumeTopActivity = true;\r\n            result = resumeTopActivityInnerLocked(prev, options);\r\n            ...\r\n        } finally {\r\n            mStackSupervisor.inResumeTopActivity = false;\r\n        }\r\n\r\n        return result;\r\n    }\r\n```\r\n\r\n进入 `resumeTopActivityInnerLocked(...)` 方法\r\n\r\n\r\n```\r\n    private boolean resumeTopActivityInnerLocked(ActivityRecord prev, ActivityOptions options) {\r\n        \r\n        ...\r\n        mStackSupervisor.startSpecificActivityLocked(next, true, true);\r\n        ...\r\n        \r\n    }\r\n```\r\n这个方法体行数依旧非常多，主要是将之前正在运行的最顶层 `Activity` 给 **pause** 掉，然后又返回到 `ActivityStackSupervisor`，并调用其 `startSpecificActivityLocked(...)` 方法\r\n\r\n## ActivityStackSupervisor\r\n\r\n### startSpecificActivityLocked(...)\r\n\r\n\r\n```\r\n    void startSpecificActivityLocked(ActivityRecord r,\r\n            boolean andResume, boolean checkConfig) {\r\n        // Is this activity's application already running?\r\n        ProcessRecord app = mService.getProcessRecordLocked(r.processName,\r\n                r.info.applicationInfo.uid, true);\r\n\r\n        getLaunchTimeTracker().setLaunchTime(r);\r\n\r\n        if (app != null && app.thread != null) {\r\n            try {\r\n                ...\r\n                realStartActivityLocked(r, app, andResume, checkConfig);\r\n                return;\r\n            } catch (RemoteException e) {\r\n                ...\r\n            }\r\n\r\n        }\r\n\r\n        mService.startProcessLocked(r.processName, r.info.applicationInfo, true, 0,\r\n                \"activity\", r.intent.getComponent(), false, false, true);\r\n    }\r\n```\r\n上面判断了两种情况：\r\n- 如果app进程存在，则继续进入 `realStartActivityLocked(...)` 进行下一步操作\r\n- 如果不存在，调用 `ActivityManagerService` 的 `startProcessLocked(...)` 方法去创建进程。这里将会是我们后面要分析的 **app启动流程** 中的一部分\r\n\r\n\r\n所以我这里先看第一种情况\r\n\r\n\r\n### realStartActivityLocked(...)\r\n\r\n\r\n```\r\n    final boolean realStartActivityLocked(ActivityRecord r, ProcessRecord app,\r\n            boolean andResume, boolean checkConfig) throws RemoteException {\r\n            \r\n                ...\r\n                // Create activity launch transaction.\r\n                final ClientTransaction clientTransaction = ClientTransaction.obtain(app.thread,\r\n                        r.appToken);\r\n                clientTransaction.addCallback(LaunchActivityItem.obtain(new Intent(r.intent),\r\n                        System.identityHashCode(r), r.info,\r\n                        // TODO: Have this take the merged configuration instead of separate global\r\n                        // and override configs.\r\n                        mergedConfiguration.getGlobalConfiguration(),\r\n                        mergedConfiguration.getOverrideConfiguration(), r.compat,\r\n                        r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,\r\n                        r.persistentState, results, newIntents, mService.isNextTransitionForward(),\r\n                        profilerInfo));\r\n                ...\r\n\r\n                // Schedule transaction.\r\n                mService.getLifecycleManager().scheduleTransaction(clientTransaction);\r\n                ...\r\n                \r\n    }\r\n```\r\n可以看到，这里主要是通过调用`ActivityManagerService` 中 `ClientLifecycleManager`对象 的 `scheduleTransaction(...)`方法去执行 **启动Activity** 的任务 \r\n\r\n上面需要执行的 `transaction` 对象是 `LaunchActivityItem`，在去了解它的内部构造之前，我们可以看一下 `scheduleTransaction(...)`是如何执行这个对象的。\r\n\r\n## ClientLifecycleManager\r\n\r\n### scheduleTransaction(...)\r\n\r\n\r\n```\r\n    void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\r\n        final IApplicationThread client = transaction.getClient();\r\n        transaction.schedule();\r\n        if (!(client instanceof Binder)) {\r\n            transaction.recycle();\r\n        }\r\n    }\r\n    \r\n    //ClientTransaction.java\r\n    private IApplicationThread mClient;\r\n    public void schedule() throws RemoteException {\r\n        mClient.scheduleTransaction(this);\r\n    }\r\n```\r\n\r\n可以看到 `schedule()` 方法就是调用 `IApplicationThread` 对象的 `scheduleTransaction(...)` 方法，显然，`IApplicationThread` 是 `ApplicationThread` 的客户端代理接口(又是AIDL),我们直接找到 `ApplicationThread` 看看它的实现方法\r\n\r\n## ActivityThread.ApplicationThread\r\n\r\n### scheduleTransaction(...)\r\n\r\n```\r\n        public void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\r\n            ActivityThread.this.scheduleTransaction(transaction);\r\n        }\r\n        \r\n```\r\n因为 `ActivityThread` 继承于 `ClientTransactionHandler`，所以会跳转到 `ClientTransactionHandler` 中。\r\n\r\n## ClientTransactionHandler\r\n\r\n### scheduleTransaction(...)\r\n\r\n\r\n```\r\n    void scheduleTransaction(ClientTransaction transaction) {\r\n        transaction.preExecute(this);\r\n        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);\r\n    }\r\n```\r\n\r\n可以看到，这里调用了一个 `sendMessage(...)` 方法。因为 `ClientTransactionHandler` 中的 `sendMessage(...)` 是抽象方法，所以我们去子类 `ActivityThread` 找它的实现\r\n\r\n## ActivityThread\r\n\r\n### sendMessage(...)\r\n\r\n\r\n```\r\n    final H mH = new H();\r\n    \r\n    class H extends Handler {...}\r\n\r\n    void sendMessage(int what, Object obj) {\r\n        sendMessage(what, obj, 0, 0, false);\r\n    }\r\n\r\n    private void sendMessage(int what, Object obj, int arg1, int arg2, boolean async) {\r\n        Message msg = Message.obtain();\r\n        msg.what = what;\r\n        msg.obj = obj;\r\n        msg.arg1 = arg1;\r\n        msg.arg2 = arg2;\r\n        if (async) {\r\n            msg.setAsynchronous(true);\r\n        }\r\n        mH.sendMessage(msg);\r\n    }\r\n```\r\n可以看到，最终就是调用内部的一个名为 **H** 的 **Handler** 对象发送了 **Message**，接下来就需要寻找 `what` 值为 `ActivityThread.H.EXECUTE_TRANSACTION` 的处理逻辑了：\r\n\r\n### case EXECUTE_TRANSACTION:\r\n\r\n\r\n```\r\n\r\n    private final TransactionExecutor mTransactionExecutor = new TransactionExecutor(this);\r\n    \r\n    \r\n                case EXECUTE_TRANSACTION:\r\n                    final ClientTransaction transaction = (ClientTransaction) msg.obj;\r\n                    mTransactionExecutor.execute(transaction);\r\n                    if (isSystem()) {\r\n                        transaction.recycle();\r\n                    }\r\n                    break;\r\n```\r\n接下来，就看一下 `execute(...)` 方法\r\n\r\n## TransactionExecutor\r\n\r\n### execute(...)\r\n\r\n\r\n```\r\n    public void execute(ClientTransaction transaction) {\r\n        final IBinder token = transaction.getActivityToken();\r\n\r\n        executeCallbacks(transaction);\r\n\r\n        executeLifecycleState(transaction);\r\n        mPendingActions.clear();\r\n    }\r\n```\r\n看一看 `executeCallbacks(...)` 方法\r\n\r\n\r\n```\r\n    public void executeCallbacks(ClientTransaction transaction) {\r\n        final List<ClientTransactionItem> callbacks = transaction.getCallbacks();\r\n        ...\r\n\r\n        final int size = callbacks.size();\r\n        for (int i = 0; i < size; ++i) {\r\n            final ClientTransactionItem item = callbacks.get(i);\r\n            ...\r\n\r\n            item.execute(mTransactionHandler, token, mPendingActions);\r\n            item.postExecute(mTransactionHandler, token, mPendingActions);\r\n            ...\r\n        }\r\n    }\r\n```\r\n这么看来，是执行所有 `ClientTransactionItem` 对象的 `execute(...)` 和 `postExecute(...)` 方法。到这里，我们就可以看一下之前在 `realStartActivityLocked(...)` 方法中添加的 `LaunchActivityItem` 对象了。\r\n\r\n\r\n\r\n## LaunchActivityItem\r\n\r\n由于没有在 `LaunchActivityItem` 中找到 `postExecute(...)`，应该是没有重写这个方法。所以我们只用看 `execute(...)` \r\n\r\n\r\n### execute(...)\r\n\r\n```\r\n    public void execute(ClientTransactionHandler client, IBinder token,\r\n            PendingTransactionActions pendingActions) {\r\n        Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, \"activityStart\");\r\n        ActivityClientRecord r = new ActivityClientRecord(token, mIntent, mIdent, mInfo,\r\n                mOverrideConfig, mCompatInfo, mReferrer, mVoiceInteractor, mState, mPersistentState,\r\n                mPendingResults, mPendingNewIntents, mIsForward,\r\n                mProfilerInfo, client);\r\n        client.handleLaunchActivity(r, pendingActions, null /* customIntent */);\r\n        Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);\r\n    }\r\n```\r\n可以看到这里新建了一个 `ActivityClientRecord` 对象，接着我们进入 `handleLaunchActivity(...)` 来看一看。很明显，这个方法在 `ClientTransactionHandler` 的子类 `ActivityThread` 中实现\r\n\r\n\r\n\r\n## ActivityThread\r\n\r\n### handleLaunchActivity(...)\r\n\r\n\r\n```\r\n    public Activity handleLaunchActivity(ActivityClientRecord r,\r\n            PendingTransactionActions pendingActions, Intent customIntent) {\r\n        ...    \r\n        final Activity a = performLaunchActivity(r, customIntent);\r\n        ...\r\n        return a;\r\n    }\r\n```\r\n\r\n进入 `performLaunchActivity(...)`\r\n\r\n### performLaunchActivity...)\r\n\r\n```\r\n    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\r\n        ...\r\n        Activity activity = null;\r\n        try {\r\n            java.lang.ClassLoader cl = appContext.getClassLoader();\r\n            activity = mInstrumentation.newActivity(\r\n                    cl, component.getClassName(), r.intent);\r\n            ...\r\n        } catch (Exception e) {\r\n            ...\r\n        }\r\n        ...\r\n        try {\r\n            if (activity != null) {\r\n                ...\r\n                activity.attach(appContext, this, getInstrumentation(), r.token,\r\n                        r.ident, app, r.intent, r.activityInfo, title, r.parent,\r\n                        r.embeddedID, r.lastNonConfigurationInstances, config,\r\n                        r.referrer, r.voiceInteractor, window, r.configCallback);\r\n                ...\r\n                if (r.isPersistable()) {\r\n                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);\r\n                } else {\r\n                    mInstrumentation.callActivityOnCreate(activity, r.state);\r\n                }\r\n                ...\r\n            }\r\n        } catch (SuperNotCalledException e) {\r\n            throw e;\r\n\r\n        }\r\n        ...\r\n        return activity;\r\n\r\n    }\r\n```\r\n\r\n可以看到，在这里通过 `Instrumentation.newActivity(...)` 创建了一个新的 **Activity** ，深入其中会发现是调用了 `Class.newInstance()`通过反射的方式来创建。之后就是 **Activity** 初始化时的一些其他初始化，包括生命周期的运行了。这里限于篇幅，我们就放在下一篇再讲吧！\r\n\r\n那么，到这里，这一篇的关于 **Activity的启动流程** 分析就到此结束啦！\r\n\r\n# App启动流程\r\n\r\n来到之前 `ActivityStackSupervisor` 中 `startSpecificActivityLocked(...)` 的分叉点，其实**app启动流程**的前部分和**Activity启动流程**的前部分是重叠的。我们将从这里开始，来分析一下 **app启动流程的后半段** 。接下来我们看一下 `startProcessLocked(...)` 方法\r\n\r\n## ActivityManagerService\r\n\r\n### startProcessLocked(...)\r\n\r\n\r\n```\r\n    final ProcessRecord startProcessLocked(String processName,\r\n            ApplicationInfo info, boolean knownToBeDead, int intentFlags,\r\n            String hostingType, ComponentName hostingName, boolean allowWhileBooting,\r\n            boolean isolated, boolean keepIfLarge) {\r\n        return startProcessLocked(...);\r\n    }\r\n```\r\n进入下一个 `startProcessLocked(...)` 方法\r\n\r\n\r\n```\r\n    final ProcessRecord startProcessLocked(String processName, ApplicationInfo info,\r\n            boolean knownToBeDead, int intentFlags, String hostingType, ComponentName hostingName,\r\n            boolean allowWhileBooting, boolean isolated, int isolatedUid, boolean keepIfLarge,\r\n            String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler) {\r\n        \r\n        if (app == null) {\r\n            checkTime(startTime, \"startProcess: creating new process record\");\r\n            app = newProcessRecordLocked(info, processName, isolated, isolatedUid);\r\n            ...\r\n        }\r\n        ...\r\n        final boolean success = startProcessLocked(app, hostingType, hostingNameStr, abiOverride);\r\n        checkTime(startTime, \"startProcess: done starting proc!\");\r\n        return success ? app : null;\r\n    }\r\n```\r\n可以看到，当 **app** 进程为 **null** 时，会创建一个新的。最后调用了另外一个 `startProcessLocked(...)` 方法\r\n\r\n我们看看另一个 `startProcessLocked(...)`\r\n\r\n```\r\n    private final boolean startProcessLocked(ProcessRecord app,\r\n            String hostingType, String hostingNameStr, String abiOverride) {\r\n        return startProcessLocked(app, hostingType, hostingNameStr,\r\n                false /* disableHiddenApiChecks */, abiOverride);\r\n    }\r\n```\r\n又一个\r\n\r\n\r\n```\r\n    private final boolean startProcessLocked(ProcessRecord app, String hostingType,\r\n            String hostingNameStr, boolean disableHiddenApiChecks, String abiOverride) {\r\n            ...\r\n            final String entryPoint = \"android.app.ActivityThread\";\r\n            \r\n            return startProcessLocked(hostingType, hostingNameStr, entryPoint, app, uid, gids,\r\n                    runtimeFlags, mountExternal, seInfo, requiredAbi, instructionSet, invokeWith,\r\n                    startTime);\r\n            ...        \r\n    }\r\n```\r\n注意上面的 **entryPoint** ，它将会是后面程序的入口\r\n\r\n然后继续进入下一个 `startProcessLocked(...)`\r\n\r\n```\r\n    private boolean startProcessLocked(String hostingType, String hostingNameStr, String entryPoint,\r\n            ProcessRecord app, int uid, int[] gids, int runtimeFlags, int mountExternal,\r\n            String seInfo, String requiredAbi, String instructionSet, String invokeWith,\r\n            long startTime) {\r\n            ...\r\n                    final ProcessStartResult startResult = startProcess(app.hostingType, entryPoint,\r\n                            app, app.startUid, gids, runtimeFlags, mountExternal, app.seInfo,\r\n                            requiredAbi, instructionSet, invokeWith, app.startTime);\r\n            ...\r\n    }\r\n```\r\n现在，进入 `startProcess(...)` 方法\r\n\r\n### startProcess(...)\r\n\r\n\r\n```\r\n    private ProcessStartResult startProcess(String hostingType, String entryPoint,\r\n            ProcessRecord app, int uid, int[] gids, int runtimeFlags, int mountExternal,\r\n            String seInfo, String requiredAbi, String instructionSet, String invokeWith,\r\n            long startTime) {\r\n        try {\r\n            ...\r\n            final ProcessStartResult startResult;\r\n            if (hostingType.equals(\"webview_service\")) {\r\n                startResult = startWebView(...);\r\n            } else {\r\n                startResult = Process.start(...);\r\n            }\r\n            checkTime(startTime, \"startProcess: returned from zygote!\");\r\n            return startResult;\r\n        } finally {\r\n            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\r\n        }\r\n    }\r\n```\r\n上面分了两种进程启动，其中就有我们比较熟知的 `WebView` 的进程，这个就暂时不用管了。\r\n\r\n而 **entryPoint** 就是之前所提到的进程入口 `android.app.ActivityThread`\r\n\r\n在之前，我们分析 `Handler` 的时候，发现 **app主线程** 就是在 `ActivityThread` 的 `main()` 中初始化的。所以关于 `ActivityThread` 我们先放一边，解决了 `Process` 的流程再来看\r\n\r\n接下来直接看 `Process.start(...)` 方法\r\n\r\n## Process\r\n\r\n### start(...)\r\n\r\n\r\n```\r\n    public static final ZygoteProcess zygoteProcess =\r\n            new ZygoteProcess(ZYGOTE_SOCKET, SECONDARY_ZYGOTE_SOCKET);\r\n            \r\n    public static final ProcessStartResult start(final String processClass,\r\n                                  final String niceName,\r\n                                  int uid, int gid, int[] gids,\r\n                                  int runtimeFlags, int mountExternal,\r\n                                  int targetSdkVersion,\r\n                                  String seInfo,\r\n                                  String abi,\r\n                                  String instructionSet,\r\n                                  String appDataDir,\r\n                                  String invokeWith,\r\n                                  String[] zygoteArgs) {\r\n        return zygoteProcess.start(processClass, niceName, uid, gid, gids,\r\n                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,\r\n                    abi, instructionSet, appDataDir, invokeWith, zygoteArgs);\r\n    }\r\n```\r\n这里出现了一个 `zygoteProcess` 对象，是不是听说过这个进程很多次了？我们接着往下看\r\n\r\n## ZygoteProcess\r\n\r\n### start(...)\r\n\r\n\r\n```\r\n    public final Process.ProcessStartResult start(final String processClass,\r\n                                                  final String niceName,\r\n                                                  int uid, int gid, int[] gids,\r\n                                                  int runtimeFlags, int mountExternal,\r\n                                                  int targetSdkVersion,\r\n                                                  String seInfo,\r\n                                                  String abi,\r\n                                                  String instructionSet,\r\n                                                  String appDataDir,\r\n                                                  String invokeWith,\r\n                                                  String[] zygoteArgs) {\r\n        try {\r\n            return startViaZygote(processClass, niceName, uid, gid, gids,\r\n                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,\r\n                    abi, instructionSet, appDataDir, invokeWith, false /* startChildZygote */,\r\n                    zygoteArgs);\r\n        } catch (ZygoteStartFailedEx ex) {\r\n            Log.e(LOG_TAG,\r\n                    \"Starting VM process through Zygote failed\");\r\n            throw new RuntimeException(\r\n                    \"Starting VM process through Zygote failed\", ex);\r\n        }\r\n    }\r\n```\r\n\r\n进入 `startViaZygote(...)`\r\n\r\n### `startViaZygote(...)`\r\n\r\n\r\n```\r\n    private Process.ProcessStartResult startViaZygote(final String processClass,\r\n                                                      final String niceName,\r\n                                                      final int uid, final int gid,\r\n                                                      final int[] gids,\r\n                                                      int runtimeFlags, int mountExternal,\r\n                                                      int targetSdkVersion,\r\n                                                      String seInfo,\r\n                                                      String abi,\r\n                                                      String instructionSet,\r\n                                                      String appDataDir,\r\n                                                      String invokeWith,\r\n                                                      boolean startChildZygote,\r\n                                                      String[] extraArgs)\r\n                                                      throws ZygoteStartFailedEx {\r\n                                          \r\n        ...                                              \r\n        argsForZygote.add(processClass);\r\n        ...\r\n        \r\n        synchronized(mLock) {\r\n            return zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);\r\n        }                                              \r\n    }\r\n```\r\n\r\n上面的 `processClass` 就是我们之前传入的 `entryPoint`，也就是 `android.app.ActivityThread`\r\n\r\n而 `openZygoteSocketIfNeeded(abi)` 方法会尝试去开启一个 `LocalSocket` 进行通信\r\n\r\n### openZygoteSocketIfNeeded(String abi)\r\n\r\n```\r\n    private ZygoteState openZygoteSocketIfNeeded(String abi) throws ZygoteStartFailedEx {\r\n        Preconditions.checkState(Thread.holdsLock(mLock), \"ZygoteProcess lock not held\");\r\n        ...\r\n        secondaryZygoteState = ZygoteState.connect(mSecondarySocket);\r\n        ...\r\n    }\r\n    \r\n        public static ZygoteState connect(LocalSocketAddress address) throws IOException {\r\n            DataInputStream zygoteInputStream = null;\r\n            BufferedWriter zygoteWriter = null;\r\n            final LocalSocket zygoteSocket = new LocalSocket();\r\n\r\n            try {\r\n                zygoteSocket.connect(address);\r\n\r\n                zygoteInputStream = new DataInputStream(zygoteSocket.getInputStream());\r\n\r\n                zygoteWriter = new BufferedWriter(new OutputStreamWriter(\r\n                        zygoteSocket.getOutputStream()), 256);\r\n            } catch (IOException ex) {\r\n                try {\r\n                    zygoteSocket.close();\r\n                } catch (IOException ignore) {\r\n                }\r\n\r\n                throw ex;\r\n            }\r\n\r\n            String abiListString = getAbiList(zygoteWriter, zygoteInputStream);\r\n\r\n            return new ZygoteState(zygoteSocket, zygoteInputStream, zygoteWriter,\r\n                    Arrays.asList(abiListString.split(\",\")));\r\n        }\r\n```\r\n可以看到，数据都被保存在了 `ZygoteState` 中了\r\n\r\n上面关于 `Socket` 的部分就先放下，主要为下面的内容做铺垫。 接下来，进入之前的 `zygoteSendArgsAndGetResult(...)`\r\n\r\n### zygoteSendArgsAndGetResult(...)\r\n\r\n\r\n```\r\n    private static Process.ProcessStartResult zygoteSendArgsAndGetResult(\r\n            ZygoteState zygoteState, ArrayList<String> args)\r\n            throws ZygoteStartFailedEx {\r\n            \r\n            ...\r\n            /**\r\n             * See com.android.internal.os.SystemZygoteInit.readArgumentList()\r\n             * Presently the wire format to the zygote process is:\r\n             * a) a count of arguments (argc, in essence)\r\n             * b) a number of newline-separated argument strings equal to count\r\n             *\r\n             * After the zygote process reads these it will write the pid of\r\n             * the child or -1 on failure, followed by boolean to\r\n             * indicate whether a wrapper process was used.\r\n             */\r\n            final BufferedWriter writer = zygoteState.writer;\r\n            final DataInputStream inputStream = zygoteState.inputStream;\r\n\r\n            writer.write(Integer.toString(args.size()));\r\n            writer.newLine();\r\n\r\n            for (int i = 0; i < sz; i++) {\r\n                String arg = args.get(i);\r\n                writer.write(arg);\r\n                writer.newLine();\r\n            }\r\n\r\n            writer.flush();\r\n\r\n            // Should there be a timeout on this?\r\n            Process.ProcessStartResult result = new Process.ProcessStartResult();\r\n\r\n            result.pid = inputStream.readInt();\r\n            result.usingWrapper = inputStream.readBoolean();\r\n\r\n            if (result.pid < 0) {\r\n                throw new ZygoteStartFailedEx(\"fork() failed\");\r\n            }\r\n            return result;\r\n            ...\r\n    }\r\n```\r\n从上面的逻辑来看，`zygoteSendArgsAndGetResult(...)` 方法是通过 **Socket** 通信的方式将数据传到了接收方，那么这个接收方在哪里呢？\r\n\r\n上面的注释中，提示是在 `com.android.internal.os.SystemZygoteInit` 中的 `readArgumentList()` 方法，但是一番寻找后，并没有发现这个类。不过倒是在同目录下找到了 `ZygoteInit` 类，想必这里是注释错误？（后来查阅相关资料，发现的确如此）\r\n\r\n那么，我们就先进入 `ZygoteInit` 一探究竟吧，看看它到底在哪里\r\n\r\n## ZygoteInit\r\n\r\n先从 `main(...)` 方法开始看起\r\n\r\n### main(...)\r\n\r\n```\r\n    public static void main(String argv[]) {\r\n        ZygoteServer zygoteServer = new ZygoteServer();\r\n        ...\r\n        zygoteServer.registerServerSocketFromEnv(socketName);\r\n        ...\r\n        try {\r\n            ...\r\n            if (startSystemServer) {\r\n                Runnable r = forkSystemServer(abiList, socketName, zygoteServer);\r\n                if (r != null) {\r\n                    r.run();\r\n                    return;\r\n                }\r\n            }\r\n            caller = zygoteServer.runSelectLoop(abiList);\r\n        } catch (Throwable ex) {\r\n    \r\n            throw ex;\r\n        }\r\n        ...\r\n    }\r\n```\r\n上面我们主要关注 `runSelectLoop(...)` 方法\r\n\r\n## ZygoteServer\r\n\r\n### runSelectLoop(String abiList)\r\n\r\n\r\n```\r\n    Runnable runSelectLoop(String abiList) {\r\n        \r\n        ...\r\n        while (true) {\r\n            ...\r\n            for (int i = pollFds.length - 1; i >= 0; --i) {\r\n                ...\r\n                        ZygoteConnection connection = peers.get(i);\r\n                        final Runnable command = connection.processOneCommand(this);\r\n                ...\r\n            }\r\n            \r\n        }\r\n        ...\r\n        \r\n    }\r\n```\r\n我们看一下 `ZygoteConnection` 的 `processOneCommand(...)` 方法\r\n\r\n## ZygoteConnection\r\n\r\n### processOneCommand(ZygoteServer zygoteServer)\r\n\r\n\r\n```\r\n    Runnable processOneCommand(ZygoteServer zygoteServer) {\r\n        String args[];\r\n        ...\r\n        try {\r\n            args = readArgumentList();\r\n            descriptors = mSocket.getAncillaryFileDescriptors();\r\n        } catch (IOException ex) {\r\n            throw new IllegalStateException(\"IOException on command socket\", ex);\r\n        }\r\n        ...\r\n        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,\r\n                parsedArgs.runtimeFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,\r\n                parsedArgs.niceName, fdsToClose, fdsToIgnore, parsedArgs.startChildZygote,\r\n                parsedArgs.instructionSet, parsedArgs.appDataDir);\r\n\r\n        try {\r\n            if (pid == 0) {\r\n                ...\r\n                return handleChildProc(parsedArgs, descriptors, childPipeFd,\r\n                        parsedArgs.startChildZygote);\r\n            } else {\r\n                ...\r\n                handleParentProc(pid, descriptors, serverPipeFd);\r\n                return null;\r\n            }\r\n        } finally {\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n```\r\n上面有一个 `readArgumentList()` 方法，和之前在 `zygoteSendArgsAndGetResult(...)` 中的注释一样，我们来看一看：\r\n\r\n\r\n```\r\n    private String[] readArgumentList()\r\n            throws IOException {\r\n\r\n        /**\r\n         * See android.os.Process.zygoteSendArgsAndGetPid()\r\n         * Presently the wire format to the zygote process is:\r\n         * a) a count of arguments (argc, in essence)\r\n         * b) a number of newline-separated argument strings equal to count\r\n         *\r\n         * After the zygote process reads these it will write the pid of\r\n         * the child or -1 on failure.\r\n         */\r\n\r\n        int argc;\r\n\r\n        try {\r\n            String s = mSocketReader.readLine();\r\n\r\n            if (s == null) {\r\n                // EOF reached.\r\n                return null;\r\n            }\r\n            argc = Integer.parseInt(s);\r\n        } catch (NumberFormatException ex) {\r\n            Log.e(TAG, \"invalid Zygote wire format: non-int at argc\");\r\n            throw new IOException(\"invalid wire format\");\r\n        }\r\n        ...\r\n\r\n        String[] result = new String[argc];\r\n        for (int i = 0; i < argc; i++) {\r\n            result[i] = mSocketReader.readLine();\r\n            if (result[i] == null) {\r\n                // We got an unexpected EOF.\r\n                throw new IOException(\"truncated request\");\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n```\r\n可以看到，上面明显也是一个 **Socket** 通信的方式，并且注释中的内容和之前的是对应的。所以可以确定这里对之前传递过来的信息进行了处理，其中就包含 `ActivityThread.main` 入口\r\n\r\n接下来，继续看 `processOneCommand(...)` 剩下的内容：\r\n\r\n当 `forkAndSpecialize(...)` 方法返回的pid为0时，表示是fork出来的子进程；如果是父进程，会返回-1或是报错\r\n\r\n我们看一下 `handleChildProc(...)`\r\n\r\n### handleChildProc(...)\r\n\r\n\r\n```\r\n    private Runnable handleChildProc(Arguments parsedArgs, FileDescriptor[] descriptors,\r\n            FileDescriptor pipeFd, boolean isZygote) {\r\n        ...\r\n        if (parsedArgs.invokeWith != null) {\r\n            WrapperInit.execApplication(parsedArgs.invokeWith,\r\n                    parsedArgs.niceName, parsedArgs.targetSdkVersion,\r\n                    VMRuntime.getCurrentInstructionSet(),\r\n                    pipeFd, parsedArgs.remainingArgs);\r\n\r\n            // Should not get here.\r\n            throw new IllegalStateException(\"WrapperInit.execApplication unexpectedly returned\");\r\n        } else {\r\n            if (!isZygote) {\r\n                return ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs,\r\n                        null /* classLoader */);\r\n            } else {\r\n                return ZygoteInit.childZygoteInit(parsedArgs.targetSdkVersion,\r\n                        parsedArgs.remainingArgs, null /* classLoader */);\r\n            }\r\n        }\r\n    }\r\n```\r\n关于 `invokeWith` 这个参数，它是在 `ActivityManagerService` 的 `startProcessLocked(...)` 方法被赋值的：\r\n\r\n```\r\n            String invokeWith = null;\r\n            if ((app.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {\r\n                // Debuggable apps may include a wrapper script with their library directory.\r\n                String wrapperFileName = app.info.nativeLibraryDir + \"/wrap.sh\";\r\n                StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();\r\n                try {\r\n                    if (new File(wrapperFileName).exists()) {\r\n                        invokeWith = \"/system/bin/logwrapper \" + wrapperFileName;\r\n                    }\r\n                } finally {\r\n                    StrictMode.setThreadPolicy(oldPolicy);\r\n                }\r\n            }\r\n```\r\n也就是只有当调试的app目录中包含一个脚本程序时，才会给它赋值。所以我就不考虑这个情况了\r\n\r\n还剩下 `isZygote` 参数，它是 `ZygoteConnection.Arguments` 中的 `startChildZygote` 变量，在 `ZygoteProcess` 的 `start(...)` 方法中被赋值\r\n\r\n\r\n```\r\n          return startViaZygote(processClass, niceName, uid, gid, gids,\r\n                    runtimeFlags, mountExternal, targetSdkVersion, seInfo,\r\n                    abi, instructionSet, appDataDir, invokeWith, false /* startChildZygote */,\r\n                    zygoteArgs);\r\n```\r\n其中的 **false** 就是。所以 `handleChildProc(...)` 中，我们只关注 `ZygoteInit.zygoteInit(...)` 方法就行了\r\n\r\n又来到 `ZygoteInit`\r\n\r\n## ZygoteInit\r\n\r\n### zygoteInit(...)\r\n\r\n\r\n```\r\n    public static final Runnable zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader) {\r\n        ...\r\n        ZygoteInit.nativeZygoteInit();\r\n        return RuntimeInit.applicationInit(targetSdkVersion, argv, classLoader);\r\n    }\r\n```\r\n看一下 `RuntimeInit.applicationInit(...)` 方法\r\n\r\n## RuntimeInit\r\n\r\n### applicationInit(...)\r\n\r\n\r\n```\r\n    protected static Runnable applicationInit(int targetSdkVersion, String[] argv,\r\n            ClassLoader classLoader) {\r\n        ...\r\n\r\n        final Arguments args = new Arguments(argv);\r\n\r\n        // The end of of the RuntimeInit event (see #zygoteInit).\r\n        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\r\n\r\n        // Remaining arguments are passed to the start class's static main\r\n        return findStaticMain(args.startClass, args.startArgs, classLoader);\r\n    }\r\n```\r\n看起来 `findStaticMain(...)` 就是 `main` 方法的入口了\r\n\r\n### findStaticMain(...)\r\n\r\n```\r\n    protected static Runnable findStaticMain(String className, String[] argv,\r\n            ClassLoader classLoader) {\r\n        Class<?> cl;\r\n\r\n        try {\r\n            cl = Class.forName(className, true, classLoader);\r\n        } catch (ClassNotFoundException ex) {\r\n            ...\r\n        }\r\n\r\n        Method m;\r\n        try {\r\n            m = cl.getMethod(\"main\", new Class[] { String[].class });\r\n        } catch (NoSuchMethodException ex) {\r\n            ...\r\n        } catch (SecurityException ex) {\r\n            ...\r\n        }\r\n\r\n        int modifiers = m.getModifiers();\r\n        ...\r\n\r\n        return new MethodAndArgsCaller(m, argv);\r\n    }\r\n    \r\n    static class MethodAndArgsCaller implements Runnable {\r\n        /** method to call */\r\n        private final Method mMethod;\r\n\r\n        /** argument array */\r\n        private final String[] mArgs;\r\n\r\n        public MethodAndArgsCaller(Method method, String[] args) {\r\n            mMethod = method;\r\n            mArgs = args;\r\n        }\r\n\r\n        public void run() {\r\n            try {\r\n                mMethod.invoke(null, new Object[] { mArgs });\r\n            } catch (IllegalAccessException ex) {\r\n                throw new RuntimeException(ex);\r\n            } catch (InvocationTargetException ex) {\r\n                ...\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n显然，这里是通过反射的方式，来调用 `main()` 方法，从而启动 `ActivityThread` ，那么至此 **Zygote** 相关的内容就分析到这里了。\r\n\r\n接下来，我们看一下 `ActivityThread` 中，是在哪里启动 **首个Activity** 的\r\n\r\n## ActivityThread\r\n\r\n### main(...)\r\n\r\n```\r\n    public static void main(String[] args) {\r\n        ...\r\n        Looper.prepareMainLooper();\r\n        ...\r\n        ActivityThread thread = new ActivityThread();\r\n        thread.attach(false, startSeq);\r\n        ...\r\n        Looper.loop();\r\n    }\r\n```\r\n`Looper` 相关的内容，之前已在 **Handler源码分析** 中已经分析过，这里就不再赘述了。我们进入 `attach(...)` 方法一探究竟\r\n\r\n### attach(...)\r\n\r\n```\r\n    final ApplicationThread mAppThread = new ApplicationThread();\r\n\r\n    private void attach(boolean system, long startSeq) {\r\n        ...\r\n        if (!system) {\r\n            ...\r\n            RuntimeInit.setApplicationObject(mAppThread.asBinder());\r\n            final IActivityManager mgr = ActivityManager.getService();\r\n            try {\r\n                mgr.attachApplication(mAppThread, startSeq);\r\n            } catch (RemoteException ex) {\r\n                throw ex.rethrowFromSystemServer();\r\n            }\r\n            ...\r\n        } else {\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n```\r\n因为传过来的 `system` 为 **false**，所以这里只考虑第一个 **if** 逻辑\r\n\r\n进入 `attachApplication(...)` 看一看，因为是 `ActivityManagerService` 的代理，所以直接 `ActivityManagerService` 找对应的方法\r\n\r\n## ActivityManagerService\r\n\r\n### attachApplication(...)\r\n\r\n\r\n```\r\n    @Override\r\n    public final void attachApplication(IApplicationThread thread, long startSeq) {\r\n        synchronized (this) {\r\n            int callingPid = Binder.getCallingPid();\r\n            final int callingUid = Binder.getCallingUid();\r\n            final long origId = Binder.clearCallingIdentity();\r\n            attachApplicationLocked(thread, callingPid, callingUid, startSeq);\r\n            Binder.restoreCallingIdentity(origId);\r\n        }\r\n    }\r\n```\r\n然后看一下 `attachApplicationLocked(...)`\r\n\r\n### attachApplicationLocked(...)\r\n\r\n又是一个超长的方法体\r\n\r\n```\r\n    private final boolean attachApplicationLocked(IApplicationThread thread,\r\n            int pid, int callingUid, long startSeq) {\r\n        ...\r\n                thread.bindApplication(processName, appInfo, providers,\r\n                        app.instr.mClass,\r\n                        profilerInfo, app.instr.mArguments,\r\n                        app.instr.mWatcher,\r\n                        app.instr.mUiAutomationConnection, testMode,\r\n                        mBinderTransactionTrackingEnabled, enableTrackAllocation,\r\n                        isRestrictedBackupMode || !normalMode, app.persistent,\r\n                        new Configuration(getGlobalConfiguration()), app.compat,\r\n                        getCommonServicesLocked(app.isolated),\r\n                        mCoreSettingsObserver.getCoreSettingsLocked(),\r\n                        buildSerial, isAutofillCompatEnabled);\r\n        ...\r\n       // See if the top visible activity is waiting to run in this process...\r\n        if (normalMode) {\r\n            try {\r\n                if (mStackSupervisor.attachApplicationLocked(app)) {\r\n                    didSomething = true;\r\n                }\r\n            } catch (Exception e) {\r\n                Slog.wtf(TAG, \"Exception thrown launching activities in \" + app, e);\r\n                badApp = true;\r\n            }\r\n        }\r\n    }\r\n```\r\n上面的第一个部分是 `bindApplication(...)` 方法，显然和 **Application** 有关，因为 `IApplicationThread` 是 `ActivityThread` 中 `ApplicationThread` 的代理，所以我们直接在里面寻找相关方法\r\n\r\n## ActivityThread.ApplicationThread\r\n\r\n### bindApplication(...)\r\n\r\n\r\n```\r\n        public final void bindApplication(String processName, ApplicationInfo appInfo,\r\n                List<ProviderInfo> providers, ComponentName instrumentationName,\r\n                ProfilerInfo profilerInfo, Bundle instrumentationArgs,\r\n                IInstrumentationWatcher instrumentationWatcher,\r\n                IUiAutomationConnection instrumentationUiConnection, int debugMode,\r\n                boolean enableBinderTracking, boolean trackAllocation,\r\n                boolean isRestrictedBackupMode, boolean persistent, Configuration config,\r\n                CompatibilityInfo compatInfo, Map services, Bundle coreSettings,\r\n                String buildSerial, boolean autofillCompatibilityEnabled) {\r\n            ...\r\n            sendMessage(H.BIND_APPLICATION, data);\r\n        }\r\n```\r\n\r\n根据这个 `BIND_APPLICATION` 继续下一步\r\n\r\n\r\n```\r\n                case BIND_APPLICATION:\r\n                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, \"bindApplication\");\r\n                    AppBindData data = (AppBindData)msg.obj;\r\n                    handleBindApplication(data);\r\n                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);\r\n                    break;\r\n```\r\n得到 `handleBindApplication(...)` 方法\r\n\r\n### handleBindApplication(...)\r\n\r\n\r\n```\r\n    private void handleBindApplication(AppBindData data) {\r\n        ...\r\n        final InstrumentationInfo ii;\r\n        ...\r\n        if (ii != null) {\r\n            ...\r\n                mInstrumentation = (Instrumentation)\r\n                    cl.loadClass(data.instrumentationName.getClassName()).newInstance();\r\n            ...\r\n        } else {\r\n            mInstrumentation = new Instrumentation();\r\n            mInstrumentation.basicInit(this);\r\n        }\r\n        ...\r\n        Application app;\r\n        ...\r\n            app = data.info.makeApplication(data.restrictedBackupMode, null);\r\n        ...\r\n                mInstrumentation.onCreate(data.instrumentationArgs);\r\n        ...\r\n                mInstrumentation.callApplicationOnCreate(app);\r\n        ...\r\n    }\r\n```\r\n上面创建了 `Application` 实例，以及 `Instrumentation` 实例。关于绑定 `Application` 就看到这里\r\n\r\n\r\n接着我们来看一下之前 `attachApplicationLocked` 中的 `attachApplicationLocked(...)` 方法，显然这和 `Activity` 启动有关\r\n\r\n## ActivityStackSupervisor\r\n\r\n### attachApplicationLocked(...)\r\n\r\n\r\n```\r\n    boolean attachApplicationLocked(ProcessRecord app) throws RemoteException {\r\n        ...\r\n                final int size = mTmpActivityList.size();\r\n                for (int i = 0; i < size; i++) {\r\n                    final ActivityRecord activity = mTmpActivityList.get(i);\r\n                    if (activity.app == null && app.uid == activity.info.applicationInfo.uid\r\n                            && processName.equals(activity.processName)) {\r\n                        try {\r\n                            if (realStartActivityLocked(activity, app,\r\n                                    top == activity /* andResume */, true /* checkConfig */)) {\r\n                                didSomething = true;\r\n                            }\r\n                        } catch (RemoteException e) {\r\n                            ...\r\n                        }\r\n                    }\r\n                }\r\n        ...\r\n        return didSomething;\r\n    }\r\n```\r\n显然， 这里调用了 `realStartActivityLocked(...)` 方法，也就是说从这里开始，又回到了前面分析 **Activity启动流程** 的环节中，我们所有的分析已经形成一个环了！\r\n\r\n那么这篇文章的分析部分，就到这里结束啦！\r\n\r\n\r\n\r\n# 总结\r\n\r\n一开始只想了解一下 **Activity的启动流程**，可是看到中途又不知不觉进入了 **app启动流程** 的坑。看源码就是这样，千丝万缕的关系，最后汇成一个大的体系。\r\n\r\n下面做个简单的总结吧：\r\n\r\n- 流程中的几处跳转，都是通过AIDL来实现的。分别是 `IApplicationThread` 和 `IActivityManager`。\r\n    - `IApplicationThread` 是AMS请求app进程的接口，它的实现是在 `ActivityThread` 中的 `ApplicationThread`\r\n    - `IActivityManager` 是app进程请求AMS的接口，它的实现就是AMS：`ActivityManagerService` 啦\r\n- 在app的启动流程中，通过 **Socket通信** 传递启动相关信息，来启动 `ActivityThread` \r\n\r\n文字总结大概就是这样，剩下的就看图片吧，方便多了\r\n\r\n## Activity 启动流程\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/activity_start/activity_start.png)\r\n\r\n## App启动流程\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/activity_start/app_start.png)","db7853d6":"---\r\ntitle: Android Studio自定义模板实现一键创建MVP结构\r\ndate: 2018-12-02 21:49:47\r\nindex_img: /img/create_mvp.png\r\ntags: Android\r\n---\r\n\r\n# 前言\r\n\r\n之前有写过关于如何使用 DataBinding 的两篇文章，不仅仅是为了消灭掉一部分重复代码，更是为了提高开发效率。详情可以点击下方的传送门  \r\n[DataBinding——从路人到好友（一）：初遇](https://oldchen.top/2018/10/17/DataBinding%E2%80%94%E2%80%94%E4%BB%8E%E8%B7%AF%E4%BA%BA%E5%88%B0%E5%A5%BD%E5%8F%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%9D%E9%81%87/)  \r\n[DataBinding——从相识到相知（二）：互酌](https://oldchen.top/2018/10/20/DataBinding%E2%80%94%E2%80%94%E4%BB%8E%E7%9B%B8%E8%AF%86%E5%88%B0%E7%9B%B8%E7%9F%A5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%BA%92%E9%85%8C/)\r\n\r\n<!--more--> \r\n\r\n而这篇文章主要介绍的就是如何通过 Android Studio 提供的模版功能去自定义模版结构，从而实现类似于一键创建整个MVP代码的功能。可以说在提高效率的道路上，又向前走了一大步\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/001.jpg)\r\n\r\n下面可以来看一看具体效果：\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/002.gif)\r\n\r\n# 介绍\r\n\r\n在 Android Studio 中，创建一个 Activity 可以直接通过 **File -> New -> Activity** 来进行选择创建\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/003.png)\r\n\r\n通过这种方式创建的 Activity 会自动在 AndroidManifest.xml 中完成注册，创建其他组件也可以通过这种方式。\r\n\r\n不过，如果你正在使用某种开发模式，譬如 **MVP、MVVM** 等，你每创建一个 Activity 就意味着需要同时创建一系列其他相关的类。\r\n\r\n为了避免这种毫无意义的重复性劳动，我们可以编写模板代码去实现一键创建重复代码。\r\n\r\n# 开始\r\n\r\n下面我们就来开始模版的编写吧。\r\n\r\n首先，找到你的 **Android Studio** 的安装目录，然后根据这个目录找到 **...\\templates** 目录：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/004.png)\r\n\r\n然后进入 **activityes** 目录，我们将要编写的各种模版就在这个目录内：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/005.png)\r\n\r\n要说如何去编写模版代码，一开始我也是一无所知的，不过好在 Android Studio 已经为我们提供了这些例子，我们直接参考例子去写。\r\n\r\n就拿最简单的 **Empty Activity** 来开始吧\r\n\r\n进入到 **EmptyActivity** 目录\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/006.png)\r\n\r\n## globals.xml.ftl\r\n\r\n打开 **globals.xml.ftl** 文件，下面是它的内容：\r\n\r\n```\r\n<?xml version=\"1.0\"?>\r\n<globals>\r\n    <global id=\"hasNoActionBar\" type=\"boolean\" value=\"false\" />\r\n    <global id=\"parentActivityClass\" value=\"\" />\r\n    <global id=\"simpleLayoutName\" value=\"${layoutName}\" />\r\n    <global id=\"excludeMenu\" type=\"boolean\" value=\"true\" />\r\n    <global id=\"generateActivityTitle\" type=\"boolean\" value=\"false\" />\r\n    <#include \"../common/common_globals.xml.ftl\" />\r\n</globals>\r\n\r\n```\r\n\r\n根据文件名来看， **globals.xml.ftl** 的作用是用来控制一些全局变量，比如是否显示 **ActionBar** 等，暂且先不用管它\r\n\r\n## recipe.xml.ftl\r\n\r\n **recipe.xml.ftl** 文件内容如下：\r\n \r\n```\r\n<?xml version=\"1.0\"?>\r\n<#import \"root://activities/common/kotlin_macros.ftl\" as kt>\r\n<recipe>\r\n    <#include \"../common/recipe_manifest.xml.ftl\" />\r\n    <@kt.addAllKotlinDependencies />\r\n\r\n<#if generateLayout>\r\n    <#include \"../common/recipe_simple.xml.ftl\" />\r\n    <open file=\"${escapeXmlAttribute(resOut)}/layout/${layoutName}.xml\" />\r\n</#if>\r\n\r\n    <instantiate from=\"root/src/app_package/SimpleActivity.${ktOrJavaExt}.ftl\"\r\n                   to=\"${escapeXmlAttribute(srcOut)}/${activityClass}.${ktOrJavaExt}\" />\r\n    <open file=\"${escapeXmlAttribute(srcOut)}/${activityClass}.${ktOrJavaExt}\" />\r\n\r\n</recipe>\r\n\r\n```\r\n\r\n第一段\r\n\r\n        <#import \"root://activities/common/kotlin_macros.ftl\" as kt>\r\n\r\n就是用于导入Kotlin的相关命令，同时它的别名为 **kt**\r\n\r\n主要还是注意 **instantiate** 代码块中的相关信息， 其中 **${ktOrJavaExt}** 表示当你创建模版的时候，创建的 **.java** 文件还是 **.kt** 文件，而相对应的，你需要在编写模版例子的时候分别写上对应的两份 **Java** 与 **Kotlin** 代码\r\n\r\n**open** 代码块就是创建模版后，默认打开的文件\r\n\r\n# template.xml\r\n\r\n**template.xml** 代码略长，这里只是贴出了大致代码\r\n\r\n```\r\n<?xml version=\"1.0\"?>\r\n<template\r\n    format=\"5\"\r\n    revision=\"5\"\r\n    name=\"Empty Activity\"\r\n    minApi=\"9\"\r\n    minBuildApi=\"14\"\r\n    description=\"Creates a new empty activity\">\r\n\r\n    <category value=\"Activity\" />\r\n    <formfactor value=\"Mobile\" />\r\n\r\n    <parameter\r\n        id=\"activityClass\"\r\n        name=\"Activity Name\"\r\n        type=\"string\"\r\n        constraints=\"class|unique|nonempty\"\r\n        suggest=\"${layoutToActivity(layoutName)}\"\r\n        default=\"MainActivity\"\r\n        help=\"The name of the activity class to create\" />\r\n        \r\n        \r\n        ...\r\n\r\n    <!-- 128x128 thumbnails relative to template.xml -->\r\n    <thumbs>\r\n        <!-- default thumbnail is required -->\r\n        <thumb>template_blank_activity.png</thumb>\r\n    </thumbs>\r\n\r\n    <globals file=\"globals.xml.ftl\" />\r\n    <execute file=\"recipe.xml.ftl\" />\r\n\r\n</template>\r\n\r\n```\r\n我们挑出其中的重点来说\r\n\r\n```\r\n<category value=\"Activity\" />\r\n```\r\n表示当前的这个模版的分类，当前的 **Value** 是 **Activity** ，就表示它会出现在 **File -> New -> Activity** 中，这个是可以自定义的.\r\n\r\n```\r\n        <thumbs>\r\n        <!-- default thumbnail is required -->\r\n        <thumb>template_blank_activity.png</thumb>\r\n        </thumbs>\r\n```\r\n**thumbs** 用于指定创建模版时所展示出来的图片\r\n\r\n而最重要的，还是 **parameter** 代码块的内容了，在这之中，我们只需要关注以下几个，其他的顾名思义即可。\r\n\r\n\r\n```\r\n    <parameter\r\n        id=\"activityClass\"\r\n        name=\"Activity Name\"\r\n        type=\"string\"\r\n        constraints=\"class|unique|nonempty\"\r\n        suggest=\"${layoutToActivity(layoutName)}\"\r\n        default=\"MainActivity\"\r\n        help=\"The name of the activity class to create\" />\r\n\r\n```\r\n**activityClass** 表示所要创建的 Activity ，其中 **default** 为默认名。\r\n\r\n\r\n```\r\n    <parameter\r\n        id=\"generateLayout\"\r\n        name=\"Generate Layout File\"\r\n        type=\"boolean\"\r\n        default=\"true\"\r\n        help=\"If true, a layout file will be generated\" />\r\n```\r\n上面的代码块表示是否同时自动创建一个Activity对应的布局\r\n\r\n\r\n```\r\n  <parameter\r\n        id=\"layoutName\"\r\n        name=\"Layout Name\"\r\n        type=\"string\"\r\n        constraints=\"layout|unique|nonempty\"\r\n        suggest=\"${activityToLayout(activityClass)}\"\r\n        default=\"activity_main\"\r\n        visibility=\"generateLayout\"\r\n        help=\"The name of the layout to create for the activity\" />\r\n```\r\n **layoutName** 则表示布局的名字，这里的 **suggest** 属性所填写的内容即为布局名，**${activityToLayout(activityClass)}**则为跟随Activity的名字，其中 **activityClass** 是Activity名字的引用\r\n \r\n 剩下的不用再作说明，基本上可以见名知意。\r\n \r\n# 模版代码\r\n\r\n接下来我们从 **EmptyActivity** 中的 **root** 目录一直进入，直到看到下面两个文件\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/007.png)\r\n\r\n可以看到，一个后缀是 **java.ftl** 另外一个后缀是 **kt.ftl**，他们分别用于创建 Java模版与Kotlin模版，如果你暂时不使用Kotlin的话，可以不用去关心 Kotlin模版，当你完成了Java模版的编写，也可以使用 Android Studio自带的转换功能，还是蛮方便的。\r\n\r\n下面来看一下Java的模版代码：\r\n\r\n```\r\npackage ${packageName};\r\n\r\nimport ${superClassFqcn};\r\nimport android.os.Bundle;\r\n<#if (includeCppSupport!false) && generateLayout>\r\nimport android.widget.TextView;\r\n</#if>\r\n\r\npublic class ${activityClass} extends ${superClass} {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n<#if generateLayout>\r\n        setContentView(R.layout.${layoutName});\r\n       <#include \"../../../../common/jni_code_usage.java.ftl\">\r\n<#elseif includeCppSupport!false>\r\n\r\n        // Example of a call to a native method\r\n        android.util.Log.d(\"${activityClass}\", stringFromJNI());\r\n</#if>\r\n    }\r\n<#include \"../../../../common/jni_code_snippet.java.ftl\">\r\n}\r\n\r\n```\r\n- ${packageName}：表示当前包名\r\n- ${activityClass}：表示当前的Activity名字\r\n- ${superClass}：表示继承的Activity，同时为了让这个父类生效，需要在import中加入${superClassFqcn}\r\n- ${layoutName}：当前Activity所对应的布局名\r\n\r\n目前我们只需要关注上面这部分，接下来可以看一下我们实际想要创建的MVP结构：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/008.png)\r\n\r\n编写模版代码前，最好的方式是先写一遍例子，然后对照例子去替换关键名部分，这样做是最轻松的。\r\n\r\n下面就来看一看具体的实现吧：\r\n\r\n# 样例代码\r\n\r\n\r\n## 接口部分：TestActivityContact\r\n\r\n\r\n```\r\npackage com.example.testcustomtemplates.contact;\r\n\r\npublic interface TestActivityContact {\r\n    interface Presenter<T> {\r\n        void succeed(T t);\r\n        void failed(T t);\r\n        void error(Throwable e);\r\n        void subscribe();\r\n        void unSubscribe();\r\n    }\r\n\r\n    interface View<T> {\r\n        void setPresenter(Presenter presenter);\r\n        void succeed(T t);\r\n        void failed(T t);\r\n        void error(Throwable e);\r\n    }\r\n    \r\n    interface Model {\r\n        void setPresenter(Presenter presenter);\r\n    }\r\n}\r\n```\r\n为了方便测试，这里并没有另外创建一些基类接口，可以看到上面代码中分别对应 MVP 结构中三个模块的接口，写的是最基本的需求方法，不过 MVP 也不都是完全一样的，这里你可以定义自己想写的方法。\r\n\r\n## Model层：TestActivityModel\r\n\r\n\r\n```\r\npackage com.example.testcustomtemplates.model;\r\n\r\nimport android.content.Context;\r\nimport com.example.testcustomtemplates.contact.TestActivityContact;\r\n\r\npublic class TestActivityModel implements TestActivityContact.Model {\r\n\r\n    private Context context;\r\n    private TestActivityContact.Presenter mPresenter;\r\n\r\n    public TestActivityModel(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    @Override\r\n    public void setPresenter(TestActivityContact.Presenter presenter) {\r\n        this.mPresenter = presenter;\r\n    }\r\n}\r\n```\r\nModel层主要就是做一些网络请求，存储之类的数据相关操作，不可以持有对View的引用，他是通过Presenter去和View进行交互的。\r\n\r\n## Presenter层：TestActivityPresenter\r\n\r\n\r\n```\r\npackage com.example.testcustomtemplates.presenter;\r\n\r\nimport android.content.Context;\r\nimport com.example.testcustomtemplates.contact.TestActivityContact;\r\nimport com.example.testcustomtemplates.model.TestActivityModel;\r\n\r\npublic class TestActivityPresenter<T> implements TestActivityContact.Presenter<T> {\r\n\r\n    private TestActivityContact.View mView;\r\n    private TestActivityModel mModel;\r\n    private Context context;\r\n\r\n    public TestActivityPresenter(TestActivityContact.View mView, Context context) {\r\n        this.mView = mView;\r\n        this.context = context;\r\n        mModel = new TestActivityModel(context);\r\n\r\n    }\r\n    @Override\r\n    public void succeed(T t) {\r\n\r\n    }\r\n    @Override\r\n    public void failed(T t) {\r\n\r\n    }\r\n    @Override\r\n    public void error(Throwable e) {\r\n\r\n    }\r\n    @Override\r\n    public void subscribe() {\r\n\r\n    }\r\n    @Override\r\n    public void unSubscribe() {\r\n\r\n    }\r\n}\r\n```\r\nPresenter层自然不必多说，他最好是不要持有View控件的引用，大部分的逻辑操作需要他来完成，不过不可避免的，如果业务逻辑复杂了，Presenter层也会变得臃肿，这也是MVP结构的一个短处。\r\n\r\n## View层：TestActivity\r\n\r\n```\r\npackage com.example.testcustomtemplates.activity;\r\n\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\nimport com.example.testcustomtemplates.R;\r\nimport com.example.testcustomtemplates.contact.TestActivityContact;\r\nimport com.example.testcustomtemplates.presenter.TestActivityPresenter;\r\n\r\npublic class TestActivity<T> extends AppCompatActivity implements TestActivityContact.View<T> {\r\n\r\n    private TestActivityContact.Presenter mPresenter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_test);\r\n        new TestActivityPresenter<T>(this, this);\r\n    }\r\n\r\n    @Override\r\n    public void setPresenter(TestActivityContact.Presenter presenter) {\r\n        this.mPresenter = presenter;\r\n    }\r\n\r\n    @Override\r\n    public void succeed(T t) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void failed(T t) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void error(Throwable e) {\r\n\r\n    }\r\n}\r\n\r\n```\r\nActivity或者Fragment都可以用作View层，这层主要是对一些视图控件的状态进行切换，不做复杂的逻辑操作。\r\n\r\n看完上面的这些代码后，其实就可以开始直接编写我们的模版代码了。\r\n\r\n# 模版编写\r\n\r\n首先，可以Copy一份 **EmptyActivity** 整个模版的文件，然后改一下名字，随便什么都可以，这里我将其改成 **MvpDemoActivity**\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/009.png)\r\n\r\n然后我们首先对 **template.xml** 文件进行修改，主要修改下面这个部分：\r\n\r\n\r\n```\r\n<category value=\"Activity\" />\r\n```\r\n然后是对 **recipe.xml.ftl** 文件进行修改，修改后如下：\r\n\r\n\r\n```\r\n<?xml version=\"1.0\"?>\r\n<#import \"root://activities/common/kotlin_macros.ftl\" as kt>\r\n<recipe>\r\n    <#include \"../common/recipe_manifest.xml.ftl\" />\r\n    <@kt.addAllKotlinDependencies />\r\n\r\n<#if generateLayout>\r\n    <#include \"../common/recipe_simple.xml.ftl\" />\r\n    <open file=\"${escapeXmlAttribute(resOut)}/layout/${layoutName}.xml\" />\r\n</#if>\r\n\r\n\t<!--View-activity-->\r\n    <instantiate from=\"root/src/app_package/MvpActivity.java.ftl\"\r\n                   to=\"${escapeXmlAttribute(srcOut)}/activity/${activityClass}.java\" />\r\n\t<!--Model-->\r\n\t<instantiate from=\"root/src/app_package/MvpModel.java.ftl\"\r\n                   to=\"${escapeXmlAttribute(srcOut)}/model/${activityClass}Model.java\" />\t\r\n\t<!--Contact-->\r\n\t<instantiate from=\"root/src/app_package/MvpContact.java.ftl\"\r\n                   to=\"${escapeXmlAttribute(srcOut)}/contact/${activityClass}Contact.java\" />\r\n\t<!--Presenter-->\r\n\t<instantiate from=\"root/src/app_package/MvpPresenter.java.ftl\"\r\n                   to=\"${escapeXmlAttribute(srcOut)}/presenter/${activityClass}Presenter.java\" />\t   \r\n    <open file=\"${escapeXmlAttribute(srcOut)}/activity/${activityClass}.java\" />\r\n\r\n</recipe>\r\n\r\n```\r\n\r\n上面的代码表示只编写了Java版，当然你在修改这个文件之前还是需要创建相对应的几个类的模版代码的。这里出于篇幅考虑暂时就不贴出实际的模版代码了，下面会给出github地址，编写了Java版和Kotlin版的，大家可以拿去参考\r\n\r\n[Github项目链接](https://github.com/asjqkkkk/TemplatesTest)\r\n\r\n当然，有好的模版也可以一起分享一下\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E4%B8%80%E9%94%AE%E5%88%9B%E5%BB%BAMVP%E7%BB%93%E6%9E%84/010.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","b5048e3a":"---\r\ntitle: Android事件分发流程\r\ndate: 2020-04-02 07:23:47\r\nindex_img: /img/touch_event.png\r\ntags: 源码系列\r\n---\r\n# 序\r\n\r\n这一篇，要开始准备分析Android的事件分发机制啦。\r\n\r\n而上一篇，我们刚好了解了View的绘制流程，它对于这一篇的理解也是有一点小帮助的！\r\n\r\n\r\n# 引子\r\n\r\n这次分析的入口非常好找，我们可以在自己的Activity中重写 `onTouchEvent(event)` 方法。就以这个方法作为入口。\r\n\r\n\r\n```\r\nclass MainActivity : AppCompatActivity() {\r\n    ...\r\n    override fun onTouchEvent(event: MotionEvent?): Boolean {\r\n        return super.onTouchEvent(event)\r\n    }\r\n}\r\n```\r\n\r\n# Activity\r\n\r\n## onTouchEvent(event)\r\n\r\n可以从上面重写的方法，进入到 Activity 的 `onTouchEvent(event)`\r\n\r\n```\r\npublic class Activity extends ..., Window.Callback, ... {\r\n    ...\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        if (mWindow.shouldCloseOnTouch(this, event)) {\r\n            finish();\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n`onTouchEvent(event)` 是接口 `Window.Callback` 中的方法。\r\n\r\n第一个if中调用的 `shouldCloseOnTouch(...)` 方法，当它返回 ture 时，就结束当前Activity\r\n\r\n可以看一下这个方法\r\n\r\n```\r\n    //Window\r\n    public boolean shouldCloseOnTouch(Context context, MotionEvent event) {\r\n        final boolean isOutside =\r\n                event.getAction() == MotionEvent.ACTION_DOWN && isOutOfBounds(context, event)\r\n                || event.getAction() == MotionEvent.ACTION_OUTSIDE;\r\n        if (mCloseOnTouchOutside && peekDecorView() != null && isOutside) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n```\r\n这种情况一般适用于触摸事件发生在window外，比如给Activity设置如下window属性：\r\n\r\n```\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        window.setFlags(FLAG_NOT_TOUCH_MODAL, FLAG_NOT_TOUCH_MODAL);\r\n        window.setFlags(FLAG_WATCH_OUTSIDE_TOUCH, FLAG_WATCH_OUTSIDE_TOUCH);\r\n        setContentView(R.layout.activity_main2)\r\n    }\r\n```\r\n然后设置一个窗口Theme：\r\n\r\n```\r\n        <activity android:name=\".xxxxxxActivity\" android:theme=\"@style/Theme.AppCompat.Dialog\"></activity>\r\n\r\n```\r\n\r\n就可以结合自定义的布局实现一个伪弹窗，具体效果可以参考AlertDoalog点击空白处消失。点击Activity的空白处就会触发 `MotionEvent.ACTION_OUTSIDE` 事件。不过因为 `MotionEvent.ACTION_OUTSIDE` 平时不常用，这里就不多讲了\r\n\r\n接下来我们看一下，Activity的 `onTouchEvent(event)` 是被谁调用的\r\n\r\n## dispatchTouchEvent(event)\r\n\r\n可以找到被调用的地方\r\n\r\n\r\n```\r\n    public boolean dispatchTouchEvent(MotionEvent ev) {\r\n        if (ev.getAction() == MotionEvent.ACTION_DOWN) {\r\n            onUserInteraction();\r\n        }\r\n        if (getWindow().superDispatchTouchEvent(ev)) {\r\n            return true;\r\n        }\r\n        return onTouchEvent(ev);\r\n    }\r\n```\r\n就是这个方法，用于分发操作事件\r\n\r\n其中 `onUserInteraction()` 表示用户与手机产生交互，不用详说。重点在于 `superDispatchTouchEvent(ev)` 方法。\r\n\r\n可以从上一篇文章知道，这里的 `getWindow()` 其实获取的是 `PhoneWindow` 对象，我们去看一看它的 `superDispatchTouchEvent(ev)`\r\n\r\n# PhoneWindow\r\n\r\n\r\n```\r\n    @Override\r\n    public boolean superDispatchTouchEvent(MotionEvent event) {\r\n        return mDecor.superDispatchTouchEvent(event);\r\n    }\r\n```\r\n这里进入了 `DecorView` ，继续看\r\n\r\n# DecorView\r\n\r\n\r\n```\r\n    public boolean superDispatchTouchEvent(MotionEvent event) {\r\n        return super.dispatchTouchEvent(event);\r\n    }\r\n```\r\n这里将会调用 `ViewGroup` 的 `dispatchTouchEvent(event)` 方法，到这里，我们就要开始我们常听说的事件分发流程啦！\r\n\r\n接下来会进入 `GroupView` \r\n\r\n# GroupView\r\n\r\n\r\n```\r\n    @Override\r\n    public boolean dispatchTouchEvent(MotionEvent ev) {\r\n        ...\r\n        boolean handled = false;\r\n        if (onFilterTouchEventForSecurity(ev)) {\r\n            ...\r\n            //第一部分\r\n            final boolean intercepted;\r\n            if (actionMasked == MotionEvent.ACTION_DOWN\r\n                    || mFirstTouchTarget != null) {\r\n                final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;\r\n                if (!disallowIntercept) {\r\n                    intercepted = onInterceptTouchEvent(ev);\r\n                    ...\r\n                } else {\r\n                    intercepted = false;\r\n                }\r\n            } else {\r\n                intercepted = true;\r\n            }\r\n            ...\r\n            //第二部分\r\n            final boolean canceled = resetCancelNextUpFlag(this)\r\n                    || actionMasked == MotionEvent.ACTION_CANCEL;\r\n            ...\r\n            if (!canceled && !intercepted) {\r\n                ...\r\n                if (actionMasked == MotionEvent.ACTION_DOWN\r\n                        || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)\r\n                        || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {\r\n                    ...\r\n                    final int childrenCount = mChildrenCount;\r\n                    if (newTouchTarget == null && childrenCount != 0) {\r\n                        ...\r\n                        final ArrayList<View> preorderedList = buildTouchDispatchChildList();\r\n                        ...\r\n                        final View[] children = mChildren;\r\n                        for (int i = childrenCount - 1; i >= 0; i--) {\r\n                            final int childIndex = getAndVerifyPreorderedIndex(\r\n                                    childrenCount, i, customOrder);\r\n                            final View child = getAndVerifyPreorderedView(\r\n                                    preorderedList, children, childIndex);\r\n                            ...\r\n                            if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {\r\n                                ...\r\n                                newTouchTarget = addTouchTarget(child, idBitsToAssign);\r\n                                ...\r\n                            }\r\n                            ...\r\n                        }\r\n                        ...\r\n                    }\r\n                }\r\n            }\r\n            ...\r\n            //第三部分\r\n            if (mFirstTouchTarget == null) {\r\n                ...\r\n            } else {\r\n                ...\r\n            }\r\n        }\r\n        ...\r\n        return handled;\r\n    }\r\n```\r\n上面的逻辑主要分为三个部分，我们先从第一个部分开始看起\r\n\r\n## 第一部分\r\n\r\n当前 `ViewGroup` 允许拦截事件的时候，会调用 `onInterceptTouchEvent` 来决定是否需要对事件进行拦截。如果拦截的话，`intercepted` 会设置为 `true`\r\n\r\n\r\n```\r\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\r\n        if (ev.isFromSource(InputDevice.SOURCE_MOUSE)\r\n                && ev.getAction() == MotionEvent.ACTION_DOWN\r\n                && ev.isButtonPressed(MotionEvent.BUTTON_PRIMARY)\r\n                && isOnScrollbarThumb(ev.getX(), ev.getY())) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n```\r\n这个方法可以被子类重写，多用于处理滑动冲突，这个后面再说\r\n\r\n## 第二部分\r\n\r\n当触摸事件没有取消，并且 `ViewGroup` 不拦截当前事件时。就会进入第二部分\r\n\r\n可以看到，第二部分中有一个 `preorderedList` ，我们可以看一下这个列表是干什么的\r\n\r\n\r\n```\r\n    public ArrayList<View> buildTouchDispatchChildList() {\r\n        return buildOrderedChildList();\r\n    }\r\n    ...\r\n    ArrayList<View> buildOrderedChildList() {\r\n        ...\r\n        for (int i = 0; i < childrenCount; i++) {\r\n            ...\r\n            int insertIndex = i;\r\n            while (insertIndex > 0 && mPreSortedChildren.get(insertIndex - 1).getZ() > currentZ) {\r\n                insertIndex--;\r\n            }\r\n            mPreSortedChildren.add(insertIndex, nextChild);\r\n        }\r\n        return mPreSortedChildren;\r\n    }\r\n```\r\n这里可以得知，该列表就是根据 `View` 在 **Z轴** 上的坐标，按照从高到底的顺序放入列表中。这里其实也可以得知，触摸事件是从外到里的\r\n\r\n后面的逻辑会进入到一个判断语句\r\n\r\n```\r\nif (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {\r\n    ...\r\n    newTouchTarget = addTouchTarget(child, idBitsToAssign);\r\n    alreadyDispatchedToNewTouchTarget = true;\r\n    break;\r\n}\r\n```\r\n`dispatchTransformedTouchEvent(...)` 是一个非常重要的方法\r\n\r\n在第三部分的逻辑中，主要也和它有关，我们直接来看一下它的逻辑\r\n\r\n\r\n```\r\n    private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,\r\n            View child, int desiredPointerIdBits) {\r\n        final boolean handled;\r\n        ...\r\n        if (child == null) {\r\n            handled = super.dispatchTouchEvent(transformedEvent);\r\n        } else {\r\n            final float offsetX = mScrollX - child.mLeft;\r\n            final float offsetY = mScrollY - child.mTop;\r\n            transformedEvent.offsetLocation(offsetX, offsetY);\r\n            if (! child.hasIdentityMatrix()) {\r\n                transformedEvent.transform(child.getInverseMatrix());\r\n            }\r\n\r\n            handled = child.dispatchTouchEvent(transformedEvent);\r\n        }\r\n\r\n        // Done.\r\n        transformedEvent.recycle();\r\n        return handled;\r\n    }\r\n```\r\n`dispatchTransformedTouchEvent(...)` 中有三段类似的逻辑，上面为了控制篇幅只显示了其中一段\r\n\r\n大致逻辑分为两种情况：\r\n- 当 `child` 为 **null** 时: 调用 `View` 的 `dispatchTouchEvent(event)` 方法分发事件\r\n- 当 `child` 不为 **null** 时: 调用 `child` 的 `dispatchTouchEvent(event)` 方法，如果它没有重写这个分发，会来到 `View` 的 `dispatchTouchEvent(event)` \r\n\r\n那么我们先去看一下 `View` 的 `dispatchTouchEvent(event)` 方法，再了解 `ViewGroup` 后面的逻辑吧\r\n\r\n# View\r\n\r\n来看看 `View` 的事件分发\r\n\r\n## dispatchTouchEvent(event)\r\n\r\n\r\n```\r\n    public boolean dispatchTouchEvent(MotionEvent event) {\r\n        ...\r\n\r\n        if (onFilterTouchEventForSecurity(event)) {\r\n            ...\r\n            ListenerInfo li = mListenerInfo;\r\n            if (li != null && li.mOnTouchListener != null\r\n                    && (mViewFlags & ENABLED_MASK) == ENABLED\r\n                    && li.mOnTouchListener.onTouch(this, event)) {\r\n                result = true;\r\n            }\r\n\r\n            if (!result && onTouchEvent(event)) {\r\n                result = true;\r\n            }\r\n        }\r\n        ...\r\n\r\n        return result;\r\n    }\r\n```\r\n可以看到， `mOnTouchListener`的 `onTouch(...)` 比 `onTouchEvent(event)` 的优先级要高\r\n\r\n我们接下来我们还是主要关注 `onTouchEvent(event)` 方法\r\n\r\n## onTouchEvent(event)\r\n\r\n\r\n```\r\n    public boolean onTouchEvent(MotionEvent event) {\r\n        ...\r\n        if (clickable || (viewFlags & TOOLTIP) == TOOLTIP) {\r\n            switch (action) {\r\n                case MotionEvent.ACTION_UP:\r\n                    ...\r\n                    break;\r\n                case MotionEvent.ACTION_DOWN:\r\n                    ...\r\n                    break;\r\n                case MotionEvent.ACTION_CANCEL:\r\n                    ...\r\n                    break;\r\n                case MotionEvent.ACTION_MOVE:\r\n                    ...\r\n                    break;\r\n            }\r\n            return true;      \r\n        }\r\n        return false;\r\n    }\r\n```\r\n在 `onTouchEvent(event)` 中，主要处理了四种情况，分别是 `ACTION_UP`、`ACTION_DOWN`、`ACTION_CANCEL` 以及 `ACTION_MOVE`\r\n\r\n我们来分别看一下这四种情况\r\n\r\n\r\n### ACTION_UP\r\n\r\n```\r\ncase MotionEvent.ACTION_UP:\r\n    ...\r\n    boolean prepressed = (mPrivateFlags & PFLAG_PREPRESSED) != 0;\r\n    if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {\r\n        ...\r\n        if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {\r\n            // This is a tap, so remove the longpress check\r\n            removeLongPressCallback();\r\n\r\n            // Only perform take click actions if we were in the pressed state\r\n            if (!focusTaken) {\r\n                ...\r\n                if (mPerformClick == null) {\r\n                    mPerformClick = new PerformClick();\r\n                }\r\n                if (!post(mPerformClick)) {\r\n                    performClickInternal();\r\n                }\r\n            }\r\n        }\r\n        ...\r\n    }\r\n    mIgnoreNextUpEvent = false;\r\n    break;\r\n```\r\n在 `ACTION_UP` 中，主要处理的是 `PerformClick()` ,而它最后执行的是 `performClick()` 方法\r\n\r\n\r\n```\r\n    private final class PerformClick implements Runnable {\r\n        @Override\r\n        public void run() {\r\n            performClickInternal();\r\n        }\r\n    }\r\n    ...\r\n    private boolean performClickInternal() {\r\n        ...\r\n        return performClick();\r\n    }\r\n    ...\r\n    public boolean performClick() {\r\n        ...\r\n        final boolean result;\r\n        final ListenerInfo li = mListenerInfo;\r\n        if (li != null && li.mOnClickListener != null) {\r\n            playSoundEffect(SoundEffectConstants.CLICK);\r\n            li.mOnClickListener.onClick(this);\r\n            result = true;\r\n        } else {\r\n            result = false;\r\n        }\r\n        ...\r\n        return result;\r\n    }\r\n```\r\n显然，在  `performClick()` 中，最后是执行的 `onClick(...)` 点击事件\r\n\r\n `ACTION_UP` 表示手指抬起，也就是说点击事件是在这个情况下触发的\r\n \r\n \r\n### ACTION_DOWN\r\n\r\n\r\n```\r\ncase MotionEvent.ACTION_DOWN:\r\n    ...\r\n    if (isInScrollingContainer) {\r\n        mPrivateFlags |= PFLAG_PREPRESSED;\r\n        if (mPendingCheckForTap == null) {\r\n            mPendingCheckForTap = new CheckForTap();\r\n        }\r\n        mPendingCheckForTap.x = event.getX();\r\n        mPendingCheckForTap.y = event.getY();\r\n        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());\r\n    } else {\r\n        // Not inside a scrolling container, so show the feedback right away\r\n        setPressed(true, x, y);\r\n        checkForLongClick(0, x, y);\r\n    }\r\n    break;\r\n```\r\n`ACTION_DOWN` 主要做两件事，一是判断当前 `View` 是否在滚动的布局中，如果在的话将点击事件的反馈延迟 100ms 触发；如果不是则立即对点击事件进行反馈，同时判断是否有长按事件\r\n\r\n### ACTION_CANCEL\r\n\r\n\r\n```\r\ncase MotionEvent.ACTION_CANCEL:\r\n    if (clickable) {\r\n        setPressed(false);\r\n    }\r\n    removeTapCallback();\r\n    removeLongPressCallback();\r\n    mInContextButtonPress = false;\r\n    mHasPerformedLongPress = false;\r\n    mIgnoreNextUpEvent = false;\r\n    mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\r\n    break;\r\n```\r\n`ACTION_CANCEL` 就是进行一些状态初始化的操作了\r\n\r\n### ACTION_MOVE\r\n\r\n\r\n```\r\ncase MotionEvent.ACTION_MOVE:\r\n    if (clickable) {\r\n        drawableHotspotChanged(x, y);\r\n    }\r\n\r\n    // Be lenient about moving outside of buttons\r\n    if (!pointInView(x, y, mTouchSlop)) {\r\n        // Outside button\r\n        // Remove any future long press/tap checks\r\n        removeTapCallback();\r\n        removeLongPressCallback();\r\n        if ((mPrivateFlags & PFLAG_PRESSED) != 0) {\r\n            setPressed(false);\r\n        }\r\n        mPrivateFlags3 &= ~PFLAG3_FINGER_DOWN;\r\n    }\r\n    break;\r\n```\r\n`ACTION_MOVE` 主要是用于更新触摸点在 `Drawable` 中的位置，同时判断如果触摸点在 `View` 外的话，做一些重置操作\r\n\r\n到这里，关于 `View` 中的事件分发，其实就结束了。这时候我们回到 `ViewGroup` 的第二部分逻辑\r\n\r\n# ViewGroup\r\n\r\n## 第二部分\r\n\r\n接着之前的来\r\n\r\n\r\n```\r\nif (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) {\r\n    ...\r\n    newTouchTarget = addTouchTarget(child, idBitsToAssign);\r\n    alreadyDispatchedToNewTouchTarget = true;\r\n    break;\r\n}\r\n```\r\n当 `dispatchTransformedTouchEvent(...)` 返回 true 时，表示 `child` 消费了当前事件。我们看一下 `addTouchTarget(...)` 方法\r\n\r\n### addTouchTarget(...)\r\n\r\n\r\n```\r\n    private TouchTarget addTouchTarget(@NonNull View child, int pointerIdBits) {\r\n        final TouchTarget target = TouchTarget.obtain(child, pointerIdBits);\r\n        target.next = mFirstTouchTarget;\r\n        mFirstTouchTarget = target;\r\n        return target;\r\n    }\r\n```\r\n这里的操作其实比较类似 `MessageQuene` 里复用一个 `Message` 的场景。就是将这个 **子View** 放入 `TouchTarget` 对象中，`TouchTarget` 是一个链表，同时把 `mFirstTouchTarget` 放在链表头部\r\n\r\n从这里可以看出， `TouchTarget` 是一个存放了要消耗触摸事件的 **子View** 链表\r\n\r\n到这里就可以看第三部分的逻辑了\r\n\r\n## 第三部分\r\n\r\n\r\n```\r\nif (mFirstTouchTarget == null) {\r\n    // No touch targets so treat this as an ordinary view.\r\n    handled = dispatchTransformedTouchEvent(ev, canceled, null,\r\n            TouchTarget.ALL_POINTER_IDS);\r\n} else {\r\n    // Dispatch to touch targets, excluding the new touch target if we already\r\n    // dispatched to it.  Cancel touch targets if necessary.\r\n    TouchTarget predecessor = null;\r\n    TouchTarget target = mFirstTouchTarget;\r\n    while (target != null) {\r\n        final TouchTarget next = target.next;\r\n        if (alreadyDispatchedToNewTouchTarget && target == newTouchTarget) {\r\n            handled = true;\r\n        } else {\r\n            final boolean cancelChild = resetCancelNextUpFlag(target.child)\r\n                    || intercepted;\r\n            if (dispatchTransformedTouchEvent(ev, cancelChild,\r\n                    target.child, target.pointerIdBits)) {\r\n                handled = true;\r\n            }\r\n            if (cancelChild) {\r\n                if (predecessor == null) {\r\n                    mFirstTouchTarget = next;\r\n                } else {\r\n                    predecessor.next = next;\r\n                }\r\n                target.recycle();\r\n                target = next;\r\n                continue;\r\n            }\r\n        }\r\n        predecessor = target;\r\n        target = next;\r\n    }\r\n}\r\n```\r\n当 `ViewGroup` 拦截了事件或者 `cancle` 为 **true** 时会直接跳过第二部分直接来到第三部分,而在没有经历过第二部分的时候, `mFirstTouchTarget` 的值会为 **null**\r\n\r\n\r\n\r\n`ViewGroup` 的第三部分，判断 `mFirstTouchTarget` 是否为 **null**\r\n- 如果  `mFirstTouchTarget` 为 **null** : 说明没有需要消耗事件的 **子View**， 调用 `dispatchTransformedTouchEvent(...)` 传入 `child` 为 null\r\n- 如果  `mFirstTouchTarget` 不为 **null** : 则遍历 `mFirstTouchTarget` 看看有没有消耗触摸事件的 **子View**，有的话将返回结果设为 **true**\r\n\r\n到这里，事件分发流程就分析结束啦！\r\n\r\n\r\n# 总结\r\n\r\n这次总结就用一张图片吧!\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/android_touch_event/touch_event.png)","8b2d82c3":"---\r\ntitle: Android开发者编写自己的API接口：从零开始（一）\r\ndate: 2018-08-05 21:49:47\r\nindex_img: /img/api_1.png\r\ntags: Android\r\n---\r\n\r\n## 序\r\n\r\n作为一名Android开发人员，想要实现对一些数据的操作和展示，可以通过一些提供Api接口的网站去获取，虽然Api市场上种类繁多，不过别人提供的接口未必就是自己想要的，到最后，还是得自己去实现Api接口。\r\n\r\n毕竟，最了解自己需求的人，还得是自己。\r\n\r\n## 准备\r\n\r\n很多小伙伴应该都会有着类似的需求，不过想去做的时候，常常无从下手。\r\n\r\n所以这里做了一个整合，关于如何搭建开发环境，以及所需工具的下载等。\r\n\r\n\r\n参考文章：\r\n\r\n- [Android程序员搭建一个属于自己的服务器，不再求各种公共API](https://www.jianshu.com/p/4a0d40806ea2)\r\n- [JAVA后台搭建(springboot+mybatis+mysql)项目搭建](https://www.jianshu.com/p/f91ca5814bcf)\r\n\r\n## 步骤\r\n\r\n一套开发环境下来，需要下面这些步骤：\r\n\r\n- 1：搭建开发环境，IntelliJ + spring-boot + mybatis\r\n- 2：搭建数据库，mysql + navicat\r\n- 3：搭建运行环境，tomcat + 腾讯云（或者阿里云）\r\n\r\n\r\n## 开始\r\n\r\n### 一、搭建开发环境\r\n\r\n\r\n#### 1.1 IntelliJ IDEA的安装\r\n\r\nAndroid开发者所使用的Android studio是基于这个IDEA开发的，所以两者的界面非常非常相似。\r\n\r\n而且现在比较流行的Android开发语言Kotlin也是由IntelliJ IDEA的开发公司JetBrains所开发的。\r\n\r\n##### 下载 IntelliJ IDEA\r\n\r\n首先，下载安装包——[【IntelliJ下载地址】](https://www.jetbrains.com/idea/download/#section=windows)\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001.png)\r\n\r\n##### 安装 IntelliJ IDEA\r\n\r\n下载完成后，就开始安装了\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-001.png)\r\n\r\nNext到下面的界面，可以自行选择\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-002.png)\r\n\r\n\r\n然后一直下一步，到可以运行IDEA，然后你应该会遇到需要购买的提示，破解的教程请看：\r\n\r\n[Windows7下安装与破解IntelliJ IDEA2017](https://blog.csdn.net/yangying496875002/article/details/73603303)\r\n\r\nwin10也是适用的。\r\n\r\n\r\n#### 1.2 MySQL的安装\r\n\r\n##### 下载MySQL\r\n\r\n这里使用的是mysql-5.7.17.msi，下载地址是：\r\n\r\n[MYSQL下载地址](https://downloads.mysql.com/archives/installer/)\r\n\r\n\r\n##### 安装MySQL\r\n\r\n下载完成后进行安装：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-006.png)\r\n\r\n这里只选择了Server\r\n\r\n然后一直下一步\r\n\r\n到了设置密码这里，我设置的密码是【oldchen】,后面项目配置的密码也是这个，这里你可以随便设置自己的密码，不过后面配置的时候要保证密码输入一致就是：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-007.png)\r\n\r\n\r\n然后一直下一步，直到安装成功，接下来就是如何去操作数据库。\r\n\r\n\r\n#### 1.3 Navicat的安装\r\n\r\nNavicat用来对数据库进行操作，也是需要付费购买的，破解地址：\r\n[Navicat for MySQL 安装和破解（完美）](https://blog.csdn.net/wypersist/article/details/79834490)\r\n\r\n\r\n可以使用之后，来到如下界面：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-008.png)\r\n\r\n然后创建MYSQL连接：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-009.png)\r\n\r\n输入相关信息：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-010.png)\r\n\r\n然后就可以看到创建的连接了，右键→新建数据库：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-011.png)\r\n\r\n\r\n新建的数据库名字设置为oldchen,接下来双击这个数据库，新建一个user表,表中包含account,password,username以及自增主键id，具体操作如图所示：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/gif/001.gif)\r\n\r\n\r\n创建这个表后，我们可以添加一条数据：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-012.png)\r\n\r\n\r\n然后，开始配置IntelliJ IDEA\r\n\r\n#### 1.4 IntelliJ IDEA的配置\r\n\r\n\r\n##### 搭建SpringBoot项目\r\n\r\n打开IntelliJ，左上角 File → New → Project，创建新项目：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-013.png)\r\n\r\n\r\n然后\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-004.png)\r\n\r\n\r\n接下来是选择依赖的界面，选中图中的全部依赖\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-005.png)\r\n\r\n下一步\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-019.png)\r\n\r\n\r\n开始项目构建，需要等待一定的时间，构建完成后的项目结构是这样的：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-015.png)\r\n\r\n\r\n结合之前新建的数据库，在resources目录下的application.properties中进行配置：\r\n\r\n\r\n```\r\n#oldchen为创建的数据库名字\r\nspring.datasource.url =jdbc:mysql://localhost:3306/oldchen\r\nmybatis.type-aliases-package = com.example.demo\r\n# 数据库用户名\r\nspring.datasource.username = root\r\n# 数据库密码\r\nspring.datasource.password = oldchen\r\n\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\n#端口号\r\nspring.session.store-type=none\r\nspring.http.encoding.charset=UTF-8\r\n```\r\n\r\n接下来就开始写接口啦\r\n\r\n\r\n#### 1.5 接口的编写\r\n\r\n\r\n由于我们之前在操作名为【oldchen】的数据库时，还新建了一个【user】表，所以这里先创建一个User类：\r\n\r\n\r\n```\r\npublic class User {\r\n    private Integer id;\r\n    private String account;\r\n    private String password;\r\n    private String userName;\r\n\r\n    public Integer getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Integer id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getAccount() {\r\n        return account;\r\n    }\r\n\r\n    public void setAccount(String account) {\r\n        this.account = account;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public String getUserName() {\r\n        return userName;\r\n    }\r\n\r\n    public void setUserName(String userName) {\r\n        this.userName = userName;\r\n    }\r\n}\r\n```\r\n\r\n\r\n然后创建UserMapper，用于查询（根据字段account查询）\r\n\r\n\r\n```\r\n@Mapper\r\npublic interface UserMapper {\r\n\r\n    @Select(\"select * from user where account = #{account}\")\r\n    User findByAccount(String account);\r\n\r\n}\r\n```\r\n\r\n\r\n接着创建UserController，用于对数据的处理：\r\n\r\n\r\n```\r\n@RestController\r\n@RequestMapping({\"/user\"})\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserMapper userMapper;\r\n\r\n    @RequestMapping(value=\"/user\")\r\n    @ResponseBody\r\n    public String getUserInfoByName(String account) {\r\n        User user = userMapper.findByAccount(account);\r\n        if (user == null){\r\n            return \"用户名保不存在\";\r\n        } else {\r\n            return \"用户名存在——\" + user.getUserName();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n最后项目结构如下：\r\n\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-016.png)\r\n\r\n\r\n### 二、测试接口\r\n\r\n首先，运行项目\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-017.png)\r\n\r\n\r\n当项目正常运行后，测试下面的地址：\r\n\r\nhttp://localhost:8080/user/user?account=oldchen\r\n\r\n结果：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/001-018.png)\r\n\r\n测试成功啦！\r\n\r\n\r\n## 后续\r\n\r\n\r\n关于Api接口的学习，先到这里。\r\n\r\n后面还会写关于如何将项目放在TomCat上，最后放在云服务器上，通过外网地址访问接口\r\n\r\n那么，未完待续...\r\n\r\n\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%A1%A8%E6%83%85%E5%8C%85/%E5%91%8A%E8%BE%9E.jpg)\r\n\r\n\r\n\r\n\r\n","182f833d":"---\r\ntitle: Android开发者编写自己的API接口：从零开始（二）\r\ndate: 2018-08-14 21:49:47\r\nindex_img: /img/api_2.png\r\ntags: Android\r\n---\r\n\r\n## 前言\r\n\r\n\r\n\r\n在上一篇[Android开发者编写自己的API接口（上）](https://oldchen.top/2018/08/05/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%B8%80%EF%BC%89/)中，已经介绍了如何搭建一个基本的开发环境，以及接口的编写，最后是能够成功运行的。\r\n\r\n这一篇将更进一步，主要解决下面两个问题：\r\n\r\n- ①：如何让后台项目运行在TomCat上\r\n- ②：如何在云服务器上部署自己的项目\r\n    \r\n## Start\r\n\r\n#### 一、本地Tomcat的使用\r\n\r\n##### 1.1、安装Tomcat\r\n使用TomCat，自然是要TomCat的安装包咯\r\n\r\n[安装包下载地址](https://tomcat.apache.org/download-90.cgi)\r\n\r\n![image](\r\nhttps://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/001.png)\r\n\r\n由于我们本地应该都是已经安装配置过JDK了的，所以安装Tomcat的时候一路Next就行了\r\n\r\n\r\n##### 1.2、配置Gradle\r\n首先，在项目的gradle所在的目录下创建gradle.properties，然后在里面添加：\r\n```\r\n# true就去打包War，否则不打包\r\nBUILD_WAR=true\r\n```\r\n![image](\r\nhttps://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/002.png)\r\n\r\n接着在build.gradle中添加：\r\n\r\n\r\n```\r\nif (BUILD_WAR.toBoolean()) {\r\n    apply plugin: 'war'\r\n}\r\n\r\ndependencies {\r\n    ...\r\n    if (BUILD_WAR.toBoolean()) {\r\n        providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')\r\n    }\r\n}\r\n```\r\n![image](\r\nhttps://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/003.png)\r\n\r\n同时，不要忘了创建一个ServletInitializer类，用于SpringBoot的初始化\r\n\r\n```\r\npublic class ServletInitializer extends SpringBootServletInitializer {\r\n\r\n\t@Override\r\n\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\r\n\t\treturn application.sources(TestForDemoApplication.class);\r\n\t}\r\n\r\n}\r\n```\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/008.png)\r\n\r\n\r\n这些都完成后，在Terminal控制台输入：\r\n\r\n```\r\ngradlew assemble\r\n```\r\n\r\n等待结果，然后就可以看到一个war包了\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/004.png)\r\n\r\n##### 1.3、配置Tomcat\r\n\r\n找到demo-0.0.1-SNAPSHOT.war所在目录，然后将其更名为oldchen.war\r\n\r\n    注意，这里修改后的名字将会与部署到Tomcat上的网络请求地址有关哦\r\n\r\n![image](\r\nhttps://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/005.png)\r\n\r\n然后找到Tomcat的安装目录下的webapps目录，将里面的其他文件和文件夹删除，把oldchen.war复制到该目录\r\n\r\n接下来，在Tomcat目录下的bin目录中运行Tomcat9w.exe\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/006.png)\r\n\r\n然后你会发现，webapps目录下多了一个文件\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/007.png)\r\n\r\n\r\n##### 1.4、测试本地Tomcat\r\n\r\n接下来，访问地址：\r\n\r\nhttp://localhost:8080/oldchen/user/user?account=oldchen\r\n\r\n结果：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/009.png)\r\n\r\n可以看到，本地的Tomcat已经部署成功，接下来就是云服务器上部署Tomcat了。\r\n\r\n\r\n#### 二、云服务器上Tomcat的部署\r\n\r\n##### 2.1、购买云服务器\r\n\r\n想在云服务器上部署Tomcat，首先需要购买一个服务器，我买的是腾讯云的服务器，初次接触的同学建议去使用试用的云服务器，等操作成功后再买也不迟\r\n\r\n\r\n出于对初学者的人文关怀（没错，Is me），这里我使用的是Windows版的服务器：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/010.png)\r\n\r\n\r\n为了能够正常访问服务器的地址，需要给服务器配置一下安全组，安全组中需要添加这样一项规则：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/011.png)\r\n\r\n然后，使用远程连接，连接到云服务器，具体操作是：\r\n    \r\n    一、win+R\r\n    二、输入mstsc\r\n    三、输入云服务器的Ip地址，用户名以及密码，连接\r\n\r\n如果你使用的是windows2016版的服务器，同时遇到了\"身份验证错误，要求的函数不支持\"，而且你恰好是win10家庭版，那么下面有解决办法：\r\n[windows10家庭版 远程桌面报错](https://jingyan.baidu.com/album/67508eb47ae5499ccb1ce410.html?picindex=3)\r\n\r\n\r\n成功登录后，整个界面只有一个孤伶伶的回收站，到了这步，就准备开始配置吧。\r\n\r\n\r\n##### 2.2、配置云服务器\r\n\r\n云服务器上面运行项目只需要Tomcat+Mysql+Navicat+JDK，配置方法和之前在本地配置是一样的，不过这里不建议使用上传的方法，因为上传实际上和下载是一样的，有时候还会受限于你自己宽带的上行速度。\r\n\r\n\r\n\r\n重新下载安装JDK是很头疼的，下面是详细教程：\r\n\r\n[非常详细图文JDK和Tomcat安装和配置的图文教程](https://blog.csdn.net/qq_32519693/article/details/71330930)\r\n\r\n\r\n全部需要准备的文件如下：\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/012.png)\r\n\r\n其中，**PatchNavicat** 用于Navicat的破解，在上一篇的链接中已经说明。\r\n\r\n而**oldchen.sql**则是通过本地Navicat生成Mysql文件，具体操作是：右键你选中的数据库，选择【转储SQL文件】→【结构和数据】，然后就可以生成了。使用方法就是在云服务器上创建一个数据库后选择【运行SQL文件】即可。\r\n\r\n这样，本地数据库的迁移就完成了。剩下的操作与之前介绍的基本一致，不过有一点需要注意，为了开启外网连接，需要在Tomcat安装目录下找到conf目录，修改其中的server.xml文件：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/013.png)\r\n\r\n将port由8080修改为80\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/014.png)\r\n\r\n\r\n当你完成全部的操作后，就可以测试接口了。\r\n\r\n##### 2.3、测试云服务器接口\r\n\r\n\r\n只要你的步骤是ok的，那么云服务器不会有什么问题。\r\n\r\n由于在写这篇文章期间，我又多写了个登录接口，所以这里的测试例子用的是新的接口，仅供参考：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Android%E5%BC%80%E5%8F%91%E8%80%85%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84API%E6%8E%A5%E5%8F%A3%EF%BC%9A%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%88%E4%BA%8C%EF%BC%89/015.png)\r\n\r\n\r\n请求地址是：http://111.230.251.115/oldchen/user/login\r\n\r\n\r\n\r\n## 后语\r\n\r\n那么，编写接口的学习就到此为止了。\r\n\r\n虽然有待完善的地方还不少，比如通过数据库指令对数据库进行增删改查、数据库之间相互关联等等，许多知识都需要慢慢学的。\r\n\r\n此文章权当入门之径，剩下的还得靠大家自己多多钻研啦，毕竟作者本人需要学的地方也太多了，如有错误之处，还望指出，互相学习，岂不乐哉。\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E8%A1%A8%E6%83%85%E5%8C%85/%E5%91%8A%E8%BE%9E2.jpg)\r\n\r\n\r\n\r\n\r\n\r\n","fb85ef3a":"---\r\ntitle: Bugly热修复使用及多渠道打包\r\ndate: 2018-09-26 21:49:47\r\nindex_img: /img/bugly.png\r\ntags: Android\r\n---\r\n\r\n## <font color=\"#7FFF00\">头\r\n\r\n不知道你是否遇到过这个情况，项目上线后或者开始给别人使用的时候，冷不丁的冒出个Bug，这时候首先要干嘛？\r\n\r\n**先看崩溃日志啊**\r\n\r\n看完崩溃日志你知道了造成崩溃的原因，然后干嘛？\r\n\r\n**开始甩锅啊**\r\n\r\n当查明了是谁造成的这个崩溃后，你发现不是你的问题，于是你心中一乐，长舒一口气，仰天大笑：码海沉浮又几载，我辈岂是蓬蒿人；笑完便准备躺床上睡觉去——秋豆麻袋，是不是忘了什么东西？\r\n\r\n是的，即使你发现了问题，并且找到了问题的来源，这时候还差一步：解决问题的办法！如何解决？\r\n\r\n**发布新版本？**\r\n\r\n这样不觉得很麻烦吗？特别是如果一个项目处于初期阶段，Bug是想甩都甩不掉的，如果每发现一次崩溃，都需要靠发布一个新版本去解决的话，那未免就太麻烦了。不光是开发者麻烦，使用者也会因为频繁的升级而不耐烦（just like me），那问题又回来了，如何解决？\r\n\r\n**热修复啊**\r\n\r\n通过线上修复Bug，让用户在神不知鬼不觉的情况下就进行了一次应用更新，麻麻再也不用担心App崩溃啦！（不存在的）\r\n\r\n热修复还有个隐藏的好处，那就是在测试人员不够（开发兼测试），测试机型不够的情况下可以显著改善App的崩溃率。好吧，准备开始使用吧。\r\n\r\n## <font color=\"#000066\">身\r\n\r\n### 一、为什么要用Bugly\r\n\r\n市面上关于热修复和崩溃日志监测的相关技术和SDK种类各不相同，为什么偏偏要用Bugly呢？\r\n\r\n- 可以获取到App崩溃日志\r\n- 可以集成Think热修复\r\n- 界面好看，方便管理版本\r\n- 免费\r\n- （凑巧就用了这一款，其他的都没有用过）\r\n\r\n基于以上原因，最后就使用了Bugly去解决上面提到过的问题；\r\n\r\n### 二、Bugly热更新接入流程\r\n\r\n其实关于Bugly热更新的详细接入流程，官方的文档介绍的非常详细，对新手比较友好，我第一次使用也是直接参照的文档，下面是官方文档的地址：\r\n\r\n[【Bugly Android热更新使用指南】](https://bugly.qq.com/docs/user-guide/instruction-manual-android-hotfix/?v=20180709165613)\r\n\r\n虽然官方有例子，这里还是写了一个简化版，也方便以后哪天自己忘记了依旧能快速使用：\r\n\r\n#### 第一步：添加依赖插件\r\n\r\n在你的项目更目录下的“build.gradle”中添加：\r\n\r\n```\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        // tinkersupport插件, 其中lastest.release指拉取最新版本，也可以指定明确版本号，例如1.0.4\r\n        classpath \"com.tencent.bugly:tinker-support:1.1.2\"\r\n    }\r\n}\r\n```\r\n在写这篇文章的时候，最新的版本就是1.1.2\r\n\r\n#### 第二步：配置依赖插件\r\n\r\n##### gradle配置\r\n\r\n在app module的“build.gradle”文件中添加（示例配置）：\r\n\r\n\r\n```\r\n...\r\n// 依赖插件脚本\r\napply from: 'tinker-support.gradle'\r\n\r\nandroid {\r\n        defaultConfig {\r\n          ndk {\r\n            //设置支持的SO库架构\r\n            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'\r\n          }\r\n        }\r\n      }\r\n      dependencies {\r\n         implementation 'com.android.support:multidex:1.0.1'\r\n        // 多dex配置\r\n        //注释掉原有bugly的仓库\r\n        //compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.3.4\r\n        implementation 'com.tencent.bugly:crashreport_upgrade:1.3.5'\r\n        // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）\r\n        implementation 'com.tencent.tinker:tinker-android-lib:1.9.6'\r\n        implementation 'com.tencent.bugly:nativecrashreport:latest.release'\r\n        //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0\r\n      }\r\n```\r\n在这个版本的SDK里面，已经集成了崩溃日志上传的功能哦！\r\n\r\n##### tinker-support.gradle的配置\r\n\r\n接下来，你要在app module目录下创建另外一个gradle文件，命名为“tinker-support.gradle”，然后对它进行配置：\r\n\r\n```\r\napply plugin: 'com.tencent.bugly.tinker-support'\r\n\r\ndef bakPath = file(\"${buildDir}/bakApk/\")\r\n\r\n/**\r\n * 此处填写每次构建生成的基准包目录\r\n */\r\ndef baseApkDir = \"app-0921-14-52-06\"\r\n\r\n/**\r\n * 对于插件各参数的详细解析请参考\r\n */\r\ntinkerSupport {\r\n\r\n    // 开启tinker-support插件，默认值true\r\n    enable = true\r\n\r\n    // 指定归档目录，默认值当前module的子目录tinker\r\n    autoBackupApkDir = \"${bakPath}\"\r\n\r\n    // 是否启用覆盖tinkerPatch配置功能，默认值false\r\n    // 开启后tinkerPatch配置不生效，即无需添加tinkerPatch\r\n    overrideTinkerPatchConfiguration = true\r\n\r\n    // 编译补丁包时，必需指定基线版本的apk，默认值为空\r\n    // 如果为空，则表示不是进行补丁包的编译\r\n    // @{link tinkerPatch.oldApk }\r\n    baseApk = \"${bakPath}/${baseApkDir}/app-release.apk\"\r\n\r\n    // 对应tinker插件applyMapping\r\n    baseApkProguardMapping = \"${bakPath}/${baseApkDir}/app-release-mapping.txt\"\r\n\r\n    // 对应tinker插件applyResourceMapping\r\n    baseApkResourceMapping = \"${bakPath}/${baseApkDir}/app-release-R.txt\"\r\n\r\n    // 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性\r\n    tinkerId = \"1.0.1-patch\"                //tinkerId = \"1.0.1-patch\"            tinkerId = \"1.0.1-base\"\r\n\r\n    // 构建多渠道补丁时使用\r\n    // buildAllFlavorsDir = \"${bakPath}/${baseApkDir}\"\r\n\r\n    // 是否启用加固模式，默认为false.(tinker-spport 1.0.7起支持）\r\n    // isProtectedApp = true\r\n\r\n    // 是否开启反射Application模式\r\n    enableProxyApplication = false\r\n\r\n    // 是否支持新增非export的Activity（注意：设置为true才能修改AndroidManifest文件）\r\n    supportHotplugComponent = true\r\n\r\n}\r\n\r\n/**\r\n * 一般来说,我们无需对下面的参数做任何的修改\r\n * 对于各参数的详细介绍请参考:\r\n * https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97\r\n */\r\ntinkerPatch {\r\n    //oldApk =\"${bakPath}/${appName}/app-release.apk\"\r\n    ignoreWarning = false\r\n    useSign = true\r\n    dex {\r\n        dexMode = \"jar\"\r\n        pattern = [\"classes*.dex\"]\r\n        loader = []\r\n    }\r\n    lib {\r\n        pattern = [\"lib/*/*.so\"]\r\n    }\r\n\r\n    res {\r\n        pattern = [\"res/*\", \"r/*\", \"assets/*\", \"resources.arsc\", \"AndroidManifest.xml\"]\r\n        ignoreChange = []\r\n        largeModSize = 100\r\n    }\r\n\r\n    packageConfig {\r\n    }\r\n    sevenZip {\r\n        zipArtifact = \"com.tencent.mm:SevenZip:1.1.10\"\r\n//        path = \"/usr/local/bin/7za\"\r\n    }\r\n    buildConfig {\r\n        keepDexApply = false\r\n        //tinkerId = \"1.0.1-base\"\r\n        //applyMapping = \"${bakPath}/${appName}/app-release-mapping.txt\" //  可选，设置mapping文件，建议保持旧apk的proguard混淆方式\r\n        //applyResourceMapping = \"${bakPath}/${appName}/app-release-R.txt\" // 可选，设置R.txt文件，通过旧apk文件保持ResId的分配\r\n    }\r\n}\r\n\r\n```\r\n这里面的配置比较多，一开始看还是有点儿眼花缭乱的，所以得慢慢来；\r\n\r\n这里对其中的几点进行说明：\r\n\r\n - *baseApkDir* ： 这里填写每次构建生成的基准包目录，每次打包的时候，都会有新的目录和新的基准包生成，但是只有你打算发布的那一个的目录才是有效的。\r\n - *tinkerId* ： 构建基准包和补丁包都要指定不同的tinkerId，并且必须保证唯一性。比如你的第一个基准包打包的时候可以把这个id设置为“1.0.0-base”，当你想打包热修复补丁包的时候，需要把这个id换成1.0.0-patch。\r\n\r\n\r\n更详细的配置项参考：[tinker-support配置说明](https://bugly.qq.com/docs/utility-tools/plugin-gradle-hotfix/)\r\n\r\n#### 第三步：初始化SDK\r\n\r\n\r\n上面的“tinker-support.gradle”中的enableProxyApplication属性设置的是false，是Tinker推荐的接入方式。\r\n\r\n##### 自定义Application，当enableProxyApplication为false的情况\r\n\r\n```\r\npublic class SampleApplication extends TinkerApplication {\r\n    public SampleApplication() {\r\n        super(ShareConstants.TINKER_ENABLE_ALL, \"xxx.xxx.SampleApplicationLike\",\r\n                \"com.tencent.tinker.loader.TinkerLoader\", false);\r\n    }\r\n}\r\n```\r\n**SampleApplicationLike**需要是自定义的继承**DefaultApplicationLike**的类，不要忘了在**AndroidManifest.xml**中声名上面的这个Application哦。\r\n\r\n\r\n```\r\npublic class SampleApplicationLike extends DefaultApplicationLike {\r\n\r\n\r\n    public static final String TAG = \"Tinker.SampleApplicationLike\";\r\n\r\n    public SampleApplicationLike(Application application, int tinkerFlags,\r\n                                 boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime,\r\n                                 long applicationStartMillisTime, Intent tinkerResultIntent) {\r\n        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        // 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId\r\n        // 调试时，将第三个参数改为true\r\n        Bugly.init(getApplication(), \"900029763\", false);\r\n    }\r\n\r\n\r\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\r\n    @Override\r\n    public void onBaseContextAttached(Context base) {\r\n        super.onBaseContextAttached(base);\r\n        // you must install multiDex whatever tinker is installed!\r\n        MultiDex.install(base);\r\n\r\n        // 安装tinker\r\n        // TinkerManager.installTinker(this); 替换成下面Bugly提供的方法\r\n        Beta.installTinker(this);\r\n    }\r\n\r\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\r\n    public void registerActivityLifecycleCallback(Application.ActivityLifecycleCallbacks callbacks) {\r\n        getApplication().registerActivityLifecycleCallbacks(callbacks);\r\n    }\r\n}\r\n```\r\n\r\n上面需要注意的是在“onCreate()”方法中进行初始化的时候，填入的appId是你在Bugly创建的项目的Appid，其他地方基本上不用改了\r\n\r\n\r\n##### 自定义Application，当enableProxyApplication为true的情况\r\n\r\n这种的接入方式要简单许多，无须你改造Application\r\n\r\n```\r\npublic class MyApplication extends Application {\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        // 这里实现SDK初始化，appId替换成你的在Bugly平台申请的appId\r\n        // 调试时，将第三个参数改为true\r\n        Bugly.init(this, \"900029763\", false);\r\n    }\r\n\r\n    @Override\r\n    protected void attachBaseContext(Context base) {\r\n        super.attachBaseContext(base);\r\n        // you must install multiDex whatever tinker is installed!\r\n        MultiDex.install(base);\r\n\r\n\r\n        // 安装tinker\r\n        Beta.installTinker();\r\n    }\r\n\r\n}\r\n```\r\n\r\n#### 第四步：AndroidManifest.xml配置\r\n\r\n##### 1.权限配置：\r\n\r\n```\r\n<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\r\n<uses-permission android:name=\"android.permission.READ_LOGS\" />\r\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n```\r\n##### 2.Activity配置：\r\n\r\n```\r\n<activity\r\n    android:name=\"com.tencent.bugly.beta.ui.BetaActivity\"\r\n    android:configChanges=\"keyboardHidden|orientation|screenSize|locale\"\r\n    android:theme=\"@android:style/Theme.Translucent\" />\r\n```\r\n##### 3.配置FileProvider\r\n\r\n    注意：如果您想兼容Android N或者以上的设备，必须要在AndroidManifest.xml文件中配置FileProvider来访问共享路径的文件。\r\n\r\n\r\n```\r\n        <!--热更新需要的Provider-->\r\n        <provider\r\n            android:name=\"android.support.v4.content.FileProvider\"\r\n            android:authorities=\"${applicationId}.fileProvider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/provider_paths\"/>\r\n        </provider>\r\n```\r\n在res目录新建xml文件夹，创建provider_paths.xml文件如下：\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<paths xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <!-- /storage/emulated/0/Download/${applicationId}/.beta/apk-->\r\n    <external-path name=\"beta_external_path\" path=\"Download/\"/>\r\n    <!--/storage/emulated/0/Android/data/${applicationId}/files/apk/-->\r\n    <external-path name=\"beta_external_files_path\" path=\"Android/data/\"/>\r\n</paths>\r\n```\r\n#### 第五步：混淆配置\r\n\r\n为了避免混淆SDK，在Proguard混淆文件中增加以下配置：\r\n```\r\n-dontwarn com.tencent.bugly.**\r\n-keep public class com.tencent.bugly.**{*;}\r\n# tinker混淆规则\r\n-dontwarn com.tencent.tinker.**\r\n-keep class com.tencent.tinker.** { *; }\r\n```\r\n\r\n### 三、打包\r\n\r\n当上面的环境配置都没有问题之后，就可以进行打包了。\r\n\r\n打包之前，你还得配置一下编译正式版apk所需要的**keystore.jks**文件，这个文件怎么创建的就不介绍了，这里主要介绍一下如何配置：\r\n\r\n在app moudle目录下的“build.gradle”中配置：\r\n\r\n```\r\nandroid {\r\n    signingConfigs {\r\n        release {\r\n            keyAlias 'xxxxxxxx'\r\n            keyPassword 'xxxxxxxx'\r\n            storeFile file('../keystore.jks')\r\n            storePassword 'xxxxxxxx'\r\n        }\r\n    }\r\n    ...\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled true\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n            signingConfig signingConfigs.release\r\n        }\r\n    }\r\n}\r\n```\r\n其中的各项参数就不必做说明了\r\n\r\n\r\n\r\n然后就是打包过程![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Bugly%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/bugly-001.png)\r\n\r\n**打包过程中需要注意之前提到过的tinkerId的配置，以及目录的配置，很重要哦！**\r\n\r\n生成的基准包会在这个目录\r\n\r\n![image](https://bugly.qq.com/docs/img/hotfix/android/Snip20170209_2.png?v=20180709165613)\r\n\r\n生成的补丁包会在这个目录\r\n\r\n![image](https://bugly.qq.com/docs/img/hotfix/android/1479216059696.png?v=20180709165613)\r\n\r\n然后就准备开始使用吧\r\n\r\n### 四、使用\r\n\r\n找到你创建的产品，然后进入到下面的界面\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Bugly%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/bugly-002.png)\r\n\r\n接着，发布新补丁吧，看一看效果\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Bugly%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/bugly-003.png)\r\n\r\n具体的效果可以自行尝试一下，不过有时候你会遇到上传不成功的情况，一般下发后要过5到10分钟才会生效（可能是我的网络问题），如果太久没效果，应该是哪里出问题了\r\n\r\n## <font color=\"#660066\">尾\r\n\r\n前面的所有操作都尝试过后，接下来你可能就会面临新的需求了。比如说，多渠道打包的实现，比较旧的办法是通过productFlavors去实现分别打包，不过这样会有一个弊端，即有多少渠道打包流程就执行多少次，这样效率显然是不够的；\r\n\r\n于是乎，新的打包方案出来了：\r\n\r\n### 使用Walle进行多渠道打包\r\n\r\n下面是Walle的github地址：\r\n\r\n[Walle（瓦力）：Android Signature V2 Scheme签名下的新一代渠道包打包神器](https://github.com/Meituan-Dianping/walle)\r\n\r\n它的接入文档写的也十分友好，接下来实际操作一遍：\r\n\r\n\r\n#### Walle的Gradle接入\r\n\r\n在项目根目录的 **build.gradle** 中添加依赖：\r\n\r\n```\r\nbuildscript {\r\n    dependencies {\r\n        classpath 'com.meituan.android.walle:plugin:1.1.6'\r\n    }\r\n}\r\n```\r\n然后在app module中的 **build.gradle** 添加：\r\n\r\n```\r\napply plugin: 'walle'\r\n\r\ndependencies {\r\n    compile 'com.meituan.android.walle:library:1.1.6'\r\n}\r\n```\r\n并进行插件配置\r\n\r\n```\r\nwalle {\r\n    // 指定渠道包的输出路径\r\n    apkOutputFolder = new File(\"${project.buildDir}/outputs/channels\");\r\n    // 定制渠道包的APK的文件名称\r\n    apkFileNameFormat = '${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';\r\n    // 渠道配置文件\r\n    channelFile = new File(\"${project.getProjectDir()}/channel\")\r\n}\r\n```\r\n接着在app module目录下创建一个文件，和上面配置中要保持一致，就叫 **channel**\r\n```\r\n360\r\nyingyongbao\r\nbaidu\r\nwandoujia\r\nxiaomi\r\noppo\r\nlenovo\r\nhuawei\r\ndefault_channel\r\n# 打包命令 gradlew clean assembleReleaseChannels  或者 gradlew assembleReleaseChannels\r\n```\r\n最后，在你的Application中的**onCreate**方法里添加：\r\n\r\n```\r\n        String channel = WalleChannelReader.getChannel(getApplication());\r\n        Bugly.setAppChannel(getApplication(), channel);\r\n```\r\n如果你实现的是**SampleApplicationLike**，也是在它的**onCreate**方法里添加即可。\r\n\r\n接下来通过运行上面的打包命令或者通过图中的手动操作，都是可以打包的\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Bugly%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/bugly-004.png)\r\n\r\n\r\n## <font color=\"#dddd00\">末\r\n\r\n至此，基本上整个配置流程就到此结束!!!\r\n\r\n不过有一个问题我一直不知道如何解决，就是打包基准包的命名，在 **tinker-support.gradle** 进行配置是不起效果的，试了好久都没效果，看来还得交给其他小伙伴们解决了\r\n\r\n\r\n\r\n*那么*\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Bugly%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/zaihui.png)\r\n","82f1c7c0":"---\r\ntitle: Daily English Dictation\r\ndate: 2020-07-18 09:12:58\r\nindex_img: /img/daily_dictation.jpg\r\ntags: Learning English\r\n---\r\n## 1.AP News\r\n\r\nMother Teresa, who received a Nobel Peace Prize for her work on behalf of the poor, dies in Calcutta, India —— she was 87 years old\r\n\r\n- on behalf of : can be replaced by `for`\r\n\r\n<youtube id=\"achfLFf7dUo\">\r\n\r\n## 2.Seinfeld: Season Three: Parking Garages\r\n\r\nJerry, what time do you have?\r\n\r\nI have five o'clock\r\n\r\n- 7Hs : he、him、his、her、have、has、had。 (when we speak quickly, we can't hear the `H` sound)\r\n\r\n<youtube id=\"5tvg7_jaSV8\">\r\n\r\n\r\n## 3.A Boy Named Charlie Brown\r\n\r\nThere are 3 things I have learned\r\n\r\nNever to discuss with people; religion, politics, and the Great Pumpkin\r\n\r\n- to: always be read as `[tə]`\r\n\r\n<youtube id=\"bXZ3TbWzgZI\">\r\n\r\n\r\n## 4.The Pursuit of Happines\r\n\r\nDon't ever let somebody tell you, you can't do something\r\n\r\n- strong sounds: `S` `N` `L`\r\n- weak sounds: `d` `t` `th`\r\n- many times when weak sounds is next to strong sounds, the weak sounds will be cancel\r\n\r\n<youtube id=\"UueMWH2y-7s\">\r\n\r\n## 5.They Live\r\n\r\nI have come here to chew bubblegum and kick ass, and I'm all out of bubblegum\r\n\r\n- I'm: always say `[ahm]`\r\n- out of: always say `[outta]`\r\n\r\n<youtube id=\"Fp11y7wUh2k\">\r\n\r\n## 6.Seinfeld\r\n\r\nThe secret of life is just to live every moment!\r\n\r\n- just: usually say `[juss]`\r\n\r\n<youtube id=\"1VkNDEsUu7s\">\r\n\r\n\r\n## 7. AP News\r\n\r\nAnother rogue trader has cost a bank billions\r\n\r\n- Anothe**r r**ogue: when we have two sounds next to each other, usually we leave the second sound\r\n\r\n<youtube id=\"gqNOHRNYQgE\">\r\n\r\n## 8.AP News\r\n\r\nGerman, Rolf Buchholz, is the man with the most piercings\r\n\r\n\r\n<youtube id=\"TGOqjrJp30w\">\r\n\r\n\r\n## 9.AP News\r\n\r\nA satellite that was carried to the space aboard the shuttle, Discovery 20 years ago, is about to fall to earth, but nobody konws where the debries will hit\r\n\r\n- satellite that: => sattelli~~te~~ **th**at\r\n- carried to: => carri~~ed~~ `[t]`\r\n- aboard the: => aboar~~d~~ **th**e\r\n- 20 years: => twen~~t~~y years\r\n- is about to: same as *almost ready to*\r\n- fall to earth: **[fall to]** always read as -> `[fall d]`, but if there is vowel next to **[to]**, the **[to]** will be read as `[to]`\r\n\r\n<youtube id=\"q-9NCR5MW3U\">\r\n\r\n\r\n## 10.The \"response\" to my dreams\r\n\r\n\r\nIt's a lofty, probably impossible goal!\r\n\r\n<youtube id=\"5EUr_XG6Pus\">\r\n\r\n## 11.Baseball\r\n\r\nNew York swept the Tampa Bay Rays by identical 4-2 scores in a day-night double-header Wednesday\r\n\r\n- swept the: swep~~t~~ **th**e\r\n- identical: when we say it fastly, it will be **iden~~t~~ical**\r\n- double-header: means two games in one day\r\n\r\n<youtube id=\"a51wt4oxcIo\">\r\n\r\n\r\n## 12.Muppets\r\n\r\nJim Henson, creater of the Muppets,from Kermit the Frog to Sesame Street,\r\nis born in Greenville, Mississippi.\r\n\r\n- Kermit the Frog: <img src=\"https://bkimg.cdn.bcebos.com/pic/3801213fb80e7bece9de89a02c2eb9389b506b6f?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg\" width = 100>\r\n- Sesame Street: <img src=\"https://bkimg.cdn.bcebos.com/pic/faf2b2119313b07e0061f41b07d7912396dd8cc1?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg\" width = 100>\r\n\r\n\r\n<youtube id=\"tFzW7ajgDXA\">\r\n\r\n\r\n## 13.Mosquitoes\r\n\r\nAsian tiger mosquitoes are native to the tropics of Southeast Asia, but in the past few years they've spread all across the southeastern United States\r\n\r\n- native to: example -> I'm native to China -> I'm Chinese\r\n- but in the: read as `[but in nuh]`\r\n\r\n<youtube id=\"1cMxFE4N2Gk\">\r\n\r\n## 14.Cats\r\n\r\nCats reputedly have nine lives, and he clearly wanted to spend at least one of them (uh) here in New York City.\r\n\r\n- reputedly: same to -> supposedly / I've heared... / somebody tolds me ...\r\n- clearly: same to -> absolutely / without a doubt / there's no question\r\n- wanted to: wan~~t~~ed to\r\n- at least: a~~t~~ **l**east\r\n\r\n<youtube id=\"CwyJlpgt4DI\">\r\n\r\n## 15.SpongeBob\r\n\r\nThe frantic pacing--scene changes every 11seconds on average--often leaves kids zoned out and spun up; unable to concentrate.\r\n\r\n- pacing: basicly means **speed**\r\n- frantic: means **losing controll**\r\n- zoned out: means **mind is gone**\r\n- span up: spin up, means **wind up** / **somebody is hyper active**\r\n\r\n\r\n\r\n<youtube id=\"mu-eaxlA5jo\">\r\n\r\n\r\n## 16.Philippines\r\n\r\nBattered, soaked and flooded; the Philippines is being hit by its 2nd typhoon in a week.\r\n\r\n- Battered: repeatedly continuously hit\r\n- soaked: completely wet\r\n- flooded: there's so much rain that a river or a lake overflows and goes into the streets and into our homes and into our fields\r\n\r\n<youtube id=\"pCskVAIn7qY\">\r\n\r\n\r\n## 17.Search and rescue dogs\r\n\r\nA few years ago, they were thought to be useless past their prime, not now!\r\n\r\n- past their prime: the best year in their life was gone (different from => in sb's prime)\r\n\r\n\r\n<youtube id=\"bXyc26YaSvc\">\r\n\r\n## 18.The grandmother\r\n\r\nIf you are breathing, it is not too late. Get up and get going.\r\n\r\n<youtube id=\"9h13zghnrGM\">\r\n\r\n## 19.A grandfather who survived a terrible car accident\r\n\r\nA 67 year old grandpa, has been found alive after been stuck for 6 days at the bottom of a ravine\r\n\r\n- been: say `[ben]`\r\n- stuck: in a place and you can't leave\r\n\r\n<youtube id=\"Eoy5UNd-Ngc\">\r\n\r\n## 20.An accident involved an ultralight plane and a Ferris wheel\r\n\r\nSaturday, an ultralight plane crashed into a Ferris wheel at a rural festival in Australia, yet somehow no one on the amusement ride nor the plane was hurt.\r\n\r\n- somehow: can be replaced by **magically**\r\n\r\n\r\n<youtube id=\"nlq9fXZqmyw\">\r\n\r\n\r\n## 21.Heidi  --  an opossum\r\n\r\nHeidi won the world over with her forever cute but slightly confused look.\r\n\r\n- won the world over with: \r\n- look: can be replaced by **expression** or **appearance**\r\n- confused look: read it quickly as `confuse look`\r\n\r\n\r\n<youtube id=\"DcGYI0a_m6E\">\r\n\r\n\r\n## 22.The Dead Sea Scrolls\r\n\r\nThe project to put them online is excepted to be completed by 2016\r\n\r\n<youtube id=\"eqb3Emifihg\">\r\n\r\n## 23.Cheating on the SAT college entrance exam\r\n\r\nAn alleged SAT cheating scandal has been uncovered at a prestigious Long Island high school. This college student is accused of taking the college entrance exam for at least 6 students.\r\n\r\n- uncovered at a: uncovere**d**-**a t**-**a**\r\n- student is: stude**n**~~t~~-**i**s\r\n- accused of: accuse**d**-**o**f\r\n- taking the: taking `[nuh]`\r\n\r\n<youtube id=\"lPTvrSNOtrg\">\r\n\r\n## 24.World Series baseball championship in America\r\n\r\nSt. Louis takes the World Series opener on a cool night. It was 49 degrees at the start of the game.\r\n\r\n<youtube id=\"A9pggqCpy8U\">\r\n\r\n## 25.Devastating earthquake in Turkey\r\n\r\nThey searched for the missing throughout the night under generator-powered flood lights as family members waited by the mounds of debris some in tears.\r\n\r\n- throughout the: throughou**t**-~~th~~e\r\n- the debris: means the broken buildings\r\n- debris: debri~~s~~\r\n\r\n<youtube id=\"VJ6Q0_Jyp-s\">\r\n\r\n## 26.Hanging yoga\r\n\r\nIt's the kind of thing you look forward to instead of, you know, some workouts you dread and you think of it as just work and this is just fun! \r\n\r\n\r\n<youtube id=\"QPo89Wl5NzA\">\r\n\r\n## 27.Halloween costumes for children\r\n\r\nSuperhero costumes, as usual, are big this year--especially from recent movies like Thor and the Green Lantern.\r\n\r\n- big: means **popular** here\r\n- recent movies: recen~~t~~ movies\r\n\r\n<youtube id=\"gAHb70doR4Q\">\r\n\r\n## 28.A snowstorm\r\n\r\nIt's a pain, 'cuz my fridge is...I dumped it today, and the food's gone.\r\n\r\n- dumped it today: dumpe**d**-**it**-**t**oday\r\n\r\n<youtube id=\"5-Yg9UMVFig\">\r\n\r\n## 29.A Polish pilot\r\n\r\n\r\nHe says he was simply going by the book when it comes to landing without gear, and that he and his fellow pilots train for these types of incidents.\r\n\r\n- simply: can be replaced by **just**\r\n- he says he: he say**s**-~~h~~e\r\n- was simply: wa**s**-**s**imply\r\n- and that: `en-nat`\r\n- train for: train `fer`\r\n- and his: an**d**-~~h~~is\r\n\r\n<youtube id=\"467_pBNGF2o\">\r\n\r\n## 30.A new kind of broccoli!\r\n\r\nIt is the vegetable some love to hate! But now a new breed of broccoli--super broccoli, developed in Britain may protect against heart disease--even some kinds of cancer.\r\n\r\n- love to hate: means really hate something\r\n\r\n<youtube id=\"j1AEy9jpSY8\">\r\n\r\n## 31.OWS\r\n\r\nMayor Sam Adams ordered that the camp be shut down Saturday citing unhealthy conditions and the attraction of drug dealers and thieves.\r\n\r\n- ordered that the: order**ed**-**that**-**th**e\r\n\r\n\r\n<youtube id=\"hpV_QJYIPqs\">\r\n\r\n## 32.Fukishima and the nuclear power plant's problems\r\n\r\n\r\nA preliminary government report predicts it'll take 30 years or more to safely decommission the facility and it could be decades before nearby residents who were forced to flee can return to the area.\r\n\r\n- government: governmen~~t~~\r\n- preliminary: **pre** -> `pre`\r\n\r\n<youtube id=\"cGE1UGXH0w8\">\r\n\r\n\r\n## 33.Diamond engagement ring\r\n\r\nI was lifting, you know, chairs out of the way, broken glass uh, other sanitary items I don't want to get into, but uh, it was uh, horrific to say the least.\r\n\r\n- sanitary items: means \"children's 、 baby's diapers, used diapers\"、\"toilet paper that has been used\"、\"something gross、disgusting\"\r\n- want to: usually read as `wanna`\r\n\r\n\r\n<youtube id=\"k0QeHKnvjR0\">\r\n\r\n## 34.Steering problems in some Toyota cars\r\n\r\nToyota is recalling more than half a million vehicles for problems that could make them difficult to steer.\r\n\r\n\r\n<youtube id=\"axyKJZUiq0o\">\r\n\r\n## 35.Penguins\r\n\r\nIt's great. It's um, been a little bit nerve-wracking, um, and it's been a long process to get here...\r\n\r\n- a little bit: sometimes it means \"**very**\"\r\n- process: pr`ah`cess\r\n\r\n\r\n<youtube id=\"fSxV-RXYpRY\">\r\n\r\n## 36.A father and his son\r\n\r\nWhen the family left Vietnam by boat, bound for Thailand, but the boat was intercepted by pirates...after years of trying, the father located his son in Thailand^^\r\n\r\n- when the: read as ->  when `nuh`\r\n\r\n<youtube id=\"88r9-PmrKIQ\">\r\n\r\n## 37.A VERY dirty, icky, gross story\r\n\r\nA gooey mess snarls traffic along the busy Pennsylvania Turnpike. A leaking valve on a tanker spread driveway sealant across a 40-mile stretch of the eastbound side.\r\n\r\n- mess snarls: me**ss**-**s**narls\r\n- along the: along `[nuh]`\r\n- leaking valve: means not shut the valve completely\r\n- spread driveway: sprea**d**-**d**riveway\r\n- eastbound: eas~~t~~bound\r\n\r\n<youtube id=\"IcPOyTbuec8\">\r\n\r\n## 38.The world's LONGEST concert\r\n\r\nThe music is being played at a church in Germany, and, well, it really lives up to its name. Since it started, there have been just 11 chord changes, and the next one isn't scheduled until July 2012. \r\n\r\n- chord change: chor~~d~~ change\r\n\r\n<youtube id=\"6939MB_Q0Ng\">\r\n\r\n## 39.Rabbits\r\n\r\nDozens of white rabbits were apparently dumped along the side of the road Sunday night. More than 60 bunnies were scattered on the shoulder.\r\n\r\n- Dozens of: means 12、24、36...\r\n- side of the: side o~~f~~ the\r\n- scattered: means **spread out**\r\n\r\n<youtube id=\"9gJYAwR6kI0\">\r\n\r\n## 40.A very good quotation from a person\r\n\r\nThere's a wonderful line I came across: If you've always done...or, \"If you always do what you've always done, you'll always get what you've always got.\" It's a brilliant line.\r\n\r\n- line: means **quotation**\r\n- came across: means **found**\r\n\r\n<youtube id=\"ZtoSD-rvJxE\">\r\n\r\n## 41.Some people who are paying Christmas shopping bills for strangers\r\n\r\nHer story has inspired others from Montana to Indiana to pay off the bills of complete strangers in these days before Christmas. Holiday shoppers who've heard about the layaway Santas say the sweeping acts of kindness have restored their faith in people.\r\n\r\n- in these: in `[kness]`\r\n\r\n<youtube id=\"FX7AxamVJUU\">\r\n\r\n## 42.The last verse from a poem about Santa Claus \r\n\r\nHe sprang to his sleigh, to his team gave a whistle!\r\n\r\nAnd away they all flew like the down of a thistle.\r\n\r\nBut I heard him exclaim as he drove out of sight,\r\n\r\n\"Happy Christmas to all, and to all a good night!\"\r\n\r\n\r\n<youtube id=\"TNXIjt4tx6M\">\r\n\r\n## 43.The situation comedy called Seinfeld\r\n\r\nElaine:   Hey, George. You know, my friend goes to a psychic.\r\n\r\nGeorge:  Really?\r\n\r\nElaine:   Uh-huh. We should go sometime.\r\n\r\nGeorge:  I'd love to go. Make an appointment!\r\n\r\n- psychic: means **fortune-teller**, such as *palm reader*、*tarot card reader*\r\n- appointment: appoin~~t~~ment\r\n\r\n<youtube id=\"8XjiyaVi1Mc\">\r\n\r\n## 44.The situation comedy called Everybody Loves Raymond\r\n\r\nRaymond: Dad, I beat you. Don't you remember the Raymond Spinball?\r\n\r\nFrank: Ray, I learned to play in Korea. From Koreans. Do you think some\r\npunk kid's gonna actually beat me?\r\n\r\nRaymond: No, dad, you were trying to win. You were sweating and panting.\r\n\r\nFrank: I'm a damn fine actor^^\r\n\r\n- beat you: `[be chew]`\r\n- Don't you: `[don chew]`\r\n- learned to: learne**d**-`[d]`\r\n- punk kid: pun**k**-**k**id\r\n- trying、sweating and panting: ...**ing** read as `[en]`\r\n\r\n<youtube id=\"QT8ePIi7kc4\">\r\n\r\n## 45.The situation comedy Seinfeld\r\n\r\nJerry: Hey, is it cold out?\r\n\r\n- is it: `[is-i]`\r\n\r\n<youtube id=\"S3_svYFfTKU\">\r\n\r\n## 46.French history\r\n\r\nFor more than 300 years, the power of the French king was absolute. This meant that he had the power to do anything.\r\n\r\n<youtube id=\"PzCGT6F1V1w\">\r\n\r\n## 47.Pets\r\n\r\nWhat people will do these days for their pets. A wash and a blow-dry--that goes without saying. But the demanding dog now wants a limo along with other creature comforts at a pet hotel and day spa.\r\n\r\n- demanding: means **strict** or **hard to satisfy** ...  ,such as **demanding parents**、**demanding teather**\r\n- limo: super expensive car\r\n- comforts: means **luxuries**\r\n\r\n<youtube id=\"SmYEIxcCLRQ\">\r\n\r\n## 48.Murder at a royal estate in Great Britain.\r\n\r\nBuckingham Palace officials are staying mum about the murder case, and police are keeping many details confidential as they try to identify the victim and figure out exactly what happened to her.\r\n\r\n - Buckingham Palace: this is where the queen of England lives\r\n - happened to her: `[happen tour]`\r\n\r\n<youtube id=\"QBKHDJ_oHOY\">\r\n\r\n## 49.Something that happened in London\r\n\r\n1863  \r\n\"All aboard, but mind the gap\" as the world's first underground passenger railway opens in London.\r\n\r\n- All aboard: means **get on the train**、**get on the plane**、**get on the boat**, in this case it means **get on the subway**\r\n- \r\n\r\n\r\n<youtube id=\"gfyTKRI10TA\">\r\n\r\n\r\nwaiting...\r\n\r\n","fdb413c0":"---\r\ntitle: DataBinding——从相识到相知（二）：互酌\r\ndate: 2018-10-20 21:49:47\r\nindex_img: /img/data_binding.png\r\ntags: Android\r\n---\r\n\r\n# 前言\r\n\r\n上一篇里，主要讲了关于Databinding的以下几点：\r\n\r\n- 接入与使用\r\n- 简单的数据绑定\r\n- 点击事件的绑定\r\n\r\n这一篇将会继续上一篇的步伐，对DataBinding的使用更深几分.首先依旧是从数据绑定开始\r\n<!--more--> \r\n\r\n> 之前所介绍的，虽然UI与数据进行了绑定，但是修改数据对象的时候并不会同时更新 **UI** .  \r\n现在有三种不同类型的 **observable** 类：**objects**, **fields**, 还有 **collections**.  \r\n当其中某个 **observable** 数据对象绑定到 **UI** 并且数据对象的属性发生更改时， UI 将自动更新，下面开始介绍.\r\n\r\n\r\n# Observable数据\r\n\r\n如果你的数据类只有几个属性，那么没必要去实现 **Observable** 接口来监听数据的改变，可以使用下面这些字段：\r\n\r\n- [**ObservableBoolean**](https://developer.android.google.cn/reference/android/databinding/ObservableBoolean.html)\r\n- [**ObservableByte**](https://developer.android.google.cn/reference/android/databinding/ObservableByte.html)\r\n- [**ObservableChar**](https://developer.android.google.cn/reference/android/databinding/ObservableChar.html)\r\n- [**ObservableShort**](https://developer.android.google.cn/reference/android/databinding/ObservableShort.html)\r\n- [**ObservableInt**](https://developer.android.google.cn/reference/android/databinding/ObservableInt.html)\r\n- [**ObservableLong**](https://developer.android.google.cn/reference/android/databinding/ObservableLong.html)\r\n- [**ObservableFloat**](https://developer.android.google.cn/reference/android/databinding/ObservableFloat.html)\r\n- [**ObservableDouble**](https://developer.android.google.cn/reference/android/databinding/ObservableDouble.html)\r\n- [**ObservableParcelable**](https://developer.android.google.cn/reference/android/databinding/ObservableParcelable.html)\r\n\r\n现在，我们再创建一个类\r\n```\r\nclass ObservableBean {\r\n    val text = ObservableField<String>()\r\n}\r\n```\r\n布局文件改为：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <data>\r\n        <variable name=\"model\" type=\"com.test.project.testdatabinding.MVP.DataBinding.Bean.ObservableBean\"/>\r\n    </data>\r\n\r\n    <LinearLayout\r\n        android:orientation=\"vertical\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <EditText\r\n            android:id=\"@+id/et_test\"\r\n            android:text=\"@={model.text}\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/tv_test\"\r\n            android:text=\"@{model.text}\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"/>\r\n        \r\n    </LinearLayout>\r\n</layout>\r\n```\r\n需要注意的是，上面的 **EditText** 的 **text** 属性使用的是 **@={}** 而 **TextView** 使用的是 **@{}** 。当你想要使用双向绑定的时候，可别忘了这个 **=** 号\r\n\r\n\r\n\r\nActivity的代码只改变了绑定对象：\r\n\r\n```\r\nclass DataBindingActivity<T> : AppCompatActivity() {\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n//        setContentView(R.layout.activity_data_binding)\r\n        val bindingBinding : ActivityDataBindingBinding = DataBindingUtil.setContentView(this, R.layout.activity_data_binding)\r\n        bindingBinding.model = ObservableBean()\r\n    }\r\n}\r\n```\r\n效果如下：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/DataBinding/two/databinding-001.gif)\r\n\r\n可以看到，直接使用 **Observable** 字段去实现双向数据绑定是很轻松的，不过实际项目里面需求各不相同，要将数据都换成 **Observable** 字段还是很麻烦的，所以自定义双向数据绑定非常有必要！\r\n\r\n这时对 **ObservableBean** 进行修改：\r\n\r\n```\r\nclass ObservableBean : BaseObservable() {\r\n    @get:Bindable\r\n    var text: String = \"\"\r\n    set(value) {\r\n        field = value\r\n        notifyPropertyChanged(BR.text)\r\n    }\r\n}\r\n\r\n//相较于Kotlin写法，这里我觉得Java写法更有助于理解：\r\npublic  class ObservableBean extends BaseObservable {\r\n    private String text;\r\n\r\n    @Bindable\r\n    public String getText() {\r\n        return text;\r\n    }\r\n\r\n    public ObservableBean setText(String text) {\r\n        this.text = text;\r\n        notifyPropertyChanged(BR.text);\r\n        return this;\r\n    }\r\n}\r\n\r\n```\r\n修改过后的效果与之前使用 **Observable** 字段的效果一样，上面需要注意的两点：\r\n\r\n-  使用了 **@Bindable** 注解，进行绑定声明\r\n-  使用了 **notifyPropertyChanged()** 方法为数据刷新做准备\r\n\r\n不过在我看来，通过这种继承的方法对于我们原有的数据结构并不过友好，尤其是继承了 **BaseObservable** 类的数据类不能通过  **Gson** 去与 **Json** 相互转换。\r\n\r\n所以使用的时候，我们可以考虑通过某个中介类的方式去进行转换.\r\n\r\n\r\n# 布局的绑定\r\n\r\n第第一篇中，有写到Activity中如何获取自动生成的布局绑定类——xxxBinding，这种类的命名与使用数据绑定的布局文件xml有关，比如说 **activity_main.xml** 就会生成 **ActivityMainBinding** \r\n\r\n这里再详细说明一下，不同类型的布局，应该怎么获取生成的 **Binding绑定类** \r\n\r\n> 事先并不知道绑定类型的对象可以使用 **DataBindingUtil** 去创建绑定\r\n\r\n```\r\nval rootView = LayoutInflater.from(this).inflate(layoutId, parent, attachToParent)\r\nval binding: ViewDataBinding? = DataBindingUtil.bind(viewRoot)\r\n```\r\n\r\n## 获取带 ID 的 View对象\r\n\r\n如果使用的是Kotlin，可以直接在Activity里很方便的使用id获取View对象，不过使用DataBinding后，就有另外一种获取View对象的方式了\r\n\r\n布局里面的 Id 如下：\r\n\r\n```\r\n    ...\r\n        <EditText\r\n            android:id=\"@+id/et_test\"\r\n            android:text=\"@={model.text}\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\" />\r\n\r\n    ...\r\n```\r\n\r\n通过 Id 获取 EditText 的方法如下：\r\n\r\n```\r\n        ...\r\n        super.onCreate(savedInstanceState)\r\n        val bindingBinding : ActivityDataBindingBinding = DataBindingUtil.setContentView(this, R.layout.activity_data_binding)\r\n        bindingBinding.model = ObservableBean()\r\n        val editText = bindingBinding.root.rootView.findViewById<EditText>(R.id.et_test)\r\n```\r\n\r\n\r\n> **立即绑定**  \r\n>\r\n> 当变量或可观察对象发生更改时，绑定会在下一帧之前更改。 不过有的时候需要立刻执行绑定.  \r\n>\r\n> 若要强制执行，可以使用 **executePendingBindings()** 方法。\r\n\r\n## 高级绑定\r\n\r\n有时候，特定的绑定类是未知的.  \r\n\r\n例如，针对任意布局操作的 **RecyclerView.Adapter** 不知道特定的绑定类.它仍然必须在调用 **onBindViewHolder()** 方法时分配绑定值.\r\n\r\n在 **RecyclerView** 的  **onBindViewHolder()** 方法里，可以这样写：\r\n\r\n```\r\noverride fun onBindViewHolder(holder: BindingHolder, position: Int) {\r\n    item: T = mItems.get(position)\r\n    holder.binding.setVariable(BR.item, item);\r\n    holder.binding.executePendingBindings();\r\n}\r\n```\r\n\r\n## 使用@BindingAdapter自定义绑定逻辑\r\n\r\nDataBinding为我们提供了一种可以对绑定逻辑进行自定义的方法，比如说我想在xml中对一个ImageView控件加载图片，并且是使用的Glide加载框架，这时候可以这样：\r\n\r\n```\r\n//随便创建一个类，然后在类中定义如下方法\r\n@BindingAdapter(\"imageUrl\")\r\nfun loadImage(view: ImageView, url: String) {\r\n    GlideApp.with(view.getContext())\r\n   .load(url)\r\n   .fitCenter()\r\n   .into(view);\r\n}\r\n```\r\n使用的时候编译器会自动生成对应属性：\r\n\r\n```\r\n<ImageView \r\napp:imageUrl=\"@{model.imageUrl}\"  />\r\n```\r\n使用 **@BindAdapter** 几乎可以完成你想要的各种逻辑，不过我觉得，只有那种使用率特别高的代码，才最适合这个属性.\r\n\r\n## 使用@BindingConversion完成转换功能\r\n\r\n在某些情况下，特定类型之间需要自定义转换。 例如，视图的android:background属性需要Drawable，但指定的颜色值是整数。 \r\n\r\n官方例子中，转换功能的具体用法如下：\r\n\r\n```\r\n@BindingConversion\r\nfun convertColorToDrawable(color: Int) = ColorDrawable(color)\r\n```\r\n使用的时候可以这样：\r\n\r\n```\r\n<View\r\n   android:background=\"@{isError ? @drawable/error : @color/white}\"\r\n   android:layout_width=\"wrap_content\"\r\n   android:layout_height=\"wrap_content\"/>\r\n```\r\n\r\n\r\n\r\n# 暂歇\r\n\r\n本篇关于DataBindin的介绍也就到此结束，不过DataBinding的使用还没有到头，下一篇将会侧重实际上的操作以及DataBinding还可以为我们带来哪些便捷.\r\n\r\n\r\n\r\n---\r\n\r\n# 未完待续\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","8638918f":"---\r\ntitle: DataBinding——从路人到好友（一）：初遇\r\ndate: 2018-10-17 21:49:47\r\nindex_img: /img/data_binding.png\r\ntags: Android\r\n---\r\n\r\n# 杂谈\r\n\r\n\r\n> 在编程领域，对于一名初学者而言，最开始的进阶方式都是不断重复的练习，然后在练习中遇到各种困难，同时也在这个过程里积累了不少的经验。\r\n>\r\n> 一般情况下，我们获取的经验可以有效的减少我们的失误，也可以为我们预防掉许多“隐藏”的Bug。\r\n> \r\n> 但是，随着我们能力的提升，我们逐渐的对于那些重复性非常高、而且意义并不大的代码产生了厌倦感。首当其冲的就是像 **findViewById** 这样的代码！\r\n\r\n大量的 **findViewById** 与全局变量想必是许多初学者都会经历的阶段，不过学的东西越多，对于这类代码的接受力也就越低。所以许多人选择用了 **ButterKnife** 去解决这个问题。\r\n\r\n然鹅当 **Kotlin** 出现后，**ButterKnife** 也可以随之抛弃了，这时候 **DataBinding** 的用处却和 **Kotlin** 并不冲突，相反二者结合使用，反而会让你有意想不到的、久违的、可圈可点的、眼前一亮的、拍手称赞的体验！\r\n\r\n\r\n# 使用\r\n\r\n\r\n使用 **Data-Binding** ，首先需要在 **app moudle** 下的 **build.gradle** 中添加：\r\n\r\n```\r\nandroid {\r\n    ...\r\n    dataBinding {\r\n        enabled = true\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n然后就可以正常使用了，不过需要注意，最低支持的Android版本是4.0（反正几乎没有比这更低的android设备了），gradle插件版本是1.5.0 （都2018年了，android开发者们肯定不能用比这更低的版本了吧！）\r\n\r\n\r\n接下来，举个最简单的栗子，我们创建一个 **Cartoon** 类：\r\n\r\n```\r\nclass Cartoon(var name:String = \"JOJO的奇妙冒险\" , var series :String = \"黄金之风\",\r\n              var leader : String = \"乔鲁诺·乔巴纳\", var feature : String = \"黄金体验\") {\r\n}\r\n```\r\n然后新建一个Activity，在这个Activity的xml中的根布局下，通过Alt+Enter快捷键创建databinding的布局，同时，导入 **Cartoon** 类：\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/DataBinding/one/databinding-001.png)\r\n\r\n这时候，编译器会自动根据这个布局生成相应的绑定类，这里会生成一个 **ActivityDataBindingBinding** 的类 ，暂时先不用管，我们继续在xml上工作，修改一下布局样式：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/DataBinding/one/databinding-002.png)\r\n\r\n然后，在对应的Activity内对生成的 **ActivityDataBindingBinding** 类进行操作：\r\n\r\n```\r\nclass DataBindingActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n//        setContentView(R.layout.activity_data_binding)\r\n        val bindingBinding : ActivityDataBindingBinding = DataBindingUtil.setContentView(this, R.layout.activity_data_binding)\r\n        bindingBinding.cartoon = Cartoon()\r\n    }\r\n}\r\n```\r\n\r\n由于Kotlin创建的Cartoon实体类已经给每个字段都赋予了初始值，这里不用再进行赋值，然后看一下效果：\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/DataBinding/one/databinding-003.png)\r\n\r\n> 如果你使用的是 items 去进行的绑定，例如Fragment、RecyclerView的adapter，可以使用 inflate() 的方法去绑定或者 DataBindingUtil 类，就像下面这样\r\n\r\n```\r\nval listItemBinding = ListItemBinding.inflate(layoutInflater, viewGroup, false)\r\n// or\r\nval listItemBinding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, false)\r\n```\r\n\r\n如果这时候你想使用字符串拼接，可以在 **string.xml** 中创建，比如：\r\n\r\n```\r\n    <string name=\"cartoon_name\">动漫名:%s</string>\r\n    <string name=\"cartoon_series\">系列:%s</string>\r\n    <string name=\"cartoon_leader\">主角:</string>\r\n    <string name=\"cartoon_bodyDouble\">替身:</string>\r\n```\r\n使用的时候可以是这样：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <data>\r\n        <variable name=\"cartoon\" type=\"com.test.project.testdatabinding.DataBinding.Cartoon\"/>\r\n    </data>\r\n\r\n    <LinearLayout\r\n        android:orientation=\"vertical\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n        <TextView\r\n            android:layout_gravity=\"center\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@{@string/cartoon_name(cartoon.name)}\"/>\r\n        <TextView\r\n            android:layout_gravity=\"center\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@{@string/cartoon_series(cartoon.series)}\"/>\r\n        <TextView\r\n            android:layout_gravity=\"center\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@{@string/cartoon_leader + cartoon.leader}\"/>\r\n        <TextView\r\n            android:layout_gravity=\"center\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@{@string/cartoon_bodyDouble + cartoon.feature}\"/>\r\n\r\n    </LinearLayout>\r\n</layout>\r\n```\r\n效果如下：\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/DataBinding/one/databinding-004.png)\r\n\r\n至此，我们完成了与DataBinding的初次接触！\r\n\r\n可以看到，相较于往常的通过findViewById去获取控件实例，然后给控件设置数据的方法，这样显然去掉了Activity内许多不必要的代码。\r\n\r\n不过以上只是比较简单的DataBinding用法，下面将会介绍DataBinding的其他功能，这样才能应更复杂的需求。\r\n\r\n\r\n## 集合的使用\r\n\r\n\r\n```\r\n<data>\r\n    <import type=\"android.util.SparseArray\"/>\r\n    <import type=\"java.util.Map\"/>\r\n    <import type=\"java.util.List\"/>\r\n    <variable name=\"list\" type=\"List<String>\"/>\r\n    <variable name=\"sparse\" type=\"SparseArray<String>\"/>\r\n    <variable name=\"map\" type=\"Map<String, String>\"/>\r\n    <variable name=\"index\" type=\"int\"/>\r\n    <variable name=\"key\" type=\"String\"/>\r\n</data>\r\n…\r\nandroid:text=\"@{list[index]}\"\r\n…\r\nandroid:text=\"@{sparse[index]}\"\r\n…\r\nandroid:text=\"@{map[key]}\"  //这里也可以使用 @{map.key}代替\r\n```\r\n\r\n## 点击事件\r\n\r\n点击事件也是可以在xml中绑定的，在 DataBindingActivity 中添加如下方法：\r\n\r\n```\r\n    fun doClick(view: View){\r\n        Toast.makeText(this, \"点击测试\", Toast.LENGTH_SHORT).show()\r\n    }\r\n```\r\n不要忘了在括号中传入View\r\n\r\n然后再xml中写一个button的点击事件\r\n```\r\n <Button\r\n            android:text=\"DataBinding-点击测试\"\r\n            android:onClick=\"doClick\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\" />\r\n```\r\n如果想通过点击事件传入参数的话，可以通过下面这种方法：\r\n\r\n\r\n```\r\n<variable name=\"handler\" type=\"com.test.project.testdatabinding.DataBinding.DataBindingActivity\"/>\r\n\r\n\r\n<Button\r\n            android:text=\"DataBinding-点击测试\"\r\n            android:onClick=\"@{() -> handler.doClick(cartoon.name)}\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\" />\r\n```\r\n从xml中导入 DataBindingActivity 后，再修改代码：\r\n\r\n```\r\nclass DataBindingActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n//        setContentView(R.layout.activity_data_binding)\r\n        val bindingBinding : ActivityDataBindingBinding = DataBindingUtil.setContentView(this, R.layout.activity_data_binding)\r\n        bindingBinding.cartoon = Cartoon()\r\n        bindingBinding.handler = this\r\n    }\r\n\r\n    fun doClick(message: String){\r\n        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()\r\n    }\r\n}\r\n```\r\n点击效果如下：\r\n\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/DataBinding/one/databinding-005.png)\r\n\r\n如果有更加复杂的点击事件，可以参考官介绍中的，如带View参数的：\r\n```\r\nclass Presenter {\r\n    fun onSaveClick(view: View, task: Task){}\r\n}\r\n\r\n\r\nandroid:onClick=\"@{(theView) -> presenter.onSaveClick(theView, task)}\"\r\n```\r\n\r\n## import 与 include\r\n\r\n### import\r\n\r\n在xml中，可以通过导入一些工具类进行简单地操作，比如说导入View类：\r\n\r\n```\r\n<data>\r\n    <import type=\"android.view.View\"/>\r\n</data>\r\n```\r\n这样你就可以直接在xml中使用它的一些静态方法或者变量,官方的例子中简单地用法如下：\r\n\r\n```\r\n<TextView\r\n   android:text=\"@{user.lastName}\"\r\n   android:layout_width=\"wrap_content\"\r\n   android:layout_height=\"wrap_content\"\r\n   android:visibility=\"@{user.isAdult ? View.VISIBLE : View.GONE}\"/>\r\n```\r\n不过我觉得xml中不适合做太多逻辑判断的操作，所以使用的时候应该考虑一下某些操作是否真的合适\r\n\r\n\r\n### include\r\n\r\n如果你有在xml中使用到 include ，通过下面例子中的方法就行绑定：\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:bind=\"http://schemas.android.com/apk/res-auto\">\r\n    <data>\r\n        <variable name=\"cartoon\" type=\"com.test.project.testdatabinding.DataBinding.Cartoon\"/>\r\n    </data>\r\n\r\n    <LinearLayout\r\n        android:orientation=\"vertical\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n        \r\n       <include layout=\"@layout/layout_test\"\r\n           bind:cartoon=\"@{cartoon}\"/>\r\n\r\n    </LinearLayout>\r\n</layout>\r\n```\r\nlayout_test 布局：\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n\r\n    <data>\r\n        <variable name=\"cartoon\" type=\"com.test.project.testdatabinding.DataBinding.Cartoon\"/>\r\n    </data>\r\n\r\n    <android.support.constraint.ConstraintLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <TextView\r\n            android:text=\"@{cartoon.name}\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\" />\r\n\r\n    </android.support.constraint.ConstraintLayout>\r\n</layout>\r\n```\r\n注意，要使用 bind 属性，可别忘了下面的这行代码：\r\n\r\n```\r\nxmlns:bind=\"http://schemas.android.com/apk/res-auto\"\r\n```\r\n\r\n# 暂歇\r\n\r\n出于篇幅考虑，关于 **DataBinding** 的使用，暂且就讲到这里，关于它更详尽的用法，后续再作介绍。\r\n\r\n\r\n\r\n---\r\n\r\n# 未完待续\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","e9c8c880":"---\r\ntitle: EventBus源码分析\r\ndate: 2020-04-07 11:24:16\r\nindex_img: /img/eventbus.png\r\ntags: 源码系列\r\n---\r\n# 序\r\n\r\n[EventBus](https://github.com/greenrobot/EventBus) 也是Android开发者们非常熟知的库了\r\n\r\n这一篇文章我们将来了解一下它的源码，看看它是如何进行事件的订阅与通知的。\r\n\r\n\r\n# 引子\r\n\r\n`EventBus` 的用法十分简单，我们直接从 `EventBus.getDefault().register(...)` 开始看吧\r\n\r\n\r\n# EventBus\r\n\r\n## getDefault()\r\n\r\n\r\n```\r\n    public static EventBus getDefault() {\r\n        if (defaultInstance == null) {\r\n            synchronized (EventBus.class) {\r\n                if (defaultInstance == null) {\r\n                    defaultInstance = new EventBus();\r\n                }\r\n            }\r\n        }\r\n        return defaultInstance;\r\n    }\r\n```\r\n`getDefault()` 是一个双重检查锁获取的单例对象，关于单例模式之前的文章已经介绍过，这里就不重复了。\r\n\r\n## EventBus()\r\n\r\n\r\n```\r\npublic class EventBus {\r\n    private static final EventBusBuilder DEFAULT_BUILDER = new EventBusBuilder();\r\n    ...\r\n    private final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;\r\n    private final Map<Object, List<Class<?>>> typesBySubscriber;\r\n    private final Map<Class<?>, Object> stickyEvents;\r\n\r\n    public EventBus() {\r\n        this(DEFAULT_BUILDER);\r\n    }\r\n    \r\n    EventBus(EventBusBuilder builder) {\r\n        ...\r\n        subscriptionsByEventType = new HashMap<>();\r\n        typesBySubscriber = new HashMap<>();\r\n        stickyEvents = new ConcurrentHashMap<>();\r\n        mainThreadSupport = builder.getMainThreadSupport();\r\n        mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;\r\n        backgroundPoster = new BackgroundPoster(this);\r\n        ...\r\n    }\r\n}\r\n```\r\n`EventBus()` 最后调用的 `EventBus(builder)` 完成了一系列初始化的操作。这里，简单说明一下，`ConcurrentHashMap` 和 `CopyOnWriteArrayList` 分别是线程操作安全的 `Map` 与 线程操作安全的 `List` 结构\r\n\r\n上面有三个非常主要的数据结构，下面分别介绍一下：\r\n- `subscriptionsByEventType` 对象的 `key` 是自定义的 `Event` 事件的 `Type`，而 `value` 则是一个列表，这个列表由该 `Event` 相关的所有被 `@Subscribe` 修饰的方法所组成，每个方法的各种信息都被封装在了 `Subscription` 中\r\n- `typesBySubscriber` 的 `key` 则是 `register(...)` 时传入的类信息，而 `value` 则是由该类中各种自定义的 `Event` 事件组成的列表\r\n- `stickyEvents` 的 `key` 是自定义 `Event` 事件的 `Type`，而 `value` 则是该 `Event`\r\n\r\n接下来，我们来看 `register(...)` 方法\r\n\r\n## register(...)\r\n\r\n\r\n```\r\n    public void register(Object subscriber) {\r\n        Class<?> subscriberClass = subscriber.getClass();\r\n        List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\r\n        synchronized (this) {\r\n            for (SubscriberMethod subscriberMethod : subscriberMethods) {\r\n                subscribe(subscriber, subscriberMethod);\r\n            }\r\n        }\r\n    }\r\n```\r\n可以看到，在 `register(...)` 中，通过 `findSubscriberMethods(...)` 找到了注册类里面声明的所有方法，然后进行遍历调用 `subscribe(...)` 进行数据存放操作，我们可以先看一下 `findSubscriberMethods(...)`\r\n\r\n## SubscriberMethodFinder\r\n\r\n\r\n```\r\nclass SubscriberMethodFinder {\r\n    private static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();\r\n    ...\r\n    List<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\r\n        List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\r\n        if (subscriberMethods != null) {\r\n            return subscriberMethods;\r\n        }\r\n\r\n        if (ignoreGeneratedIndex) {\r\n            subscriberMethods = findUsingReflection(subscriberClass);\r\n        } else {\r\n            subscriberMethods = findUsingInfo(subscriberClass);\r\n        }\r\n        if (subscriberMethods.isEmpty()) {\r\n            throw new EventBusException(\"Subscriber \" + subscriberClass\r\n                    + \" and its super classes have no public methods with the @Subscribe annotation\");\r\n        } else {\r\n            METHOD_CACHE.put(subscriberClass, subscriberMethods);\r\n            return subscriberMethods;\r\n        }\r\n    }\r\n}\r\n```\r\n可以看到，`METHOD_CACHE` 实现了一个缓存的功能，避免列表的重复创建。\r\n\r\n当列表 `subscriberMethods` 为空时，则会根据  `ignoreGeneratedIndex` 来通过不同的方式初始化，说到这个变量，它其实和 **EventBus 3.0** 引入的 `EventBusAnnotationProcessor` 有关，它可以在编译时生成相关的索引文件，这样比通过反射来获取各种信息所带来的性能提升要高得多，不过使用它需要进行额外的配置，这里就不细说了。\r\n\r\n `ignoreGeneratedIndex` 为 **true** 则表示强制使用反射来获取索引信息，而它默认是为 **false** 的\r\n \r\n 不过如果你没有去配置 `EventBusAnnotationProcessor` ，那么最后其实两种获取索引的方法都是通过反射来完成的。这里关于 `SubscriberMethodFinder` 的分析大概就是这样，接下来，我们继续回到 `EventBus` 的 `subscribe(...)` 方法\r\n \r\n ## subscribe(...)\r\n \r\n \r\n```\r\n    public void register(Object subscriber) {\r\n        ...\r\n        synchronized (this) {\r\n            for (SubscriberMethod subscriberMethod : subscriberMethods) {\r\n                subscribe(subscriber, subscriberMethod);\r\n            }\r\n        }\r\n    }\r\n```\r\n可以看到，`subscribe(...)` 方法是在 `synchronized` 修饰的代码块中进行的操作\r\n\r\n\r\n```\r\n    private void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\r\n        Class<?> eventType = subscriberMethod.eventType;\r\n        Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\r\n        CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\r\n        if (subscriptions == null) {\r\n            subscriptions = new CopyOnWriteArrayList<>();\r\n            subscriptionsByEventType.put(eventType, subscriptions);\r\n        }\r\n        ...\r\n        //根据优先级，最优先的放在列表最前面\r\n        int size = subscriptions.size();\r\n        for (int i = 0; i <= size; i++) {\r\n            if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\r\n                subscriptions.add(i, newSubscription);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\r\n        if (subscribedEvents == null) {\r\n            subscribedEvents = new ArrayList<>();\r\n            typesBySubscriber.put(subscriber, subscribedEvents);\r\n        }\r\n        subscribedEvents.add(eventType);\r\n        \r\n        if (subscriberMethod.sticky) {\r\n            ...\r\n        }\r\n    }\r\n```\r\n在 `subscribe(...)` 中，进行的一系列操作，就是我们之前介绍过的三种数据结构，将各种订阅消息存放到数据结构中。\r\n\r\n同时，在 `if (subscriberMethod.sticky)` 的逻辑中，还会对 `stickyEvent` 进行一次检查，如果存在的话，则会触发它。这也就是为什么在前一个 **Activity** 注册了 `stickyEvent` 后，在后启动的 **Activity** 可以触发 `stickyEvent` 的原因了。\r\n\r\n`EventBus` 的注册流程大概就是这样，接下来我们看一下调用 `post(event)` 方法时，`EventBus` 是如何触发订阅事件的吧\r\n\r\n\r\n## post(event)\r\n\r\n\r\n```\r\n    public void post(Object event) {\r\n        PostingThreadState postingState = currentPostingThreadState.get();\r\n        List<Object> eventQueue = postingState.eventQueue;\r\n        eventQueue.add(event);\r\n\r\n        if (!postingState.isPosting) {\r\n            postingState.isMainThread = isMainThread();\r\n            postingState.isPosting = true;\r\n            if (postingState.canceled) {\r\n                throw new EventBusException(\"Internal error. Abort state was not reset\");\r\n            }\r\n            try {\r\n                while (!eventQueue.isEmpty()) {\r\n                    postSingleEvent(eventQueue.remove(0), postingState);\r\n                }\r\n            } finally {\r\n                postingState.isPosting = false;\r\n                postingState.isMainThread = false;\r\n            }\r\n        }\r\n    }\r\n```\r\n可以看到，这里先将需要触发的 `event` 放在列表尾部，然后遍历这个列表，依次调用 `postSingleEvent(event)` 从头到尾处理所有事件\r\n\r\n接下来，就看一下 `postSingleEvent(event)` \r\n\r\n## postSingleEvent(event)\r\n\r\n\r\n```\r\n    private void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\r\n        Class<?> eventClass = event.getClass();\r\n        boolean subscriptionFound = false;\r\n        if (eventInheritance) {\r\n            List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);\r\n            int countTypes = eventTypes.size();\r\n            for (int h = 0; h < countTypes; h++) {\r\n                Class<?> clazz = eventTypes.get(h);\r\n                subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\r\n            }\r\n        } else {\r\n            subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\r\n        }\r\n        ...\r\n    }\r\n```\r\n`eventInheritance` 默认为true，它表示会将订阅的 `event` 父类也添加到 `event` 触发列表中\r\n\r\n最后会走到 `postSingleEventForEventType(...)` 方法\r\n\r\n## postSingleEventForEventType(...)\r\n\r\n\r\n```\r\n    private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {\r\n        CopyOnWriteArrayList<Subscription> subscriptions;\r\n        synchronized (this) {\r\n            subscriptions = subscriptionsByEventType.get(eventClass);\r\n        }\r\n        if (subscriptions != null && !subscriptions.isEmpty()) {\r\n            for (Subscription subscription : subscriptions) {\r\n                postingState.event = event;\r\n                postingState.subscription = subscription;\r\n                boolean aborted = false;\r\n                try {\r\n                    postToSubscription(subscription, event, postingState.isMainThread);\r\n                    aborted = postingState.canceled;\r\n                } finally {\r\n                    postingState.event = null;\r\n                    postingState.subscription = null;\r\n                    postingState.canceled = false;\r\n                }\r\n                if (aborted) {\r\n                    break;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n```\r\n这里先从 `subscriptionsByEventType` 取出当前注册 `event` 对应的订阅方法列表，然后遍历这个列表，调用 `postToSubscription(...)` 来触发事件。如果最后返回false的话，就说明没有找到订阅的方法\r\n\r\n接下来，就看一下 `postToSubscription(...)` 了\r\n\r\n## postToSubscription(...)\r\n\r\n\r\n```\r\n    private void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {\r\n        switch (subscription.subscriberMethod.threadMode) {\r\n            case POSTING:\r\n                invokeSubscriber(subscription, event);\r\n                break;\r\n            case MAIN:\r\n                if (isMainThread) {\r\n                    invokeSubscriber(subscription, event);\r\n                } else {\r\n                    mainThreadPoster.enqueue(subscription, event);\r\n                }\r\n                break;\r\n            case MAIN_ORDERED:\r\n                if (mainThreadPoster != null) {\r\n                    mainThreadPoster.enqueue(subscription, event);\r\n                } else {\r\n                    // temporary: technically not correct as poster not decoupled from subscriber\r\n                    invokeSubscriber(subscription, event);\r\n                }\r\n                break;\r\n            case BACKGROUND:\r\n                if (isMainThread) {\r\n                    backgroundPoster.enqueue(subscription, event);\r\n                } else {\r\n                    invokeSubscriber(subscription, event);\r\n                }\r\n                break;\r\n            case ASYNC:\r\n                asyncPoster.enqueue(subscription, event);\r\n                break;\r\n            default:\r\n                throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);\r\n        }\r\n    }\r\n```\r\n到这里，其实就是对应各种 `ThreadMode` 来处理相对应的 `event` 了。其中你可以发现三个个比较特殊的对象，分别是 `mainThreadPoster`、`backgroundPoster` 以及 `asyncPoster`。\r\n\r\n这三者的 `enqueue(...)` 方法最终都是将对象插入了其内部维护的 `PendingPostQueue`，而 `PendingPostQueue` 内部维护了两个链表，实现了一个 `event` 栈\r\n\r\n下面就分别简单的介绍一下三个 `Poster` 对象，感兴趣的同学可以直接看源码\r\n\r\n- `mainThreadPoster` : 是 `HandlerPoster` 对象，父类为 `Handler` ，内部持有 `MainLooper`。 `enqueue(...)` 在插入 `event` 的同时，会调用 `sendMessage(msg)` 通知其内部的 `handleMessage(msg)` 触发事件\r\n- `backgroundPoster` : 是 `BackgroundPoster` 对象，实现了 `Runnable` 接口， `enqueue(...)` 插入 `event` 同时调用 `ExecutorService` 对象执行 `run()` 方法，在里面遍历队列触发事件，每个事件触发都需要等待 **1000ms**\r\n- `asyncPoster` : 是 `AsyncPoster` 对象，也实现了 `Runnable` 接口，其他逻辑与 `backgroundPoster` 类似，只不过它不用等待，并且不对队列进行遍历一次只处理一个事件\r\n\r\n这里其实就可以知道，`BACKGROUND` 是针对 **Android** 设计的，如果当前 `post(event)` 发生在主线程，会通过线程池来触发各个事件。 `ASYNC` 也差不多，但是它没有对主线程进行判断，应该是针对 **java平台** 使用的\r\n\r\n最终，事件的触发都调用到了 `invokeSubscriber(...)` 方法\r\n\r\n## invokeSubscriber(...)\r\n\r\n```\r\n    void invokeSubscriber(PendingPost pendingPost) {\r\n        ...\r\n        if (subscription.active) {\r\n            invokeSubscriber(subscription, event);\r\n        }\r\n    }\r\n\r\n    void invokeSubscriber(Subscription subscription, Object event) {\r\n        try {\r\n            subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\r\n        } catch (InvocationTargetException e) {\r\n            handleSubscriberException(subscription, event, e.getCause());\r\n        } catch (IllegalAccessException e) {\r\n            throw new IllegalStateException(\"Unexpected exception\", e);\r\n        }\r\n    }\r\n```\r\n当我们在 `post(event)` 时如果没有找到有方法订阅了该 `event`，就会发送一个 `SubscriberExceptionEvent` 事件，\r\n这里的 `handleSubscriberException(...)` 除了处理其他的错误，也会处理这个事件\r\n\r\n可以看到，最后调用的是 `Method` 对象的 `invoke(...)` 方法。所以这里我们就知道了，所有事件的触发，其实都是通过反射来完成的。\r\n\r\n那么关于 `EventBus` 的源码，也就分析结束啦！整体来看可读性还是蛮高的，分析起来没有太大的障碍，就不写总结了。","761652d4":"---\r\ntitle: Flutter图文混排原生实现方案\r\ndate: 2019-04-19 21:49:47\r\nindex_img: /img/pic_text.png\r\ntags: Flutter\r\n---\r\n\r\n# 开头\r\n\r\n图文混排在移动端的实现方案主要有两大种，比如通过HTML去做一个WebView的富文本，或者通过原生的方式去实现。\r\n\r\n使用WebView在性能上自然不及原生实现，同时开发者需要具备一定的前端知识，它最大的优势是跨平台;\r\n\r\n出于性能的考虑，以及我对前端知识的了解程度，这里我只是介绍一下如何通过原生的方式去实现图文混排。\r\n<!--more--> \r\n\r\n# 介绍\r\n\r\n在手机上，你经常能看到这样的图文实现方式，比如贴吧的这种：\r\n\r\n<img src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Flutter%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/001.png\" width = \"600\" height = \"300\" div align=center />\r\n\r\n点进去后是这样的展示：\r\n\r\n\r\n<img src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Flutter%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/002.png\" width = \"400\" height = \"720\" div align=center />\r\n\r\n\r\n这种实现方式比较简单，算是文字与图片分开展示。不过既然我们要实现的是图文混排，那一定会稍稍复杂一点。\r\n\r\n# 示例\r\n\r\n下面是demo的效果：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Flutter%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%8E%9F%E7%94%9F%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/003.gif)\r\n\r\n\r\n从上面的demo可以看到，通过原生的图文混排实现了下面这些效果：\r\n\r\n    1.单个图片的插入\r\n    2.多个图片的插入\r\n    3.插入图片时对文字进行切割\r\n    4.删除图片时对文字进行合并\r\n\r\n\r\n其实看到这里，你应该能够看得出来一个大致的实现方法了，接下来我来介绍一下整个图文混排的结构。\r\n\r\n由于是用Flutter实现，所以图文混排用的ListView，如果是android的话则可以使用RecyclerView(ios的话我不太了解所以就不说了)，因为实现图文混排主要是对数据的处理，所以平台的限制不大。\r\n\r\n**既然是ListView，可以看得出来，ListView的内容全部是由Image与TextField组成，每当你插入一个Image的时候，同时会新増一个TextField，而这个TextField的内容则是上个TextField光标后的文字。**\r\n\r\n既然知道了结构，那么下面来看一下是如何实现的吧。\r\n\r\n\r\n# 实现\r\n\r\n图文混排的主要逻辑在于两个：\r\n\r\n    1.插入\r\n    2.删除\r\n\r\n在进行操作之前，先定义一个抽象的结构，用于存储字符串数据，其实只是对MapEntry的一个简单修改：\r\n\r\n\r\n```\r\nclass TextEntry<K, V> {\r\n  K key;\r\n  V value;\r\n  factory TextEntry(K key, V value) = TextEntry<K, V>._;\r\n  TextEntry._(this.key, this.value);\r\n  String toString() => \"TextEntry($key: $value)\";\r\n}\r\n```\r\n\r\n\r\n然后来看一下插入的实现：\r\n\r\n## 插入\r\n\r\n```\r\nclass RichTextList<T>{\r\n\r\n  List<TextEntry<T, String>> _list = [];\r\n\r\n  void insertOne(int currentPosition, String beforeText, String selectText,\r\n      String afterText, T t) {\r\n    _list[currentPosition].value = beforeText;\r\n    _list.insert(currentPosition + 1, TextEntry(t, \"\"));\r\n    _list.insert(currentPosition + 2, new TextEntry(null, afterText));\r\n  }\r\n\r\n}\r\n```\r\n传递的参数中各个的意义如下：\r\n\r\n- currentPosition：当前TextField所在的位置\r\n- beforeText：当前TextField中光标前的文字\r\n- selectText：当前TextField中选中的文字，在这里没有进行处理\r\n- afterText：当前TextField中光标后的文字\r\n- t：你传入的泛型参数\r\n\r\n可以看到，每插入一个数据，还会自动插入一个value为null的TextEntry，而这个Entry则是文字的内容：\r\n\r\n```\r\n_list.insert(currentPosition + 2, new TextEntry(null, afterText));\r\n```\r\n\r\n所以图文混排的关键在于有一个统一的数据结构，后续如果想对这个数据结构进行转换也可以依据这个来，value为空的TextEntry表示文字，其他的则是你传入的泛型参数。\r\n\r\n下面是插入多条的代码：\r\n\r\n\r\n```\r\n  void insert(int currentPosition, String beforeText, String selectText, String afterText, List<T> list){\r\n    _list[currentPosition].value = beforeText;\r\n    for(int i = 0; i < list.length; i++){\r\n      _list.insert(currentPosition + 2*i + 1, TextEntry(list[i], \"\"));\r\n      _list.insert(currentPosition + 2*i + 2, new TextEntry(null, i == list.length - 1?afterText:\"\"));\r\n    }\r\n  }\r\n```\r\n\r\n当然，你可以用插入多个的替代上面插入单个的。\r\n\r\n然后就是删除的逻辑了：\r\n\r\n## 删除\r\n\r\n删除也非常简单：\r\n\r\n\r\n```\r\n  void remove(int currentPosition) {\r\n      String afterText = _list[currentPosition + 1].value;\r\n      _list[currentPosition - 1].value += afterText;\r\n      _list.removeAt(currentPosition + 1);\r\n      _list.removeAt(currentPosition);\r\n  }\r\n```\r\n\r\n删除的主要逻辑在于把下一个TextField中的内容补在上一个TextField中\r\n\r\n\r\n核心的逻辑大概就是这样。\r\n\r\n\r\n其中有点不方便的就是可能会与你的数据结构不太相同，所以转换的工作需要自己另外实现，当然如果你不想使用抽象的结构也可以自己自定义一种，比如说下面这种：\r\n\r\n\r\n```\r\nclass CustomTypeList{\r\n  TypeFlag flag;//默认为文字——0：文字，1：图片，2：视频，3：音乐\r\n  var imageUrl;\r\n  CustomTypeList({this.flag = TypeFlag.text, this.imageUrl = \"\"});\r\n}\r\n\r\nenum TypeFlag{\r\n  text,\r\n  image,\r\n  video,\r\n  music\r\n}\r\n```\r\n实际使用中可以把枚举类型替换成int值，这样配合后端更佳。\r\n\r\n**通过ListView实现图文混排最大的一个优势在于你可以将文字与任何类型的布局混合在一起，可以是图片，可以是视频，也可以是音乐！**\r\n\r\n\r\n# 结尾\r\n\r\n这篇文章没有把全部的代码贴出来，我已经把demo放在仓库里了，小伙伴们有意向可以去下载查看。\r\n\r\n[**项目地址**](https://github.com/asjqkkkk/TextPicList)\r\n\r\n最后的最后，为我用纯Flutter写的一个测试项目打个小广告：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/apk/apk.png)\r\n\r\n如果你对于上面图文混排最后的效果不是特别满意，也可以到上面的app(android版)里面瞧一下,有做过特殊处理哦！","348c8248":"---\r\ntitle: Hanler源码分析\r\ndate: 2020-03-12 09:56:23\r\nindex_img: /img/handler.png\r\ntags: 源码系列\r\n---\r\n\r\n# 序\r\n\r\n我到底为什么要分析 `Hanler` 的源码呢？\r\n\r\n在之前，我分析 `HashMap` 的源码是因为面试中有问到这个，我也确实没看过。而 `Handler` 也会是比较常问的一个知识点。考虑过了我稀疏的源码阅读量，以及分析了 `HashMap` 的源码后一种莫名舒畅的感觉，我决定完成一个源码分析的系列，`Handler` 就是其中之一了。\r\n\r\n# 引子\r\n\r\n我们从哪里开始分析好呢？在 `Handler` 的日常使用中，我们肯定会用到它的 `handleMessage(Message msg)` 方法，所以我们可以从这里开始。\r\n\r\n\r\n```\r\n    public void handleMessage(Message msg) {\r\n    }\r\n```\r\n\r\n然后你可以发现，这个方法属实没什么好分析的。\r\n\r\n我们还是从构造函数那里开始入手吧，分析一遍后你会发现， `Handler` 的源码还是蛮简洁清晰的\r\n\r\n# 分析\r\n\r\n在构造函数之前，可以先看一下 `Handler` 中，有哪些对象\r\n\r\n\r\n```\r\npublic class Handler {\r\n    \r\n    ...\r\n    final Looper mLooper;\r\n    final MessageQueue mQueue;\r\n    final Callback mCallback;\r\n    final boolean mAsynchronous;\r\n    IMessenger mMessenger;\r\n    ...\r\n}\r\n```\r\n\r\n可以看到， `Handler` 中存放了 `Looper` 和 `MessageQueue` ，并且没有存储 `Message`对象，后面的几个对象，后面再来看。接下来，看一下构造函数吧\r\n\r\n\r\n## Handler\r\n\r\n### Handler(...)\r\n\r\n `Handler` 的构造函数有好几种\r\n \r\n \r\n```\r\n    ...\r\n    public Handler() { this(null, false); }\r\n    \r\n    public Handler(Callback callback) { this(callback, false); }\r\n    \r\n    public Handler(Looper looper) { this(looper, null, false); }\r\n    \r\n    public Handler(Looper looper, Callback callback) { this(looper, callback, false); }\r\n    \r\n    public Handler(boolean async) { this(null, async); }\r\n    \r\n    public Handler(Looper looper, Callback callback, boolean async) {\r\n        mLooper = looper;\r\n        mQueue = looper.mQueue;\r\n        mCallback = callback;\r\n        mAsynchronous = async;\r\n    }\r\n    \r\n    public Handler(Callback callback, boolean async) { ... }\r\n    ...\r\n```\r\n\r\n上面给出的构造函数，都指向了最后的两个。\r\n\r\n先看第一个，可以知道这个构造函数创建的  `Handler` ，它的 `Looper` 来自于构造函数。并且 `MessageQueue` 是来自于 `Looper` 的\r\n\r\n`Callback` 其实是一个接口，里面有一个 `handleMessage` 方法\r\n\r\n```\r\n    public interface Callback {\r\n        public boolean handleMessage(Message msg);\r\n    }\r\n```\r\n\r\n至于 `mAsynchronous` ,暂时从字面上来看它是用于控制是否异步加载的。不过是不是这样呢？看后面的代码分析就知道了。\r\n\r\n接下来，我们看一下 `Handler` 的另外一个构造函数吧\r\n\r\n```\r\n    public Handler(Callback callback, boolean async) {\r\n        if (FIND_POTENTIAL_LEAKS) {\r\n            ...\r\n            //如果发现有内存泄漏的可能，提示有内存泄漏的风险\r\n        }\r\n\r\n        mLooper = Looper.myLooper();\r\n        if (mLooper == null) {\r\n            //抛出异常\r\n        }\r\n        mQueue = mLooper.mQueue;\r\n        mCallback = callback;\r\n        mAsynchronous = async;\r\n    }\r\n```\r\n上面的代码，我们简化了一下，和之前构造函数不同的是 `Handler` 的 `Looper`是通过 **Looper.myLooper()** 方法传递的，来看一下这个方法\r\n\r\n\r\n```\r\npublic final class Looper {\r\n    ...\r\n    \r\n    static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();\r\n    \r\n    public static @Nullable Looper myLooper() {\r\n        return sThreadLocal.get();\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\n可以看到，这个 `Looper` 是通过 `ThreadLocal` 对象获取的, 这里就先不详细介绍 `ThreadLocal` 了(我还没仔细的看它的源码)，但是我们通过它的说明可以知道， `ThreadLocal` 的作用是：\r\n\r\n> 每一个 Thread 都会持有自己的局部变量，而 ThreadLocal 是一种管理这些变量的结构，它可以让 Thread 使用它自己的局部变量，而不与其他 Thread 分享。\r\n也就是实现了线程之间的资源隔离，达到安全并发的目的\r\n\r\n那么这里的 `Looper` 其实就是获取与当前 `Thread` 关联的  `Looper` 。不过到这里，我就产生了一个疑问，不知道你们有木有：\r\n\r\n    `Looper` 和 `Tread` 是一一对应的关系吗？还是其他的关系？\r\n    \r\n这个我们通过后面的源码来解释。\r\n\r\n接下来，`Handler` 中，有几个比较典型的方法，通过这些方法，我们可以更加清晰的了解 `Handler` 的作用机制\r\n\r\n\r\n```\r\n    ...\r\n    \r\n    public void dispatchMessage(Message msg) {...}\r\n    \r\n    public static Handler getMain() {...}\r\n    \r\n    public final boolean post(Runnable r) {\r\n       return  sendMessageDelayed(getPostMessage(r), 0);\r\n    }\r\n    \r\n    public final boolean postDelayed(Runnable r, long delayMillis) {...}\r\n    \r\n    public final boolean sendMessageDelayed(Message msg, long delayMillis) {...}\r\n    \r\n    public final boolean sendEmptyMessage(int what) { return sendEmptyMessageDelayed(what, 0); }\r\n    \r\n    public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {...}\r\n    \r\n    public final boolean sendMessageDelayed(Message msg, long delayMillis) {...}\r\n    \r\n    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {...}\r\n    \r\n    \r\n    \r\n    public final void removeCallbacksAndMessages(Object token) {\r\n        mQueue.removeCallbacksAndMessages(this, token);\r\n    }\r\n    \r\n    \r\n    ...\r\n```\r\n\r\n其中，`dispatchMessage`、`postXXXX`、`sendXXXX` 都是我们常用的一些方法，我们来逐个解析\r\n\r\n### dispatchMessage(Message msg)\r\n\r\n\r\n```\r\n    public void dispatchMessage(Message msg) {\r\n        if (msg.callback != null) {\r\n            handleCallback(msg);\r\n        } else {\r\n            if (mCallback != null) {\r\n                if (mCallback.handleMessage(msg)) {\r\n                    return;\r\n                }\r\n            }\r\n            handleMessage(msg);\r\n        }\r\n    }\r\n```\r\n显然，这个方法是用来分发 `Message` 的，先看一下 `Message` 中的 `callback`是什么：\r\n\r\n```\r\npublic final class Message implements Parcelable {\r\n    ...\r\n    Runnable callback;\r\n    ...\r\n}\r\n```\r\n原来是 `Runnable`，这里也把大家最熟悉的 `Runnable` 贴出来一下:\r\n\r\n```\r\npublic interface Runnable {\r\n    public abstract void run();\r\n}\r\n```\r\n我们看一下，当 `msg` 中的 `callback`不为空的时候，是怎么处理的\r\n\r\n```\r\n    private static void handleCallback(Message message) {\r\n        message.callback.run();\r\n    }\r\n```\r\n其实看到这里上面的分发流程就清楚了：\r\n\r\n- 如果 `Message` 中的 `callback` 存在，则优先交给它去处理\r\n- 否则，如果 `Handler` 中的 `mCallback` 存在，则交由这个 `mCallback` 处理\r\n- 否则，交给 `handleMessage()` 处理，也就是你实现的 `Handler` 类，重写了这个方法的话\r\n\r\n### getMain()\r\n\r\n```\r\npublic class Handler {\r\n    ...\r\n    public static Handler getMain() {\r\n        if (MAIN_THREAD_HANDLER == null) {\r\n            MAIN_THREAD_HANDLER = new Handler(Looper.getMainLooper());\r\n        }\r\n        return MAIN_THREAD_HANDLER;\r\n    }\r\n    ...\r\n}\r\n\r\n\r\npublic final class Looper {\r\n    ...\r\n    private static Looper sMainLooper; \r\n    \r\n    public static Looper getMainLooper() {\r\n        synchronized (Looper.class) {\r\n            return sMainLooper;\r\n        }\r\n    }\r\n    \r\n    public static void prepareMainLooper() {\r\n        prepare(false);\r\n        synchronized (Looper.class) {\r\n            if (sMainLooper != null) {\r\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\r\n            }\r\n            sMainLooper = myLooper();\r\n        }\r\n    }\r\n    \r\n    private static void prepare(boolean quitAllowed) {\r\n        if (sThreadLocal.get() != null) {\r\n            throw new RuntimeException(\"Only one Looper may be created per thread\");\r\n        }\r\n        sThreadLocal.set(new Looper(quitAllowed));\r\n    }\r\n    ...\r\n}\r\n\r\n\r\n```\r\n\r\n上面还贴了一段和 `getMain()` 相关的 `Looper` 的方法\r\n\r\n`getMain()` 就是用来获取引用了 **主线程Looper** 的 `Handler`,从这一段代码其实就可以看出，每个 `Handler` 对此方法未做限制，也就是说一个**主线程Looper**是可以对应多个 `Handler` 的\r\n\r\n然后是 `Looper` 中，关于`prepareMainLooper()`方法其实还有一段说明，上面没贴出来，意思是：\r\n> prepareMainLooper()用于初始化主线程的Looper，它是由系统调用的，所以作为开发者，你不应该调用这个方法(ps:那为什么不设置成private的呢，也许是为了方便系统调用？)\r\n\r\n再看一下 `prepare(boolean quitAllowed)` 方法，他是用于给当前线程设置 `Looper` 对象的。从这里就可以看出，一个线程只能有一个 `Looper` 对象，多了的话，就会报错啦！\r\n\r\n接下来，看一下比较常用的 `postXXXX(...)` 、`sendXXXX(...)`相关的方法,我们经常用它去进行通知操作。\r\n\r\n### postXXXX(...) && sendXXXX(...)\r\n\r\n\r\n```\r\n    ...\r\n    public final boolean post(Runnable r) {\r\n       return  sendMessageDelayed(getPostMessage(r), 0);\r\n    }\r\n    \r\n    public final boolean postAtTime(Runnable r, long uptimeMillis) {\r\n        return sendMessageAtTime(getPostMessage(r), uptimeMillis);\r\n    }\r\n    \r\n    public final boolean sendMessageDelayed(Message msg, long delayMillis) {\r\n        if (delayMillis < 0) { delayMillis = 0; }\r\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\r\n    }\r\n    \r\n    private static Message getPostMessage(Runnable r) {\r\n        Message m = Message.obtain();\r\n        m.callback = r;\r\n        return m;\r\n    }\r\n    \r\n    public final boolean sendMessage(Message msg) {\r\n        return sendMessageDelayed(msg, 0);\r\n    }\r\n    \r\n    public final boolean sendEmptyMessage(int what) {\r\n        return sendEmptyMessageDelayed(what, 0);\r\n    }\r\n    \r\n    public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {\r\n        Message msg = Message.obtain();\r\n        msg.what = what;\r\n        return sendMessageDelayed(msg, delayMillis);\r\n    }\r\n    \r\n    public final boolean sendMessageDelayed(Message msg, long delayMillis) {\r\n        if (delayMillis < 0) { delayMillis = 0; }\r\n        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\r\n    }\r\n    \r\n```\r\n\r\n`post` 传递的 `Runnable` 会被设置到 `Message` 中去, `send` 传递的 `waht` 也会被设置到 `Message` 中去，`Message.obtain()` 我们后面再看。\r\n\r\n这些方法最终都会走到 `sendMessageAtTime` 的方法中去，所以我们直接看这个吧\r\n\r\n### sendMessageAtTime(...)\r\n\r\n```\r\n    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {\r\n        MessageQueue queue = mQueue;\r\n        if (queue == null) {\r\n            RuntimeException e = new RuntimeException(\r\n                    this + \" sendMessageAtTime() called with no mQueue\");\r\n            Log.w(\"Looper\", e.getMessage(), e);\r\n            return false;\r\n        }\r\n        return enqueueMessage(queue, msg, uptimeMillis);\r\n    }\r\n```\r\n\r\n`sendMessageAtTime` 方法又会调用 `enqueueMessage`\r\n\r\n\r\n```\r\n    private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {\r\n        msg.target = this;\r\n        if (mAsynchronous) {\r\n            msg.setAsynchronous(true);\r\n        }\r\n        return queue.enqueueMessage(msg, uptimeMillis);\r\n    }\r\n```\r\n\r\n`Message` 中的 `target` 是一个 `Handler` 对象,从这个方法其实可以知道一个 `Message` 对应一个  `Handler` ，但是一个 `Handler` 可以对应多个 `Message` 。因为一个 `Handler` 可以 `post` 多次，但是一个 `Message` 只有一个  `target`\r\n\r\n上面的方法，就是向 `MessageQueue` 中插入一个 `Message`, 到这里Handler的部分大概就结束了。\r\n\r\n接下来, 我们对于 `MessageQueue` 和  `Message`  的分析就要开始啦\r\n\r\n我们先简单分析一下 `Message` 对象\r\n\r\n## Message\r\n\r\n\r\n```\r\npublic final class Message implements Parcelable {\r\n    ...\r\n    public int what;\r\n    public Object obj;\r\n    public long when;\r\n    Handler target;\r\n    Runnable callback;\r\n    Message next;\r\n    \r\n    public static final Object sPoolSync = new Object();\r\n    private static Message sPool;\r\n    private static int sPoolSize = 0;\r\n\r\n    private static final int MAX_POOL_SIZE = 50;\r\n    \r\n}\r\n```\r\n\r\n上面的 `sPoolSync` 的作用是实现 **对象锁**， 它分别在获取 `Message`对象的 `obtain()` 方法以及回收  `Message` 对象的 `recycleUnchecked()` 方法中使用到\r\n\r\n看到上面的 `next` 对象，熟悉的队列结构，所以 `Message` 其实是一个队列\r\n\r\n而 `sPool` 作为一个静态对象，再根据它的命名来看，初步判断它是一个维护多个 `Message` 的队列，最大长度是 **50** ，作用是复用 `Message` 吗？来看一看代码就知道了\r\n\r\n\r\n### obtain()\r\n\r\n\r\n```\r\n    public static Message obtain() {\r\n        synchronized (sPoolSync) {\r\n            if (sPool != null) {\r\n                Message m = sPool;\r\n                sPool = m.next;\r\n                m.next = null;\r\n                m.flags = 0; // clear in-use flag\r\n                sPoolSize--;\r\n                return m;\r\n            }\r\n        }\r\n        return new Message();\r\n    }\r\n```\r\n\r\n可以看到，上面的代码逻辑如下：\r\n- 当 `sPool` 不为空的时候，从 `sPool` 取出队列头对象，并返回这个对象\r\n- `sPool` 为空的话，就直接返回一个新的 `Message` 对象啦！\r\n\r\n我们之前在 `Handler` 中遇到过的各种 `post` 方法，使用的 `Message` 就是这样获得的\r\n\r\n`Message` 还剩下一个 `recycleUnchecked()` 方法需要了解一下，因为剩下的都比较简单，不需要进行分析了\r\n\r\n\r\n\r\n### recycleUnchecked()\r\n\r\n```\r\n    public void recycle() {\r\n        if (isInUse()) {\r\n            ...\r\n            return;\r\n        }\r\n        recycleUnchecked();\r\n    }\r\n    \r\n    void recycleUnchecked() {\r\n        flags = FLAG_IN_USE;\r\n        //这里进行各种置空、状态初始化操作\r\n        ...\r\n        synchronized (sPoolSync) {\r\n            if (sPoolSize < MAX_POOL_SIZE) {\r\n                next = sPool;\r\n                sPool = this;\r\n                sPoolSize++;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n可以看到，上面的回收操作，其实就是将这个 `Message` 对象 **进行还原**，然后放入 `sPool` 的队列头中，也就是说，我们之前对于 `sPool` 复用的猜想，是正确的。\r\n\r\n接下来，开始康康 `MessageQueue` 吧\r\n\r\n## MessageQueue\r\n\r\n\r\n### MessageQueue(boolean quitAllowed)\r\n先来看构造函数吧\r\n\r\n```\r\n    private final boolean mQuitAllowed;\r\n    private long mPtr;\r\n    \r\n    MessageQueue(boolean quitAllowed) {\r\n        mQuitAllowed = quitAllowed;\r\n        mPtr = nativeInit();\r\n    }\r\n    \r\n    private native static long nativeInit();\r\n```\r\n\r\n在之前，我们看 `Looper` 的 `prepare()` 和 `prepareMainLooper()` 方法中，都会创建一个新的 `Looper` 对象，我们看一下 `Looper` 的构造函数\r\n\r\n```\r\n    private Looper(boolean quitAllowed) {\r\n        mQueue = new MessageQueue(quitAllowed);\r\n        mThread = Thread.currentThread();\r\n    }\r\n```\r\n可以知道，`MessageQueue` 是在 `Looper` 创建的时候，一起创建的。\r\n\r\n同时， `prepareMainLooper()`中的 `quitAllowed` 是 **false**, 这表示，由 `主线程Looper` 创建的 `MessageQueue` 是不允许退出的。至于原因嘛，因为这个 `MessageQueue` 是和当前app共同生存的呀，退出了app也就结束了。具体的逻辑，再看后面的代码吧。\r\n\r\n关于 `mPtr` 对象的作用，因为涉及到 **native** 方法，所以它已经不是java层面的内容了，我查阅了一下\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/handler_sourcecode/001.jpg)\r\n\r\n是调用的 C++ 方法，并且从上面这个方法可以看出来，在 C++ 层面创建了另一个 `NativeMessageQueue` 对象，并且返回的内容看起来是可以用来和 `NativeMessageQueue` 对象进行关联的值\r\n\r\n`MessageQueue` 许多方法都是和 **native** 进行交互的，暂时先不管(主要是也管不了)，我们这里就先看一下之前在 `Handler` 中的 `enqueueMessage` 和 `removeMessages` 方法，它们都调用到了 `MessageQueue` 相对应的方法\r\n\r\n### enqueueMessage(Message msg, long when)\r\n\r\n\r\n```\r\n    boolean enqueueMessage(Message msg, long when) {\r\n        ...\r\n        ///target为空或者isInUse()的话就抛出异常\r\n        ...\r\n        synchronized (this) {\r\n            //如果正在退出，回收当前 msg，并返回false\r\n            ...\r\n            msg.markInUse();\r\n            msg.when = when;\r\n            Message p = mMessages;\r\n            boolean needWake;\r\n            if (p == null || when == 0 || when < p.when) {\r\n                // New head, wake up the event queue if blocked.\r\n                msg.next = p;\r\n                mMessages = msg;\r\n                needWake = mBlocked;\r\n            } else {\r\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\r\n                Message prev;\r\n                for (;;) {\r\n                    prev = p;\r\n                    p = p.next;\r\n                    if (p == null || when < p.when) {\r\n                        break;\r\n                    }\r\n                    if (needWake && p.isAsynchronous()) {\r\n                        needWake = false;\r\n                    }\r\n                }\r\n                msg.next = p; // invariant: p == prev.next\r\n                prev.next = msg;\r\n            }\r\n\r\n            // We can assume mPtr != 0 because mQuitting is false.\r\n            if (needWake) {\r\n                nativeWake(mPtr);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n```\r\n上面的代码中，可以把第一个 **if** 逻辑简单改一下，看起来更加清晰：\r\n\r\n```\r\n            ...\r\n            Message p = mMessages;\r\n            if (p == null || when == 0 || when < p.when) {\r\n                // New head, wake up the event queue if blocked.\r\n                msg.next = null;\r\n                mMessages = msg;\r\n                needWake = mBlocked;\r\n            } \r\n```\r\n可以看到， `MessageQueue` 中本身就存放了一个 `Message` 对象: `mMessages`\r\n\r\n所以第一个 **if** 的逻辑就是：\r\n- 当 `mMessages` 为 **null** 时，`mMessages` 队列设置成只有一个节点，这个节点就由插入的 `msg` 提供，并且如果此时 `event quene` 处于阻塞状态的话，就唤醒它\r\n\r\n接下来看 **else** 的逻辑：\r\n- 遍历 `mMessages` 队列，根据 `when` 的大小来决定插入的地方，`when` 越小越靠近队列头部。\r\n- 只有当`event quene` 头部阻塞了并且队列中存在很早添加的 **异步** `Message` 对象的时候才去唤醒\r\n\r\n然后是 `removeMessages(...)` 、`removeCallbacksAndMessages(...)`方法，也是遍历 `mMessages` 对  `Message` 对象进行删除。因为都调用到了 `Message` 对象的 `recycleUnchecked()` 方法，所以被 **remove** 掉的对象，会以初始状态存储在 `Message` 的 `sPool` 中方便复用\r\n\r\n `MessageQueue` 还有一个最为关键的方法 `next()`, 在分析这个方法之前, 我们先解决掉 `Looper`是如何分发 `Message` 的，一起来瞧一瞧\r\n\r\n## Looper\r\n\r\n\r\n```\r\npublic final class Looper {\r\n    ...\r\n    static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();\r\n    private static Looper sMainLooper;\r\n    final MessageQueue mQueue;\r\n    final Thread mThread;\r\n    \r\n    private Looper(boolean quitAllowed) {\r\n        mQueue = new MessageQueue(quitAllowed);\r\n        mThread = Thread.currentThread();\r\n    }\r\n    \r\n    public static void prepareMainLooper() {...}\r\n    \r\n    public static Looper getMainLooper() {...}\r\n    \r\n    public static void loop() {...}\r\n    \r\n}\r\n```\r\n除了 `loop()` 方法外，其他的部分在前面已经分析过了，这里直接开始看 `loop()` 吧\r\n\r\n### loop()\r\n\r\n\r\n```\r\n    public static void loop() {\r\n        final Looper me = myLooper();\r\n        if (me == null) {\r\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\r\n        }\r\n        final MessageQueue queue = me.mQueue;\r\n\r\n        // Make sure the identity of this thread is that of the local process,\r\n        // and keep track of what that identity token actually is.\r\n        Binder.clearCallingIdentity();\r\n        final long ident = Binder.clearCallingIdentity();\r\n\r\n        for (;;) {\r\n            Message msg = queue.next(); // might block\r\n            if (msg == null) {\r\n                // No message indicates that the message queue is quitting.\r\n                return;\r\n            }\r\n\r\n            ...\r\n            \r\n            try {\r\n                msg.target.dispatchMessage(msg);\r\n            } finally {\r\n                if (traceTag != 0) {\r\n                    Trace.traceEnd(traceTag);\r\n                }\r\n            }\r\n\r\n            ...\r\n\r\n            msg.recycleUnchecked();\r\n        }\r\n    }\r\n```\r\n\r\n上面选取的是 `loop()` 方法中,和 `Message` 相关的部分.\r\n\r\n可以看到, `loop()` 就是在一个**死循环**中,通过 `MessageQuene` 的 `next()` 方法来获取 `Message`, 然后调用这个 `Message` 持有的 `Handler` 对象的 `dispatchMessage(msg)` 方法来分发 `Message`. \r\n\r\n只有当 `queue.next()` 返回 **null** 的时候,循环才能停止\r\n\r\n关于 **Looper** 就到这里\r\n\r\n\r\n最后,我们再来看 `MessageQueue` 中最关键的一个方法: `next()`\r\n\r\n### MessageQueue -> next()\r\n\r\n`next()` 的逻辑操作比较多,其中还有一部分是关于 `IdelHandler` 的,这里就先不管他们,只看主要的部分\r\n\r\n\r\n```\r\n    Message next() {\r\n        //判断ptr值,为0的话,说明C++那里的NativeMessageQuene已经destory了,直接返回null\r\n        ...\r\n\r\n        int pendingIdleHandlerCount = -1; // -1 only during first iteration\r\n        int nextPollTimeoutMillis = 0;\r\n        for (;;) {\r\n            if (nextPollTimeoutMillis != 0) {\r\n                Binder.flushPendingCommands();\r\n            }\r\n\r\n            nativePollOnce(ptr, nextPollTimeoutMillis);\r\n\r\n            synchronized (this) {\r\n                // Try to retrieve the next message.  Return if found.\r\n                final long now = SystemClock.uptimeMillis();\r\n                Message prevMsg = null;\r\n                Message msg = mMessages;\r\n                if (msg != null && msg.target == null) {\r\n                    // Stalled by a barrier.  Find the next asynchronous message in the queue.\r\n                    do {\r\n                        prevMsg = msg;\r\n                        msg = msg.next;\r\n                    } while (msg != null && !msg.isAsynchronous());\r\n                }\r\n                if (msg != null) {\r\n                    if (now < msg.when) {\r\n                        // Next message is not ready.  Set a timeout to wake up when it is ready.\r\n                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\r\n                    } else {\r\n                        // Got a message.\r\n                        mBlocked = false;\r\n                        if (prevMsg != null) {\r\n                            prevMsg.next = msg.next;\r\n                        } else {\r\n                            mMessages = msg.next;\r\n                        }\r\n                        msg.next = null;\r\n                        if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\r\n                        msg.markInUse();\r\n                        return msg;\r\n                    }\r\n                } else {\r\n                    // No more messages.\r\n                    nextPollTimeoutMillis = -1;\r\n                }\r\n\r\n                // Process the quit message now that all pending messages have been handled.\r\n                if (mQuitting) {\r\n                    dispose();\r\n                    return null;\r\n                }\r\n                \r\n                ...\r\n                //IdelHandler相关操作\r\n                ...\r\n            }\r\n            \r\n            ...\r\n            //IdelHandler相关操作\r\n            ...\r\n\r\n            nextPollTimeoutMillis = 0;\r\n        }\r\n    }\r\n```\r\n\r\n来逐步分析一下上面的代码:\r\n\r\n`pendingIdleHandlerCount` 和 `IdleHandler` 有关,暂时不管\r\n\r\n`nextPollTimeoutMillis` 表示休眠时间,当还没有到达 `Message` 中 `when` 所指定的时间时, 会先去处理 `IdleHandler` ,此时没有 `IdleHandler` 可供处理的话,就会进入休眠时间,并在指定时间唤醒, 对应代码:\r\n\r\n```\r\nif (now < msg.when) {\r\n    // Next message is not ready.  Set a timeout to wake up when it is ready.\r\n    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\r\n} \r\n```\r\n\r\n我们接下来看第一个 **if** 的逻辑:\r\n- 如果 `msg.target` 为 **null**, 表示遇到了一个障碍,因为只有在 `Message` 回收的时候才会将 `target` 置空,所以这里我们需要寻找下一个 **异步的Message**\r\n\r\n然后开始看第二个 **if**:\r\n- 当 `msg` 不为 null时\r\n    - 如果 `now < msg.when`,说明未到这个msg的执行时间,设置休眠时间 `nextPollTimeoutMillis`,之后会去处理 `IdelHandler`,这个循环会持续下去,直到时间可以处理这个 `msg` 为止\r\n    - 否则,返回这个 `msg`,如果`prevMsg` 不为 **null** 的话,就说明这个 `msg` 是之前遇到障碍时,所找到的 **异步Message**; 不然就是常规的 `msg`\r\n- 否则,将 `nextPollTimeoutMillis` 设置为 -1. 此时,表明 `MessageQuene` 已经没有可以消耗的 `Message` 啦. **for** 循环会一直执行,此时就会进入阻塞状态啦.\r\n\r\n当进入阻塞状态的时候,就有很多问题了,比如:  \r\n\r\n**1.“UI线程为什么没有因此卡死?”**  \r\n**2.“没看见哪里有相关代码为这个死循环准备了一个新线程去运转？”**  \r\n**3.“Activity的生命周期这些方法这些都是在主线程里执行的吧，那这些生命周期方法是怎么实现在死循环体外能够执行起来的？”**  \r\n**4.“什么时候会退出阻塞?”**  \r\n\r\n下面,对于这些问题来进行解释(此处Google了不少):\r\n\r\n#### 1.UI线程为什么没有因此卡死?\r\n\r\n这里涉及**线程**，先说说说**进程/线程**.\r\n\r\n**进程**：每个app运行时前首先创建一个进程，该进程是由Zygote fork出来的，用于承载App上运行的各种Activity/Service等组件。进程对于上层应用来说是完全透明的，这也是google有意为之，让App程序都是运行在Android Runtime。大多数情况一个App就运行在一个进程中，除非在AndroidManifest.xml中配置Android:process属性，或通过native代码fork进程。\r\n\r\n**线程**：线程对应用来说非常常见，比如每次new Thread().start都会创建一个新的线程。该线程与App所在进程之间资源共享，从Linux角度来说进程与线程除了是否共享资源外，并没有本质的区别，都是一个task_struct结构体，**在CPU看来进程或线程无非就是一段可执行的代码**，CPU采用CFS调度算法，保证每个task都尽可能公平的享有CPU时间片。\r\n\r\n有了这些准备，再说说**死循环**问题：\r\n\r\n对于线程既然是一段可执行的代码，当可执行代码执行完成后，线程生命周期便该终止了，线程退出。而对于主线程，我们是绝不希望会被运行一段时间，自己就退出，那么如何保证能一直存活呢？简单做法就是可执行代码是能一直执行下去的，**死循环便能保证不会被退出**，例如，binder线程也是采用死循环的方法，通过循环方式不同与Binder驱动进行读写操作，当然并非简单地死循环，无消息时会休眠。\r\n\r\n真正会卡死主线程的操作是在回调方法onCreate/onStart/onResume等操作时间过长，会导致掉帧，甚至发生ANR，looper.loop本身不会导致应用卡死。\r\n\r\n但这里可能又引发了另一个问题，既然是死循环又如何去处理其他事务呢？通过创建新线程的方式。\r\n\r\n#### 2.没看见哪里有相关代码为这个死循环准备了一个新线程去运转？\r\n\r\n事实上，会在进入死循环之前便创建了新 `Binder` 线程，在代码 `ActivityThread.main()` 中：\r\n\r\n\r\n```\r\npublic static void main(String[] args) { \r\n      .... \r\n      //创建Looper和MessageQueue对象，用于处理主线程的消息 \r\n      Looper.prepareMainLooper(); \r\n      //创建ActivityThread对象 \r\n      ActivityThread thread = new ActivityThread(); \r\n      //建立Binder通道 (创建新线程) \r\n      thread.attach(false); \r\n      Looper.loop(); //消息循环运行\r\n      throw new RuntimeException(\"Main thread loop unexpectedly exited\"); \r\n}\r\n```\r\n`thread.attach(false)` 便会创建一个 `Binder` 线程（具体是指 `ApplicationThread` ，`Binder` 的服务端，用于接收系统服务**AMS**发送来的事件），该 `Binder` 线程通过 `Handler` 将 `Message` 发送给主线程,具体过程可查看 [startService流程分析](http://gityuan.com/2016/03/06/start-service/)\r\n\r\n另外，`ActivityThread` 实际上并非线程，不像 `HandlerThread` 类，`ActivityThread` 并没有真正继承 `Thread` 类，只是往往运行在主线程，给人以线程的感觉，其实承载 `ActivityThread` 的主线程就是由 **Zygote fork** 而创建的进程。\r\n\r\n主线程的死循环一直运行是不是特别消耗CPU资源呢？ 其实不然，这里就涉及到 **Linux pipe/epoll** 机制，简单说就是在主线程的 `MessageQueue` 没有消息时，便阻塞在 `Looper` 的 `queue.next()` 中的 `nativePollOnce()` 方法里，此时主线程会释放CPU资源进入休眠状态，直到下个消息到达或者有事务发生，通过往 **pipe管道** 写端写入数据来唤醒主线程工作,也就是 `MessageQueue` 中 `enqueueMessage(...)` 方法被调用时, `Message` 被添加到空的队列中触发的 `nativeWake(mPtr)` 方法。\r\n\r\n这里采用的 **epoll机制**，是一种IO多路复用机制，可以同时监控多个描述符，当某个描述符就绪(读或写就绪)，则立刻通知相应程序进行读或写操作，本质同步I/O，即读写是阻塞的。 所以说，主线程大多数时候都是处于休眠状态，并不会消耗大量CPU资源。\r\n\r\n#### 3.Activity的生命周期是怎么实现在死循环体外能够执行起来的？\r\n\r\n`ActivityThread` 的内部类 `H` 继承于 `Handler`，通过 `Handler` 消息机制，简单说 `Handler` 机制用于同一个进程的线程间通信。\r\n\r\n`Activity` 的生命周期都是依靠主线程的 `Looper.loop()` ，当收到不同 `Message` 时则采用相应措施：\r\n\r\n在 `H.handleMessage(msg)` 方法中，根据接收到不同的 `msg`，执行相应的生命周期。\r\n\r\n比如收到 `msg.what=H.LAUNCH_ACTIVITY`，则调用 `ActivityThread.handleLaunchActivity()` 方法，最终会通过反射机制，创建 `Activity` 实例，然后再执行 `Activity.onCreate()` 等方法；\r\n\r\n再比如收到 `msg.what=H.PAUSE_ACTIVITY`，则调用 `ActivityThread.handlePauseActivity()` 方法，最终会执行 `Activity.onPause()` 等方法。 上述过程，只挑核心逻辑讲，真正该过程远比这复杂。\r\n\r\n**主线程的消息又是哪来的呢?** 当然是App进程中的其他线程通过Handler发送给主线程，请看接下来的内容：\r\n\r\n最后，从进程与线程间通信的角度，通过一张图加深大家对App运行过程的理解：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/handler_sourcecode/002.jpg)\r\n\r\n**system_server进程是系统进程**，java framework框架的核心载体，里面运行了大量的系统服务，比如这里提供ApplicationThreadProxy（简称ATP），ActivityManagerService（简称AMS），这个两个服务都运行在system_server进程的不同线程中，由于ATP和AMS都是基于IBinder接口，都是binder线程，binder线程的创建与销毁都是由binder驱动来决定的。\r\n\r\n**App进程则是我们常说的应用程序**，主线程主要负责Activity/Service等组件的生命周期以及UI相关操作都运行在这个线程； 另外，每个App进程中至少会有两个binder线程 ApplicationThread(简称AT)和ActivityManagerProxy（简称AMP），除了图中画的线程，其中还有很多线程，比如signal catcher线程等，这里就不一一列举。\r\n\r\nBinder用于不同进程之间通信，由一个进程的Binder客户端向另一个进程的服务端发送事务，比如图中线程2向线程4发送事务；而handler用于同一个进程中不同线程的通信，比如图中线程4向主线程发送消息。\r\n\r\n**结合图说说Activity生命周期，比如暂停Activity**，流程如下：\r\n\r\n- 1.线程1的AMS中调用线程2的ATP；（由于同一个进程的线程间资源共享，可以相互直接调用，但需要注意多线程并发问题）\r\n- 2.线程2通过binder传输到App进程的线程4；\r\n- 3.线程4通过handler消息机制，将暂停Activity的消息发送给主线程；\r\n- 4.主线程在looper.loop()中循环遍历消息，当收到暂停Activity的消息时，便将消息分发给ActivityThread.H.handleMessage()方法，再经过方法的调用，最后便会调用到Activity.onPause()，当onPause()处理完后，继续循环loop下去。\r\n \r\n# 总结\r\n\r\n\r\n回顾一下之前的 `Handler` 流程，总结一下就是：\r\n\r\n- 创建 `Handler` : 因为 `Handler` 需要获取当前线程的 `Looper` ，如果不是在主线程创建，则需要先调用 `Looper.prepare()` 给当前线程创建一个 `Looper`\r\n-  `Looper` 初始化 : 一个 `Looper` 在创建的同时，也会创建一个 `MessageQuene` 与之对应\r\n- 发送 `Message` : `Handler` 调用 `postXXX` 方法，会通过 `Looper` 进入到 `MessageQuene` 的 `enqueueMessage(...)` 方法。这个方法会在 `MessageQuene` 中维护的 `Message` 队列插入 `Message`，插入顺序根据  `Message` 的 `when` 来决定\r\n- 复用 `Message` : `Message` 中存在一个静态变量 `sPool` ,它用于复用  `Message` ，每当 `MessageQuene` 中的 `Message` 被回收掉时，就会调用 `Message` 对象的 `recycleUnchecked()` 方法， `sPool` 就会新增一个节点。它的最大长度是50。而 `Handler` 调用 `postXXX` 相关方法时候，传递给 `MessageQuene` 的 `Message` 就是从这里复用的，没有可复用的对象时候，会创建新的 `Message` \r\n- 进入循环：通过 `Looper` 的 `loop()` 方法，会一直调用 `MessageQuene` 的 `next()` 方法来获取 `Message`，并通过这个  `Message` 中的 `Handler`对象 `target` 的 `dispatchMessage()` 方法，来进行事件的分发\r\n- 事件分发：有三个优先级分别处理 `msg` 对象：\r\n    - 如果 `msg` 的 `Runnable` 对象存在，交给它处理，否则下一步\r\n    - 如果 `Handler` 的 `CallBack` 对象存在，调用 `CallBack`的 `handleMessage(msg)` 方法 ，返回 **true** 的话结束，否则继续下一步\r\n    - 交给 `Handler` 的  `handleMessage(msg)` 方法\r\n- 循环结束 : `Looper` 通过 `quit()` 方法结束循环，不过主线程的 `Looper` 是无法退出的，具体原因上面已经说明\r\n\r\n\r\n那么，关于 `Handler` 相关源码就到此结束了！","834d753e":"---\r\ntitle: HashMap源码分析\r\ndate: 2020-03-10 23:49:47\r\nindex_img: /img/hashmap.png\r\ntags: 源码系列\r\n---\r\n\r\n\r\n# 序\r\n\r\n我到底为什么要分析HashMap的源码呢？\r\n\r\n这天是2020年3月9日，进行了一场视频面试，其中面试官问我HashMap结构是什么，因为没看过源码，所以确实不知道。\r\n\r\n正好，最近断断续续也刷了不少leecode，对于数据结构方面精进了一些，看看源码好像感觉也还蛮舒服的。于是，就开始看啦！\r\n\r\n\r\n# 引子\r\n\r\n先进入 `HashMap` 的类康一康吧\r\n\r\n\r\n```\r\npublic class HashMap<K,V> extends AbstractMap<K,V>\r\n    implements Map<K,V>, Cloneable, Serializable{\r\n        ...\r\n    }\r\n```\r\n\r\n让我们一步步来\r\n\r\n可以看到 `HashMap` 继承于一个抽象类 `AbstractMap<K,V>`\r\n\r\n进去看一下 `AbstractMap<K,V>` 的内容吧\r\n\r\n\r\n# 分析\r\n\r\n\r\n\r\n### AbstractMap<K,V>\r\n\r\n我将这个抽象类的代码简化一下：\r\n\r\n\r\n```\r\npublic abstract class AbstractMap<K,V> implements Map<K,V>{\r\n    public abstract Set<Entry<K,V>> entrySet();\r\n    \r\n    \r\n    public boolean containsValue(Object value) {...}\r\n    \r\n    public boolean containsKey(Object value){...}\r\n    \r\n    public V get(Object key) {...}\r\n    \r\n    public V put(K key, V value) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n    \r\n    public boolean equals(Object o) {...}\r\n    \r\n    public int hashCode() {...}\r\n    \r\n}\r\n```\r\n\r\n上面的这些方法，就是我们日常使用中，最主要的一些方法。我们简单的看其中几个\r\n\r\n#### containsValue(Object value)\r\n\r\n\r\n```\r\n    public boolean containsValue(Object value) {\r\n        Iterator<Entry<K,V>> i = entrySet().iterator();\r\n        if (value==null) {\r\n            while (i.hasNext()) {\r\n                Entry<K,V> e = i.next();\r\n                if (e.getValue()==null)\r\n                    return true;\r\n            }\r\n        } else {\r\n            while (i.hasNext()) {\r\n                Entry<K,V> e = i.next();\r\n                if (value.equals(e.getValue()))\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n```\r\n\r\n`containsValue(Object value)` 用于判断是否包含这个对象，就是遍历 `Set<Entry<K,V>>` 去进行对比，其中也有对值为 `null` 的判断，这说明，`AbstractMap` 中，值是可以为  `null` 的\r\n\r\n#### get(Object key)\r\n\r\n\r\n```\r\n    public V get(Object key) {\r\n        Iterator<Entry<K,V>> i = entrySet().iterator();\r\n        if (key==null) {\r\n            while (i.hasNext()) {\r\n                Entry<K,V> e = i.next();\r\n                if (e.getKey()==null)\r\n                    return e.getValue();\r\n            }\r\n        } else {\r\n            while (i.hasNext()) {\r\n                Entry<K,V> e = i.next();\r\n                if (key.equals(e.getKey()))\r\n                    return e.getValue();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n```\r\n和 `containsValue(Object value)` 差不多，也是通过遍历。可以看出，`key` 也是可以为 `null` 的\r\n\r\n\r\n看了上面两个，明显发现有点不对劲了？\r\n\r\n因为 `HashMap` 的 `containsKey` 和 `get` 的时间复杂度不应该是 **O(1)** 吗？上面用到了遍历的话，时间复杂度就是 **O(n)** 了\r\n\r\n显然，这样是8对的！因为这些方法都不是抽象方法，所以作为 `AbstractMap` 的子类， `HashMap` 一定是自己实现了这些方法。接下来，我们看一看 `HashMap`\r\n\r\n不过，在此之前，我们需要看一下上面比较关键的 `Entry<K,V>` 究竟是个什么东西\r\n\r\n### Entry<K,V>\r\n\r\n\r\n```\r\n    interface Entry<K, V> {\r\n        K getKey();\r\n        \r\n        V getValue();\r\n        \r\n        V setValue(V value);\r\n        \r\n        boolean equals(Object o);\r\n        \r\n        int hashCode();\r\n        \r\n        public static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K, V>> comparingByKey() {...}\r\n        \r\n        public static <K extends Comparable<? super K>, V> Comparator<Map.Entry<K, V>> comparingByValue() {...}\r\n        ...\r\n    }\r\n    \r\n```\r\n\r\n可以看到  `Entry<K,V>` 是一个实现了一些基础操作的接口，而在 `HashMap` 中，由`Node` 对象实现了这个接口\r\n\r\n\r\n\r\n### Node<K,V>\r\n\r\n主要看其中的某些方法\r\n\r\n```\r\nstatic class Node<K,V> implements Map.Entry<K,V>{\r\n        final int hash;\r\n        final K key;\r\n        V value;\r\n        Node<K,V> next;\r\n        \r\n        ...\r\n        public final int hashCode() {\r\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\r\n        }\r\n\r\n\r\n        public final boolean equals(Object o) {\r\n            if (o == this)\r\n                return true;\r\n            if (o instanceof Map.Entry) {\r\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\r\n                if (Objects.equals(key, e.getKey()) &&\r\n                    Objects.equals(value, e.getValue()))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n}\r\n```\r\n\r\n因为每个 **Node** 还存储了一个 `Node<K,V> next` 对象，所以 **Node** 其实就是链表结构\r\n\r\n`hashCode()` 这个方法，结合了 `key` 与 `value`，至于 `Objects.hashCode(key)` 的具体逻辑，主要是调用 `identityHashCode(Object obj)` 根据内存地址来得出 **hasCode** ，这里就不展示了\r\n\r\n\r\n接下来把目光放到  `HashMap` 上来吧\r\n\r\n\r\n### HashMap\r\n\r\n简化代码入下：\r\n\r\n\r\n```\r\npublic class HashMap<K,V> extends AbstractMap<K,V>implements Map<K,V>, Cloneable, Serializable{\r\n    \r\n    transient Node<K,V>[] table;\r\n    \r\n    transient Set<Map.Entry<K,V>> entrySet;\r\n    \r\n    transient int size;\r\n    \r\n    final void putMapEntries(Map<? extends K, ? extends V> m, boolean evict){...}\r\n    \r\n    public V get(Object key) {...}\r\n    \r\n    final Node<K,V> getNode(int hash, Object key) {...}\r\n    \r\n    public boolean containsKey(Object key) { return getNode(hash(key), key) != null; }\r\n    \r\n    public V put(K key, V value) {\r\n        return putVal(hash(key), key, value, false, true);\r\n    }\r\n    \r\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) {...}\r\n    \r\n    public boolean containsValue(Object value) {...}\r\n    \r\n}\r\n```\r\n\r\n\r\n有了上面的一些铺垫，我们直接从 `put(...)` 方法开看\r\n\r\n可以看到 `put` 调用的是 `putVal`\r\n\r\n#### putVal(...)\r\n\r\n看一看 `putVal` 的详细内容\r\n\r\n\r\n```\r\n\r\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\r\n                   boolean evict) {\r\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\r\n        if ((tab = table) == null || (n = tab.length) == 0)\r\n            n = (tab = resize()).length;\r\n        if ((p = tab[i = (n - 1) & hash]) == null)\r\n            tab[i] = newNode(hash, key, value, null);\r\n        else {\r\n            Node<K,V> e; K k;\r\n            if (p.hash == hash &&\r\n                ((k = p.key) == key || (key != null && key.equals(k))))\r\n                e = p;\r\n            else if (p instanceof TreeNode)\r\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\r\n            else {\r\n                for (int binCount = 0; ; ++binCount) {\r\n                    if ((e = p.next) == null) {\r\n                        p.next = newNode(hash, key, value, null);\r\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\r\n                            treeifyBin(tab, hash);\r\n                        break;\r\n                    }\r\n                    if (e.hash == hash &&\r\n                        ((k = e.key) == key || (key != null && key.equals(k))))\r\n                        break;\r\n                    p = e;\r\n                }\r\n            }\r\n            if (e != null) { // existing mapping for key\r\n                V oldValue = e.value;\r\n                if (!onlyIfAbsent || oldValue == null)\r\n                    e.value = value;\r\n                afterNodeAccess(e);\r\n                return oldValue;\r\n            }\r\n        }\r\n        ++modCount;\r\n        if (++size > threshold)\r\n            resize();\r\n        afterNodeInsertion(evict);\r\n        return null;\r\n    }\r\n```\r\n\r\n先看第一段\r\n\r\n```\r\nif ((tab = table) == null || (n = tab.length) == 0)\r\n            n = (tab = resize()).length;\r\n```\r\n\r\n这里表示当 **tab** 为 **null** 或者没有内容的时候，对 **tab** 进行初始化\r\n\r\n初始化的关键代码就是 `resize()` 方法了，看一下 `resize()` \r\n\r\n##### resize()\r\n\r\n```\r\n    final Node<K,V>[] resize() {\r\n    ...\r\n    //判断数组是否初始化过，没有初始化就初始化，否则扩容\r\n    ...\r\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\r\n        table = newTab;\r\n        if (oldTab != null) {\r\n            for (int j = 0; j < oldCap; ++j) {\r\n                Node<K,V> e;\r\n                if ((e = oldTab[j]) != null) {\r\n                    oldTab[j] = null;\r\n                    if (e.next == null)\r\n                        newTab[e.hash & (newCap - 1)] = e;\r\n                    else if (e instanceof TreeNode)\r\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\r\n                    else { // preserve order\r\n                        Node<K,V> loHead = null, loTail = null;\r\n                        Node<K,V> hiHead = null, hiTail = null;\r\n                        Node<K,V> next;\r\n                        do {\r\n                            next = e.next;\r\n                            ...\r\n                        } while ((e = next) != null);\r\n                        if (loTail != null) {\r\n                            loTail.next = null;\r\n                            newTab[j] = loHead;\r\n                        }\r\n                        if (hiTail != null) {\r\n                            hiTail.next = null;\r\n                            newTab[j + oldCap] = hiHead;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return newTab;\r\n    }\r\n```\r\nresize()的作用有两个，分别是 **初始化table** 或者 **给table扩容**\r\n\r\n上面的逻辑主要分为两段：\r\n\r\n- 前面省略号中的逻辑如下:\r\n\r\n     >具体就是：如果数组为空，用默认值16去初始化。  \r\n     否则，数组扩容一倍。这里还涉及到另一个参数：threshold，它表示数组扩容的阙值。每当数组元素到达阙值时，就说明数组需要扩容了，threshold每次也扩大一倍，初始的threshold数值为 16*0.75\r\n    \r\n\r\n- 后一段代码逻辑如下:\r\n    > 如果旧的table数组不为空，则需要遍历它，并放入新的table中去，也就是进行扩容。其中，元素在数组中存放的索引，是根据哈希算法来生成的\r\n\r\n哈希算法看起来比较奇幻：`newTab[e.hash & (newCap - 1)] = e`\r\n\r\n因为新数组的长度就是 **newCap** ，每次数组都扩容一倍，所以**newCap**一定是2的次幂数 。不过上面这个代码到底是如何运作的呢？我还不是太清楚原理，但是我作了一个实验\r\n\r\n\r\n```\r\n    @Test\r\n    public void test() {\r\n        int newCap = 1 << 4;//16\r\n        int[] newTab = (int[])new int[newCap];\r\n        for(int i = 0; i < 8; i++){\r\n            Object o = i;\r\n            newTab[o.hashCode() & (newCap - 1)] = i;\r\n        }\r\n        System.out.println(Arrays.toString(newTab));\r\n    }\r\n```\r\n\r\n上面这段代码打印内容如下：\r\n\r\n```\r\n[0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]\r\n```\r\n看起来非常的神奇。不过这里就暂时先不去管这个算法的原理了。\r\n\r\n我们还注意到一段代码：\r\n\r\n```\r\nelse if (e instanceof TreeNode)\r\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\r\n```\r\n\r\n这里又引入了一个新的概念： **TreeNode** ，不过暂时我们还不需要管它，继续看 `putVal(...)` 方法后面的内容吧\r\n\r\n大概逻辑如下：\r\n\r\n> 如果 put 时，数组对应index的Node为null，则创建一个新的放进去  \r\n如果Node不为null，则通过 hash 值、key来进行对比  \r\n如果对比值相同的话，用新Node替换旧Node  \r\n不相同的话(哈希冲突)，遍历旧Node，将新Node存放在旧Node的尾部  \r\n如果Node节点数量超过8个了的话，通过treeifyBin()将Node转换为TreeNode\r\n\r\n上面看到的 `TreeNode` 对象，其实就是 **红黑树**\r\n\r\n关于 `putValue` 的分析就到这里，接下来是 `get(Object key)` 方法\r\n\r\n\r\n```\r\n    public V get(Object key) {\r\n        Node<K,V> e;\r\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\r\n    }\r\n```\r\n\r\n直接来看 `getNode(...)` 吧\r\n\r\n#### getNode(...)\r\n\r\n\r\n```\r\n    final Node<K,V> getNode(int hash, Object key) {\r\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\r\n        if ((tab = table) != null && (n = tab.length) > 0 &&\r\n            (first = tab[(n - 1) & hash]) != null) {\r\n            if (first.hash == hash && // always check first node\r\n                ((k = first.key) == key || (key != null && key.equals(k))))\r\n                return first;\r\n            if ((e = first.next) != null) {\r\n                if (first instanceof TreeNode)\r\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\r\n                do {\r\n                    if (e.hash == hash &&\r\n                        ((k = e.key) == key || (key != null && key.equals(k))))\r\n                        return e;\r\n                } while ((e = e.next) != null);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n```\r\n\r\n上面的逻辑很清晰，先是通过 `(n - 1) & hash` 来获得 `key` 在 `table` 数组中对应的 **index**   \r\n如果该 `index` 对应的 **Node** 为空，则说明不存在该元素，返回null  \r\n如果不为空，且 `hash` 值与 `key` 值都相同则返回该 **Node** 的值，hash不同的话，遍历链表找到相同的返回，否则返回null\r\n\r\n\r\n\r\n到这里 **HashMap** 的源码就分析完成啦，关于 **TreeNode** ，后面有机会再介绍吧！\r\n\r\n\r\n# 总结\r\n\r\n关于 `HashMap` 的总结，大致如下\r\n\r\n- 数据结构：由 **数组** + **链表** 组成，链表就是 `Node<K,V>` 对象，通过 **哈希算法** 将 `Node<K,V>` 在数组中的索引与 `Key` 相关联，因为这个算法，在数组中 **put** 和 **get** 的耗时都是 **O(1)**\r\n- 数组扩容：因为是通过数组存储的 `Node<K,V>` 对象，我们知道，数组的长度是无法改变的，所以这里会因为 **put** 到了一定数量后就需要创建更大的新数组。\r\n- 扩容规则：初始的数组长度为 **16**, 扩容**阙值**为 `16 * 0.75` = **12**, 之后每当数组中元素数量到达**阙值**时，就会对数组进行扩容。数组长度每次增加一倍，**阙值**也增加一倍\r\n- 哈希冲突：其实可以很明显的想到，如果只需要存键值对的话，为什么还需要将 `Node<K,V>` 链表放在数组里，直接放一个普通的对象不就可以了吗，比如 `class Obj<K,V>{var key: K, var value: V}` ，那为什么不这样呢？还是因为 **哈希算法** 可能导致的 **哈希冲突** 问题。也就是说可能存在 **hash(Key1) == hash(Key2)** 的情况，这时候就需要用到链表了，将有冲突的对象添加到链表里。看过源码也知道，当这个链表的长度超过 **8** 时，链表会转换成 **红黑树**，即 **Node<K,V>** 变成 **TreeNode<K,V>**\r\n\r\n\r\n那么 `HashMap` 的源码就分析就暂时结束啦！\r\n\r\n\r\n","f6ee0cc6":"---\r\ntitle: Kotlin笔记(二):基础篇plus\r\ndate: 2018-10-01 21:49:47\r\nindex_img: /img/kotlin_2.png\r\ntags: Kotlin\r\n---\r\n\r\n### 1.顶层函数和属性\r\n\r\n在Kotlin中，可以把那些工具类里的函数直接放到代码文件的顶层，不用从属于任何的类。这些放在文件顶层的函数依然是包内的成员，如果你需要从包外访问它，则需要import，但不再需要额外包一层\r\n\r\n\r\n### 2.给别人的类添加方法：扩展函数和属性\r\n\r\n扩展函数非常简单，它就是一个类的成员函数，不过定义在类的外面。举个例子：\r\n\r\n```\r\npackage strings \r\nfun String.lastChar(): Char = this.get(this.length - 1) //this可以省略\r\n```\r\n从某种意义上说，你已经为String类添加了自己的方法。即使字符串不是代码的一部分，也没有类的源代码，你仍然可以在自己的项目中根据需要去扩展方法。\r\n\r\n> 注意，扩展函数并不允许你打破它的封装性。和在类内部定义的方法不同的是，扩展函数不能访私有的或者是受保护的成员。 \r\n>    \r\n> 对于你定义的一个扩展函数，它不会自动地在整个目范围内生效。相反，如果你要使用它，需要进行导入\r\n>      \r\n> 扩展函数并不存在重写，因为Kotiin会把它们当作静态函数对待\r\n\r\n\r\n下面是声明一个扩展属性：\r\n\r\n```\r\nval String.lastChar: Char get() = get(length - 1) \r\n```\r\n\r\n可以看到，和扩展函数一样，扩展属性也像接收者的一个普通的成员属性一样。这里，必须定义getter函数，因为没有支持字段，因此没有默认getter的实现。同理，初始化也不可以：因为没有地方存储初始值。\r\n\r\n    注意，当你需要从Java中访问扩展属性的时候，应该显式地调用它的getter函数\r\n    \r\n    \r\n### 3.可变参数：让函数支持任意数量的参数\r\n\r\n当你在调用一个函数来创建列表的时候，可以传递任意个数的参数给它：\r\n\r\n```\r\nval list= list0f(2, 3, 5, 7, 11) \r\n```\r\nKotlin的可变参数与Java类似，但语法略有不同：Kotlin在该类型之后不会再使用三个点，而是在参数上使用vararg修饰符。\r\n\r\nKotlin和Java 之间的另一个区别是，当需要传递的参数己经包装在数组中时，调用该函数的语法。在Java中，可以按原样传递数组，而Kotlin 则要求你显式地解包数组，以便每个数组元素在函数中能作为单独的参数来调用。从技术的角度来讲，这个功能被称为展开运算符，而使用的时候，不过是在对应的参数前面放一个*：\r\n\r\n```\r\nfun main(args: Array<String>）{\r\nval list = listOf(\"args:”,*args) \r\nprintln(list) \r\n}\r\n\r\n```\r\n\r\n\r\n### 4.键值对的处理：中缀调用和解构声明\r\n\r\n可以使用 mapOf 函数来创建 map:\r\n\r\n```\r\nval map= mapOf(l to \"one\"， 7 to \"seven\"， 53 to \"fifty-three\")\r\n```\r\n这行代码中的单词to不是内置的结构，而是一种特殊的函数调用，被称为中缀调用。 \r\n\r\n在中缀调用中，没有添加额外的分隔符，函数名称是直接放在目标对象名称和 参数之间的。以下两种调用方式是等价的：\r\n\r\n\r\n```\r\n1.to(\"one\")\r\n1 to \"one\"\r\n```\r\n\r\n中缀调用可以与只有一个参数的函数一起使用，无论是普通的函数还是扩展函 数。要允许使用中缀符号调用函数，需要使用 infix 修饰符来标记它。下面是一个 简单的 to 函数的声明：\r\n\r\n\r\n```\r\ninfix fun Any.to(other: Any) = Pair(this, other)\r\n```\r\n\r\nto 函数是一个扩展函数，可以创建一对任何元素，这意味着它是泛型接收者的 扩展：可以使用 1 to \"one\" 、\"one\" to 1、list to list.size()等写法。 \r\n\r\n\r\n\r\n### 5.让你的代码更整洁：局部函数和扩展\r\n\r\nKotlin可以在函数中嵌套类中提取的函数。这样，既可以获得所需的结构，也无须额外的语法开销。\r\n\r\n举个栗子：\r\n\r\n```\r\nclass User(val id: Int, val name: String, val address: String) \r\n\r\nfun saveUser(user : User){\r\n    if(user.name.isEmpty()){\r\n        ...\r\n    }\r\n    if(user.address.isEmpty()){\r\n        ...\r\n    }\r\n    //保存...\r\n}\r\n```\r\n如果将验证代码放到局部函数中，可以摆脱重复，并保持清晰的代码结构，可以这样做 ：\r\n\r\n\r\n```\r\nclass User(val id: Int, val name: String, val address: String) \r\n\r\nfun saveUser(user : User){\r\n    fun validate(user: User, value: String, fieldName: String){\r\n        if(value.isEmpty()){\r\n            ...\r\n        }\r\n    }\r\n    \r\n    validate (user, user.name, \"Name\")\r\n    validate (user, user.address, \"Address\")\r\n    //保存...\r\n    \r\n}\r\n```\r\n\r\n上面的代码看起来好多了，而且局部函数可以访问所在函数中的所有参数和变量。 我们可以利用这一点，去掉冗余的User参数，这里就不再演示了\r\n\r\n我们可以继续改进，把验证逻辑放到 User 类的扩展函数中。\r\n\r\n```\r\nclass User(val id: Int, val name: String, val address: String) \r\n\r\nfun User.validateBeforeSave(){\r\n    fun validate(value: String, fieldName: String){\r\n        if(value.isEmpty()){\r\n            ...\r\n        }\r\n    }\r\n    \r\n    validate (user.name, \"Name\")\r\n    validate (user.address, \"Address\")\r\n}\r\n\r\n\r\nfun saveUser(user : User){\r\n    user.validateBeforeSave()\r\n    //保存...\r\n}\r\n```\r\n\r\n**小结：**\r\n\r\n- Kotlin没有定义自己的集合类，而是在Java集合类的基础上提供了更丰富的API。\r\n\r\n- Kotlin可以给函数参数定义默认值，这样大大降低了重载函数的必要性，而且命名参数让多参数函数的调用更加易读。\r\n\r\n- Kotlin允许更灵活的代码结构：函数和属性都可以直接在文件中声明，而不仅仅是在类中作为成员。\r\n\r\n- Kotlin可以用扩展函数和属性来扩展任何类的API，包括在外部库中定义的类，而不需要修改其源代码，也没有运行时开销。 \r\n\r\n- 中缀调用提供了处理单个参数的，类似调用运算符方法的简明语法。\r\n\r\n- Kotlin为普通字符串和正则表达式都提供了大量的方便字符串处理的函数。 \r\n\r\n- 三重引号的字符串提供了一种简洁的方式，解决了原本在Java中需要进行大量啰嗦的转义和宇符串连接的问题。\r\n\r\n- 局部函数帮助你保持代码整洁的同时，避免重复。\r\n\r\n\r\n\r\n","c40c7f03":"---\r\ntitle: Kotlin笔记(一):基础篇\r\ndate: 2018-09-30 21:49:47\r\nindex_img: /img/kotlin_1.png\r\ntags: Kotlin\r\n---\r\n\r\n>  在2017年的Google开发者大会上，Kotlin正式作为Android的官方开发语言闪亮登场。而现在已经到了2018年的下半年末，身为一名Android开发者，如果不会一点Kotlin，总感觉少了什么。  \r\n>   \r\n> 于是乎，我准备动手学一学这门“年轻”的新语言了。不过新学一些东西往往会因为知识的消化需要时间而导致知识接收的效率不高，所以这时候好记性不如烂笔头的优势才得以体现嘛！  \r\n> \r\n> 所以，初学阶段，我还是准备记一记笔记，这样也许会对我学这门语言有所帮助吧？!\r\n\r\n\r\n关于Kotlin的官方文档，地址如下：\r\n\r\n[Kotlin学习](https://www.kotlincn.net/docs/reference/)\r\n<!--more--> \r\n\r\n### 1.在 Kotlin 中，if是表达式，而不是语句。\r\n\r\n 语句和表达式的区别在于，表达式有值，并且能作为另一个表达式的一部分使用；而语句总是包围着它的代码块中的顶层元素，并且没有自己的值。\r\n- 在Java中，所有的控制结构都是语句。而在Kotlin中，除了循环（ for, do 和 do/while ）以外大多数控制结构都是 表达式。\r\n这种结合控制结构和其他表达式的能力让你可以简明扼要地表示许多 常见的模式，稍后你会在本书中看到这些内容。\r\n- 另一方面，Java中的赋值操作是表达式，在Kotlin中反而变成了语句。这有助于避免比较和赋值之间的混淆，而这种混淆是常见的错误来源。\r\n\r\n\r\n### 2.声明变量的关键字有两个 ：\r\n\r\n- val （来自 value） 一一不可变引用。使用 val 声明的变量不能在初始化之 后再次赋值。它对应的是 Java 的 final 变量。  \r\n- var （来自 variable） 一一可变引用。这种变量的值可以被改变。这种声明对 应的是普通（非 final）的 Java 变量。\r\n\r\n\r\n### 3.局部变量的引用\r\n\r\n和许多脚本语言一样， Kotlin 让你可 以在字符串字面值中引用局部变量，只需要在变量名称前面加上字符$。\r\n\r\n这等价于 Java 中的字符串连接（ \"Hello,\"+ name ＋\"！\"），效率一样但是更紧凑。\r\n\r\n```\r\nfun main(args: Array<String>) {\r\n    val name = if(args.size > 0) args[0] else \"Kotlin\"\r\n    println(\"Hello, $name !\")\r\n}\r\n```\r\n\r\n\r\n还可以引用更复杂的表达式，而不是仅限于简单的变量名称，只需要把表达式 用花括号括起来.\r\n\r\n### 4.在Java中可以用switch语句完成的，而Kotlin 对应的结构是when\r\n\r\n```\r\nfun getMnemonic(color: Color) = \r\nwhen (color) { \r\nColor . RED ->”Richard\" \r\nColor.ORANGE ->”Of” \r\nColor.YELLOW ->”York\" \r\nColor .GREEN ->”Gave” \r\nColor.BLUE ->”Battle\" \r\nColor ．工NDIGO ->”In” \r\nColor.VIOLET ->”Vain \r\n}\r\n```\r\n\r\n  在一个 when 分支上合并多个选项：\r\n  \r\n```\r\nfun getWarmth(color: Color) = when(color) {\r\nColor.RED, Color.ORANGE, Color.YELLOW - > ”warm”\r\nColor.GREEN -> ”neutral”\r\nColor.BLUE, Color.INDIGO, Color.VIOLET ->”cold”\r\n}\r\n```\r\n上面的代码中，也可以导入枚举常量后不用限定词就可以访问。比如去掉花括号里的Color也是可以的。\r\n\r\n> Kotlin中的when结构比Java中的switch强大得多。switch要求必须使用常量（枚举常量、字符串或者数字字面值）作为分支条件，和它不一样， when允许使用任何对象。\r\n\r\n\r\n\r\n### 5.类型判断\r\n\r\n在Kotlin中，你要使用is检查来判断一个变量是否是某种类型。is检查和Java中的instanceOf相似，不过在instanceOf检查之后还需要显式地加上类型转换。\r\n\r\n在Kotlin中，编译器帮你完成了这些工作。如果你检查过一个变量是某种类型，后面就不再需要转换它，可以就把它当作你检查过的类型使用。\r\n\r\n使用as关键字来表示到特定类型的显式转换；\r\n\r\n\r\n### 6.循环中的\"in\"关键字\r\n\r\nKotlin里面关键字“in”有许多作用，比如检查区间的成员；作为when的分支；在for循环中使用等。关于in如何在list中使用，下章再介绍\r\n\r\n\r\n### 7.关于\"try\"\r\n\r\nKotlin中的try关键字就像if和when一样,引入了一个表达式，可以把它的值赋给一个变量。不同于if，你总是需要用花括号把语句主体括起来。和其他语句一样，如果其主体包含多个表达式，那么整个 try 表达式的值就是最后一个表达式的值。","bfa68978":"---\r\ntitle: Kotlin笔记(四):基础篇most plus\r\ndate: 2018-10-03 21:49:47\r\nindex_img: /img/kotlin_4.png\r\ntags: Kotlin\r\n---\r\n\r\n\r\n### 1.成员引用\r\n\r\nKotlin和Java8一样，如果把函数转换成一个值，你就可以传递它。  \r\n> 使用:: 运算符来转换 ：\r\n\r\n```\r\nval getAge = Person::age \r\n```\r\n这种表达式称为成员引用，它提供了简明语法，来创建一个调用单个方法或者 访问单个属性的函数值。双冒号把类名称与你要引用的成员（一个方法或者一个属性）名称隔开\r\n\r\n### 2.集合的函数式API\r\n\r\n**filter** 函数遍历集合并选出应用给定 **lambda** 后会返回 **true** 的那些元素：\r\n\r\n```\r\n>> val list= listOf(l, 2, 3, 4) \r\n>> println(list.filter{it % 2 == 0}) \r\n```\r\n\r\n**filter** 函数可以从集合中移除你不想要的元素，但是它并不会改变这些元素。 元素的变换是 **map** 的用武之地。 \r\n\r\n**map** 函数对集合中的每一个元素应用给定的函数并把结果收集到一个新集合。可以把数字列表变换成它们平方的列表，比如：\r\n\r\n```\r\n>> val list= listOf(l, 2, 3, 4) \r\n>> println(list.map { it * it }\r\n{1, 4, 9, 16}\r\n```\r\n\r\n### 3.\"all\"\"any\"\"count\"和\"find\"：对集合应用判断式\r\n\r\n检查集合中的所有元素是否都符合某个条件（或者它的变种，是否存在符合的元素）。Kotlin中，它们是通过 **all** 和 **any** 函数表达的。 \r\n\r\n\r\n```\r\nval canBeinClub27 = { p: Person - > p.age <= 27 } \r\n```\r\n> 如果你对是否所有元素都满足判断式感兴趣，应该使用 **all** 函数：\r\n\r\n```\r\n>> val people= listOf(Person (\"Alice\", 27), Person(\"Bob\", 31))\r\n>> println( people.all(canBeinClub27) ) \r\nfalse\r\n```\r\n> 如果你需要检查集合中是否至少存在一个匹配的元素，那就用 **any** :\r\n\r\n```\r\n>> println(people any(canBeinClub27)) \r\ntrue \r\n```\r\n> 如果你想知道有多少个元素满足了判断式，使用 **count** : \r\n\r\n```\r\n>> val people= listOf(Person(\"Alice\", 27) , Person (\"Bob\", 31)) \r\n>> println(people.count(canBeinClub27))\r\n1\r\n```\r\n> 要找到一个满足判断式的元素，使用 **find** 函数 ：\r\n\r\n```\r\n>> val people= listOf(Person(\"Alice\"， 27) , Person(\"Bob\", 31)) \r\n>> println(people.find(canBeinClub27)) \r\nPerson(name=Alice, age=27) \r\n```\r\n### 4.groupBy ：把列表转换成分组的 map\r\n\r\n假设你需要把所有元素按照不同的特征划分成不同的分组。例如，你想把人按年龄分组，相同年龄的人放在一组。把这个特征直接当作参数传递十分方便。**groupBy** 函数可以帮你做到这一点：\r\n\r\n```\r\n>> val people= listOf(Person(\"Alice\", 31), Person(\"Bob\", 29), Person (\"Carol\", 31))\r\n>> println(people.groupBy {it.age})\r\n```\r\n这次操作的结果是一个 **map**，是元素分组依据的键（这个例子中是age）和元素分组（persons）之间的映射\r\n\r\n### 5.flatMap 和 flatten ：处理嵌套集合中的元素 \r\n\r\n假设你有一堆藏书，使用 Book 类表示 ：\r\n\r\n```\r\nclass Book (val title: String, val authors: List<String>) \r\n```\r\n每本书都可能有一个或者多个作者，可以统计出图书馆中的所有作者的 set : \r\n\r\n```\r\nbooks.flatMap { it.authors } toSet() \r\n```\r\n**flatMap** 函数做了两件事情：首先根据作为实参给定的函数对集合中的每个元素做变换（或者说映射），然后把多个列表合并（或者说平铺）成一个列表。 \r\n\r\n> **注意，如果你不需要做任何变换，只是需要平铺一个集合，可以使用flatten函数：listOfLists.flatten() 。**\r\n\r\nKotlin 标准库参考文档有说明，**filter** 和 **map** 都会返回一个列表。这意味着元素过多的时候，（链式）调用就会变得十分低效。为了提高效率，可以把操作变成使用序列，而不是直接使用集合，下面是对比的例子\r\n\r\n\r\n```\r\npeople.map(Person: :name) .filter { it.startsWith(\"A\")｝\r\n```\r\n转化为：\r\n```\r\npeople.asSequence()\r\n    .map (Person: : name)\r\n    .filter{it.startsWith(\"A\")}\r\n    .tolist\r\n```\r\nKotlin惰性集合操作的入口就是 **Sequence** 接口。这个接口表示的就是一个可以逐个列举元素的元素序列。 \r\n\r\n可以调用扩展函数 **asSequence** 把任意集合转换成序列，调用  **toList** 来做反向的转换。 \r\n\r\n\r\n### 6.使用Java函数式接口\r\n\r\n **OnClickListener** 接口只有一个抽象方法。这种接口被称为 **函数式接口**，或者 **SAM接口**，**SAM** 代表抽象方法。JavaAPI中随处可见像**Runnable**和**Callable**这样的函数式接口，以及支持它们\r\n 的方法。 Kotlin 允许你在调用接收函数式接口作为参数的方法时使用 **lambda**，来保证你的 Kotlin代码既整洁又符合习惯。\r\n\r\n可以把 **lambda** 传给任何期望函数式接口的方法。例如，下面这个方法，它有一个 **Runnable** 类型的参数：\r\n\r\n```\r\n/* Java */ \r\nvoid postponeComputation(int delay, Runnable computation); \r\n```\r\n下面是显式地创建一个实现了 **Runnable** 的匿名对象的例子：\r\n\r\n```\r\npost postponeComputation(1OOO, object : Runnable { \r\n    override fun run() {\r\n    println(42) \r\n    }\r\n)}\r\n```\r\n\r\n\r\n在 Kotlin 中，可以调用它并把一个 **lambda** 作为实参传给它。编译器会自动把它转换成一个 **Runnable** 的实例：\r\n\r\n```\r\npostponeComputation(lOOO) { println(42) }\r\n```\r\n完全等价的实现应该是下面这段代码中的显式**object**声明，它把**Runnable**实例存储在一个变量中，并且每次调用的时候都使用这个变量：\r\n\r\n```\r\nval runnable = Runnable { println(42) } \r\nfun handleComputation(){ postponeComputation(1OOO, runnable)} \r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","e1527b03":"---\r\ntitle: Kotlin笔记(五):基础篇latest\r\ndate: 2018-10-05 21:49:47\r\nindex_img: /img/kotlin_5.png\r\ntags: Kotlin\r\n---\r\n\r\n### 1.可空类型\r\n\r\n问号可以加在任何类型的后面来表示这个类型的变量可以存储 null 引用 ： String?、 Int?、 MyCustomType? ，等等\r\n\r\n一旦你有一个可空类型的值，能对它进行的操作也会受到限制。例如，不能再调用它的方法 \r\n```\r\n>> fun strLenSafe(s: String?) = s.length() \r\nERROR: only safe (?.) or non null asserted (!!.) calls are allowed on a nullable receiver of type kotlin.String?\r\n```\r\n也不能把它赋值给非空类型的变量 ：\r\n```\r\n>> val x: String? = null \r\n>> var y: String = x \r\nERROR: Type mismatch: inferred type is String? but String was expected \r\n```\r\n也不能把可空类型的值传给拥有非空类型参数的函数 ：\r\n```\r\n>> strLen(x) \r\nERROR: Type mismatch: inferred type is String? but String was expected \r\n```\r\n那么你可以对它做什么呢？最重要的操作就是和 null 进行比较。 而且一旦你 进行了比较操作，编译器就会记住，并且在这次比较发生的作用域内把这个值当作非空来对待\r\n\r\n\r\n### 2.安全调用运算符：\"?.\"\r\n\r\n> Kotlin的弹药库中最有效的一种工具就是安全调用运算符：?.，它允许你把一 次null检查和一次方法调用合并成一个操作。\r\n\r\n例如，表达式 s?.toUpperCase() 等同于下面这种烦琐的写法：if(s!=null) s.toUpperCase() else null。 \r\n\r\n### 3.Elvis运算符：\"?:\" \r\n\r\nKotlin 有方便的运算符来提供代替null的默认值。它被称作**Elvis运算符**（或者 null合并运算符，如果你喜欢听起来更严肃的名称）。下面展示了它是如何使用的：\r\n```\r\nfun foo(s: String?) {\r\n    val t: String= s?:\"\"\r\n}\r\n```\r\n*Elvis 运算符接收两个运算数，如果第一个运算数不为null，运算结果就是第 一个运算数；如果第一个运算数为null，运算结果就是第二个运算数。*\r\n\r\n### 4.安全转换：\"as?\"\r\n\r\n> as? 运算符尝试把值转换成指定的类型，如果值不是合适的类型就返回 null\r\n\r\n一种常见的模式是把安全转换和 Elvis 运算符结合使用。例如，实现 equals 方法的时候这样的用法非常方便。\r\n\r\n\r\n```\r\nclass Person(val firstNarne: String, val lastNarne: String){\r\n    override fun equals(o: Any?): Boolean {\r\n        val otherPerson = o as? Person?: return false\r\n        return otherPerson.firstNarne == firstNarne && otherPerson.lastNarne == lastNarne \r\n    }\r\n    \r\n    override fun hashCode(): Int = firstNarne.hashCode() * 37 + lastNarne.hashCode() \r\n}\r\n\r\n\r\n>> val pl = Person ( \"Drnitry\",\"Jernerov\") \r\n>> val p2 = Person ( \"Drnitry\",\"Jernerov\") \r\n>> println (pl == p2) \r\ntrue\r\n>> println(pl.equals(42)) \r\nfalse \r\n```\r\n\r\n### 5.非空断言：\"!!\"\r\n\r\n> 非空断言是 Kotlin 提供给你的最简单直率的处理可空类型值的工具。它使用双感叹号表示，可以把任何值转换成非空类型。如果对 null 值做非空断言，则会抛出异常。\r\n\r\n某些问题适合用非空断言来解决。当你在一个函数中检查一个值是否为null，而在另一个函数中使用这个值时，这种情况下编译器无法识别这种用法是否安全。如果你确信这样的检查一定在其他某个函数中存在，你可能不想在使用这个值之前重复检查，这时你就可以使用非空断言。\r\n\r\n 当你使用 !! 并且它的结果是异常时， 异常调用械的跟踪信息只表明异常发生在哪一行代码，而不会表明异常发生在哪一个表达 式。 为了让跟踪信息更清晰精确地表示哪个值为 null，最好避免在同一行中使用多个!!断言\r\n\r\n### 6.\"let\"函数\r\n\r\n> let 函数让处理可空表达式变得更容易。 和安全调用运算符一起，它允许你对表达式求值，检查求值结果是否为 null，并把结果保存为一个变量。 所有这些动作都在同一个简洁的表达式中。 \r\n\r\n下面举个栗子：\r\n\r\n```\r\nfun sendEmailTo(email: String) { /* ... */ } \r\n```\r\n不能把可空类型的值传上面给这个函数：\r\n\r\n\r\n```\r\n>> val email: String? = ...\r\n>> sendEmailTo(email) \r\nERROR: Type mismatch: inferred type is String? but String was expected \r\n```\r\n必须显式地检查这个值不为 null:\r\n\r\n```\r\nif (email != null) sendEmailTo(email)\r\n```\r\n如果使用了let函数，会是下面这样子的：\r\n\r\n```\r\nemail?.let { email -> sendEmailTo(email) } \r\n```\r\n**let** 函数只在 email 的值非空时才被调用，所以你就能在 lambda 中把 email 当作非空的实参使用。\r\n使用自动生成的名字 it 这种简明语法之后，上面的代码就更短了 ： \r\n```\r\n email?.let{ sendEmailTo(it) ｝ \r\n```\r\n\r\n### 7.延迟初始化的属性\r\n\r\nKotlin 通常要求你在构造方法中初始化所有属性，如果某个属性是 非空类型，你就必须提供非空的初始化值。否则，你就必须使用可空类型。否则， 你就必须使用可空类型。如果你这样做，该属性的每一次访问都需要 null 检查或者 !! 运算符。\r\n```\r\nclass MyService {\r\n    fun performAction() : String = \"foo\"\r\n}\r\n\r\nclass MyTest{\r\n    private var myService: MyService? = null \r\n    \r\n    @Before fun setUp(){\r\n        myService = MyService() \r\n    }\r\n    \r\n    \r\n    @Test fun testAction(){\r\n        //必须注意可空性：要么 用!!， 要么用?.\r\n        Assert.assertEquals( \"foo\" ， myService!!.performAction() ) \r\n    }\r\n}\r\n```\r\n这段代码很难看，尤其是你要反复使用这个属性的时候。 \r\n为了解决这个问题， 使用 **lateinit** 修饰符来完成这样的声明。\r\n```\r\nclass MyService {\r\n    fun performAction() : String = \"foo\"\r\n}\r\n\r\nclass MyTest{\r\n    //声明一个不需要初始化 器的非空类型的属性\r\n    private lateinit var myService: MyService\r\n    \r\n    @Before fun setUp(){\r\n        myService = MyService() \r\n    }\r\n    \r\n    @Test fun testAction(){\r\n        //不需要 null 检查直接访问属性\r\n        Assert.assertEquals( \"foo\" ， myService!!.performAction() ) \r\n    }\r\n}\r\n```\r\n*注意， 延迟初始化的属性都是 var，因为需要在构造方法外修改它的值*\r\n\r\n### 8.\"Any\"和\"Any?\"：根类型\r\n\r\n> 和 Object 作为 Java 类层级结构的根差不多， **Any** 类型是 Kotlin 所有非空类型的超类型（非空类型的根）。\r\n>\r\n> 但是在 Java 中， Object 只是所有引用类型的超类 型（引用类型的根），而基本数据类型并不是类层级结构的一部分。\r\n>\r\n> 这意味着当你 需要 Object 的时候，不得不使用像 java.lang.Integer 这样的包装类型来表示基本数据类型的值。 **而在 Kotlin 中， Any 是所有类型的超类型（所有类型的根）**， 包括像 Int 这样的基本数据类型。 \r\n\r\n和 Java 一样，把基本数据类型的值赋给 **Any** 类型的变量时会自动装箱：\r\n\r\n```\r\nval answer: Any = 42 \r\n```\r\n*注意 **Any** 是非空类型，所以 **Any** 类型的变量不可以持有 null 值*\r\n\r\n### 9.Unit 类型 ： Kotlin 的\"void\"\r\n\r\nKotlin 中的 **Unit** 类型完成了 Java 中的 void 一样的功能。当函数没什么有意思的结果要返回时，它可以用作函数的返回类型：\r\n```\r\nfun f () : Unit { . . . } \r\n```\r\n语法上，这和写一个带有代码块体但不带类型声明的函数没有什么不同：\r\n\r\n```\r\nfun f () { .. }         //缩写版\r\n```\r\n> Unit 是一个完备的类型，可以作为类型参数，而 void 却不行。\r\n\r\n在函数式编程语言中， Unit 这个名字习惯上被用来表示“只有一个实例”，这正是 Kotlin 的 Unit 和 Java 的 void 的区别。\r\n\r\n### 10.Nothing类型：“这个函数永不返回”\r\n\r\n对某些 Kotlin 函数来说，\"返回类型\"的概念没有任何意义，因为它们从来不会成功地结束\r\n,Kotlin 使用一种特殊的返回类型 Nothing 来表示：\r\n\r\n```\r\nfun fail(message: String): Nothing { \r\n    throw IllegalStateException (message)\r\n}\r\n\r\n>> fail (\"Error occurred\")\r\njava.lang.IllegalStateException: Error occurred \r\n```\r\nNothing 类型没有任何值， 只有被当作函数返回值使用，或者被当作泛型函数 返回值的类型参数使用才会有意义。在其他所有情况下，声明一个不能存储任何值 的变量没有任何意义。 \r\n\r\n\r\n### 11.可空性和集合\r\n\r\n遍历一个包含可空值的集合并过滤掉 null 是一个非常常见的操作，因此 Kotlin 提供了一个标准库函数 **filterNotNull** 来完成它。 \r\n\r\n### 12.只读集合与可变集合 \r\n\r\nKotlin 的集合设计和 Java 不同的另一项重要特质是，它把访问集合数据的接口和修改集合数据的接口分开了。这种区别存在于最基础的使用集合的接口之中:kotlin.collections.Collection。\r\n\r\n使用 kotlin.collections.MutableCollection 接口可以修改集合中的数据。它继承了普通的 kotlin.collections.Collection 接口,还提供了方法来添加和移除元素、清空集合等。 \r\n\r\n一般的规则是在代码的任何地方都应该使用只读接口，只在代码需要修改集合的地方使用可变接口的变体\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","6e8a0dd9":"---\r\ntitle: Kotlin笔记(三):基础篇more plus\r\ndate: 2018-10-02 21:49:47\r\nindex_img: /img/kotlin_3.png\r\ntags: Kotlin\r\n---\r\n\r\n### 1.接口的默认实现\r\n\r\n接口的方法可以有一个默认实现。与Java8不同的是，Java8中需要你在这样的实现上标注default关键字，对于这样的方法，Kotlin没有特殊的注解 ：只需要提供一个方法体\r\n\r\n```\r\ninterface Clickable{\r\n    fun click()\r\n    fun showOff = println(\"I'm clickable\")\r\n}\r\n```\r\n在实现接口的地方如果要显式地实现方法，在Kotlin中需要把 基类的名字放在尖括号中 ：\r\n```\r\nsuper<Clickable>.showOff() \r\n```\r\n<!--more--> \r\n### 2.定义类的继承结构\r\n\r\n    Java的类和方法默认是open的，而Kotlin中默认都是final的。 \r\n\r\n如果你想允许创建一个类的子类，需要使用 **open** 修饰符来标示这个类。此外，需要给每一个可以被重写的属性或方法添加open修饰符。\r\n\r\n> *注意，如果你重写了一个基类或者接口的成员，重写了的成员同样默认是 open的。如果你想改变这一行为，阻止你的类的子类重写你的实现，可以显式地将重写的成员标注为 **final** 。*\r\n\r\n\r\n\r\n### 3.嵌套类与内部类\r\n\r\nKotlin中没有显式修饰符的嵌套类与Java中的static嵌套类是一样的。要把它变成一个内部类来持有一个外部类的引用的话需要使用 **inner** 修饰符。\r\n\r\n在Kotlin中引用外部类实例的语法也与Java不同。需要使用 **this@Outer** 从 **Inner** 类去访问 **Outer** 类：\r\n\r\n\r\n```\r\nclass Outer{\r\n    inner class Inner{\r\n        fun getOuterReference() : Outer = this@Outer\r\n    }\r\n}\r\n```\r\n\r\n\r\n### 4.密封类：定义受限的类继承结构\r\n\r\n为父类添加一个 **sealed** 修饰符，对可能创建的子类做出严格的限制。\r\n\r\n如果你在 when 表达式中处理所有 **sealed** 类的子类，你就不再需要提供默认分支。注意， **sealed** 修饰符隐含的这个类是一个 **open** 类， 你不再需要显式地添加 **open** 修饰符。\r\n\r\n\r\n### 5.声明一个带非默认构造方法或属性的类\r\n\r\n举个栗子：\r\n\r\n```\r\nclass User constructor(_nickname: String) {\r\n    val nickname : String\r\n    \r\n    init{\r\n        nickname = _nickname\r\n    }\r\n}\r\n```\r\n在这个例子中，可以看到两个新的Kotlin关键宇：**constructor** 和 **init** 。 **constructor** 关键字用来开始一个主构造方法或从构造方法的声明。 **init** 关键字用来引入一个初始化语句块。这种语句块包含了在类被创建时执行的代码， 并会与主构造方法一起使用。\r\n\r\n> 如果你想要确保你的类不被其他代码实例化，必须把构造方法标记为 private：\r\n\r\n```\r\nclass Secretive private constructor() {}\r\n//一般这么做表示这个类是一个静态实用工具成员的容器或者是单例的\r\n```\r\n\r\n### 6.通过 getter 或 setter 访问支持字段\r\n\r\n假设你想在任何对存储在属性中的数据进行修改时输出日志，你声明了一个可变属性并且在每次 setter 访问时执行额外的代码。\r\n\r\n```\r\nclass ·user (val name: String) { \r\n    var address: String =\"unspecified\" \r\n        set(value: String) { \r\n            println (””“ A Address was changed for $name:\r\n            \"$field\" -> \"value\".\"\"\"\".trimIndent())\r\n            field = value\r\n        }\r\n    }\r\n```\r\n可以像平常一样通过使用 user.address ＝ \"new value\"， 来修改一个属性的值，这其实在底层调用了 setter。\r\n\r\n\r\n在 setter 的函数体中，使用了特殊的标识符 **field** 来访问支持字段的值。\r\n\r\n如果你想修改访问器的可见性，可以像下面这样：\r\n\r\n```\r\nclass LengthCounter {\r\n    var counter: Int = 0 \r\n    private set     //这下就不能在类外部修改这个属性了\r\n    \r\n    fun addWord(word: String){\r\n        counter += word.length\r\n    }\r\n}\r\n```\r\n\r\n### 7.数据类：自动生成通用方法的实现 \r\n\r\n如果想要你的类是一个方便的数据容器，你需要重写这些方法 ： **toString**、 **equals** 和 **hashCode** 。在Kotlin中你不必再去生成这些方法了 。如果为你的类添加 **data** 修饰符，必要的方法将会自动生成好。\r\n\r\n比如：\r\n```\r\ndata class Client(val name: String, val postalCode: Int)\r\n```\r\n\r\n### 8.数据类和不可变性： copy()方法\r\n\r\n为了让使用不可变对象的数据类变得更容易，Kotlin编译器为它们多生成了一个方法：一个允许 **copy** 类的实例的方法，并在 **copy** 的同时修改某些属性的值:\r\n\r\n\r\n```\r\nclass Client (val name: String, val postalCode: Int) {\r\n    fun copy(name: String = this.name, postalCode: Int = \r\n    this.postalCode) = Client(name, postalCode)\r\n}\r\n\r\n\r\n//使用\r\n>>> val bob = Client(\"Bob”, 973293) \r\n>>> println(bob.copy(postalCode = 382555)) \r\n```\r\n\r\n### 9.类委托：使用“by”关键字\r\n(装饰模式我还不是太了解，了解以后再记录)\r\n\r\n### 10.对象声明：创建单例易如反掌\r\n\r\n在面向对象系统设计中一个相当常见的情形就是只需要一个实例的类。在Java中，这通常通过单例模式来实现 \r\n\r\nKotlin 通过使用对象声明功能为这一切提供了最高级的语言支持。对象声明将类声明与该类的单一实例声明结合到了一起。 \r\n\r\n\r\n```\r\nobject Payroll { \r\n    val allErnployees = arrayListOf<Person>()\r\n\r\n    fun calculateSalary() { \r\n        for {person in allErnployees) { \r\n        ...\r\n        }\r\n    }\r\n}\r\n```\r\n> 对象声明通过object关键宇引入。一个对象声明可以非常高效地以一句话来定义一个类和一个该类的变量。 \r\n\r\n### 11.伴生对象：工厂方法和静态成员的地盘\r\n\r\n在类中定义的对象之一可以使用一个特殊的关键字来标记：**companion**。如果这样做，就获得了直接通过容器类名称来访问这个对象的方法和属性的能力，不再需要显式地指明对象的名称。最终的语法看起来非常像 Java 中的静态方法调用。\r\n\r\n```\r\nclass A { \r\n    companion object { \r\n        fun bar() { \r\n        println (\"Companion object called\") \r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n>> A.bar() \r\nCompanion object called\r\n```\r\n\r\n\r\n伴生对象可以访问类中的所有private成员，包括private构造方法，它是实现工厂模式的理想选择。 \r\n\r\n```\r\nclass User private constructor(val nickname: String) {\r\n    companion object {\r\n        fun newSubscribingUser(email: String) =\r\n        User(email.substringBefore ('@')) \r\n        \r\n        fun newFacebookUser(accountld: Int) = \r\n        User(getFacebookName(accountld)) \r\n    }\r\n}\r\n\r\n\r\n>> val subscribingUser = User.newSubscribingUser (\"bob@gmail.com\") \r\n>> val facebookUser = User.newFacebookUser(4) \r\n>> println(subscribingUser.nickname)\r\nbob\r\n```\r\n\r\n### 小结：\r\n\r\n\r\n- Kotlin 的接口与 Java 的相似，但是可以包含默认实现 (Java 从第8版才开始支持)和属性。\r\n- 所有的声明默认都是 final 和 public 的。\r\n- 要想使声明不是 final 的，将其标记为 open。\r\n- internal 声明在同一模块中可见。\r\n- 嵌套类默认不是内部类。使用inner关键字来存储外部类的引用。\r\n- sealed 类的子类只能嵌套在自身的声明中（Kotlin 1.1 允许将子类放置在同一文件的任意地方）。\r\n- 初始化语句块和从构造方法为初始化类实例提供了灵活性。 \r\n- 使用 field 标识符在访问器方法体中引用属性的支持字段。\r\n- 数据类提供了编译器生成的 equals、 hashCode、 toString、 copy 和其他方法。 \r\n- 类委托帮助避免在代码中出现许多相似的委托方法。 \r\n- 对象声明是 Kotlin 中定义单例类的方法。\r\n- 伴生对象（与包级别函数和属性一起）替代了Java静态方法和字段定义。 \r\n- 伴生对象与其他对象一样，可以实现接口，也可以拥有有扩展函数和属性。\r\n- 对象表达式是 Kotlin中针对Java匿名内部类的替代品，并增加了诸如实现多个接口的能力和修改在创建对象的作用域中定义的变量的能力等功能。","40dab20a":"---\r\ntitle: Retrofit源码分析\r\ndate: 2020-04-05 04:03:43\r\nindex_img: /img/retrofit.png\r\ntags: 源码系列\r\n---\r\n# 序\r\n\r\n[Retrofit](https://square.github.io/retrofit/) 在Android开发者中，应该属于人尽皆知人尽皆用的程度了。\r\n\r\n这一篇文章就是用来了解它的源码，并顺便了解一下它使用到的一个重要特性：**动态代理**\r\n\r\n\r\n# 引子\r\n\r\n用过 `Retrofit` 的小伙伴应该都知道，使用它，会创建一个接口存放所有的网络请求。接口里的每个方法都会使用注解去修饰，最后的代码看起来统一而又美观。\r\n\r\n那这次我们在哪里作为入口呢？还是很简单的，从  `Retrofit` 创建的地方作为入口吧\r\n\r\n# Retrofit\r\n\r\n一般，我们创建 `Retrofit` 都是类似下面这的代码\r\n\r\n首先，创建请求接口\r\n\r\n\r\n```\r\npublic interface GitHubService {\r\n    @GET(\"users/{user}/repos\")\r\n    Call<List<Repo>> listRepos(@Path(\"user\") String user);\r\n  \r\n    @FormUrlEncoded\r\n    @POST(\"user/edit\")\r\n    Call<User> updateUser(@Field(\"first_name\") String first, @Field(\"last_name\") String last);\r\n    ...\r\n}\r\n```\r\n然后，创建 `Retrofit` 对象\r\n\r\n```\r\nRetrofit retrofit = new Retrofit.Builder()\r\n        .client(okHttpClient)\r\n        .baseUrl(baseUrl)\r\n        .addConverterFactory(GsonConverterFactory.create())\r\n        .build();\r\n        \r\nGitHubService service = retrofit.create(GitHubService.class);\r\n```\r\n\r\n> 为了简洁起见，就不再加入 rxjava 或其他相关的内容了。做一个纯净的代码分析\r\n\r\n我们直接从 `Retrofit.Builder()` 开始看起吧\r\n\r\n## Builder()\r\n\r\n\r\n```\r\npublic final class Retrofit {\r\n  ...\r\n  public static final class Builder {\r\n    private final Platform platform;\r\n    ...\r\n    public Builder() {\r\n      this(Platform.get());\r\n    }\r\n    ...\r\n    Builder(Platform platform) {\r\n      this.platform = platform;\r\n    }\r\n    ...\r\n  }\r\n  ...\r\n}\r\n```\r\n在 `Builder()` 中，初始化了 `Platform` 对象。因为 `Retrofit` 不仅支持在Android上使用，还可以支持纯java的项目。所以这里的  `Platform` 中处理的就是这两种情况\r\n\r\n我们可以简单的看一下  `Platform` 对象\r\n\r\n## Platform\r\n\r\n\r\n```\r\nclass Platform {\r\n  private static final Platform PLATFORM = findPlatform();\r\n\r\n  static Platform get() {\r\n    return PLATFORM;\r\n  }\r\n\r\n  private static Platform findPlatform() {\r\n    ...\r\n    if (Build.VERSION.SDK_INT != 0) {\r\n        return new Android();\r\n    }\r\n    ...\r\n    return new Java8();\r\n    ...\r\n  }\r\n  ...\r\n  static class Android extends Platform {\r\n    ...\r\n\r\n    @Override public Executor defaultCallbackExecutor() {\r\n      return new MainThreadExecutor();\r\n    }\r\n\r\n    ...\r\n\r\n    static class MainThreadExecutor implements Executor {\r\n      private final Handler handler = new Handler(Looper.getMainLooper());\r\n\r\n      @Override public void execute(Runnable r) {\r\n        handler.post(r);\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n这里，我们主要关注 `Platform` 中 `Android` 的实现，可以看到其中有一个 `MainThreadExecutor` 对象，它其中持有了一个主线程 `Handler` ，想必这里就是用于异步回调后的线程切换。\r\n\r\n接下来，我们继续看 `Retrofit` 的 `build()` 方法\r\n\r\n## Builder.build()\r\n\r\n\r\n```\r\npublic final class Retrofit {\r\n    ...\r\n  public static final class Builder {\r\n    public Retrofit build() {\r\n      ...\r\n      okhttp3.Call.Factory callFactory = this.callFactory;\r\n      if (callFactory == null) {\r\n        callFactory = new OkHttpClient();\r\n      }\r\n\r\n      Executor callbackExecutor = this.callbackExecutor;\r\n      if (callbackExecutor == null) {\r\n        callbackExecutor = platform.defaultCallbackExecutor();\r\n      }\r\n\r\n      ...\r\n\r\n      return new Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),\r\n          unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);\r\n    }\r\n    ...\r\n  }\r\n  ...\r\n}\r\n```\r\n在这个方法中，主要做一些初始化的赋值操作。我们的主角其实还是 `Retrofit` 的 `create()` 方法\r\n\r\n## create()\r\n\r\n\r\n```\r\npublic final class Retrofit {\r\n  ...\r\n  public <T> T create(final Class<T> service) {\r\n    Utils.validateServiceInterface(service);\r\n    if (validateEagerly) {\r\n      eagerlyValidateMethods(service);\r\n    }\r\n    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },\r\n        new InvocationHandler() {\r\n          private final Platform platform = Platform.get();\r\n          private final Object[] emptyArgs = new Object[0];\r\n\r\n          @Override public @Nullable Object invoke(Object proxy, Method method,\r\n              @Nullable Object[] args) throws Throwable {\r\n            // If the method is a method from Object then defer to normal invocation.\r\n            if (method.getDeclaringClass() == Object.class) {\r\n              return method.invoke(this, args);\r\n            }\r\n            if (platform.isDefaultMethod(method)) {\r\n              return platform.invokeDefaultMethod(method, service, proxy, args);\r\n            }\r\n            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);\r\n          }\r\n        });\r\n  }\r\n  ...\r\n}\r\n```\r\n这里的 `validateEagerly` 默认为 **false**，如果设为 **ture** 会提前遍历 class 对象的所有方法，并将获取到的信息进行处理\r\n\r\n我们直接看 **return** 的内容 `Proxy.newProxyInstance(...)` \r\n\r\n很显然，这里就是我们本篇文章的主角了，**动态代理** 就是通过它来实现的\r\n\r\n在重写的 `invoke(...)` 方法中，`isDefaultMethod(method)` 最终调用的是 `Method.isDefault()`,如果接口中的方法被 `default` 关键字修饰，则返回 **true** ，当然这个只在android api 24以上可以用\r\n\r\n我们看 `loadServiceMethod(...)` 方法做了些什么\r\n\r\n\r\n## loadServiceMethod(...)\r\n\r\n\r\n```\r\npublic final class Retrofit {\r\n  private final Map<Method, ServiceMethod<?>> serviceMethodCache = new ConcurrentHashMap<>();\r\n  ...\r\n  ServiceMethod<?> loadServiceMethod(Method method) {\r\n    ServiceMethod<?> result = serviceMethodCache.get(method);\r\n    if (result != null) return result;\r\n\r\n    synchronized (serviceMethodCache) {\r\n      result = serviceMethodCache.get(method);\r\n      if (result == null) {\r\n        result = ServiceMethod.parseAnnotations(this, method);\r\n        serviceMethodCache.put(method, result);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  ...\r\n}\r\n\r\n```\r\n显然，这里将所有获取到的 `Method` 放入了一个 `ConcurrentHashMap` 进行维护，这样做的目的自然是为了避免多次调用同一个方法时会`involk` 多次。也许这样可以提升一些性能，不过我还没有研究过。\r\n\r\n到这里 `Retrofit` 为什么可以做到通过接口的方式来进行请求的根本原因已经找到了。\r\n\r\n还剩下一个问题，就是那些注解，类似于 `@POST`、`@GET` 等，是如何起作用的。接下来，我们从 `ServiceMethod` 的 `parseAnnotations(...)` 中寻找答案\r\n\r\n## ServiceMethod\r\n\r\n### parseAnnotations(...)\r\n\r\n```\r\nabstract class ServiceMethod<T> {\r\n  static <T> ServiceMethod<T> parseAnnotations(Retrofit retrofit, Method method) {\r\n    RequestFactory requestFactory = RequestFactory.parseAnnotations(retrofit, method);\r\n    ...\r\n    return HttpServiceMethod.parseAnnotations(retrofit, method, requestFactory);\r\n  }\r\n\r\n  abstract @Nullable T invoke(Object[] args);\r\n}\r\n```\r\n可以看到 `parseAnnotations(...)` 最后返回了 `HttpServiceMethod` 对象，而上面的 `invoke()` 方法会在其中实现对 `OkHttp` 的请求调用。不过这里我们先关注注解相关的内容，我们看一下 `RequestFactory` 的 `parseAnnotations(...)` 方法\r\n\r\n## RequestFactory\r\n\r\n### parseAnnotations(...)\r\n\r\n```\r\nfinal class RequestFactory {\r\n  static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {\r\n    return new Builder(retrofit, method).build();\r\n  }\r\n  ...\r\n}\r\n```\r\n`Builder(...)` 中主要做的初始化的赋值操作，我们直接来看 `build()` 方法\r\n\r\n### Builder.build()\r\n\r\n\r\n```\r\n    RequestFactory build() {\r\n      for (Annotation annotation : methodAnnotations) {\r\n        parseMethodAnnotation(annotation);\r\n      }\r\n      ...\r\n      return new RequestFactory(this);\r\n    }\r\n```\r\n可以看到，这里遍历了当前方法所有的注解，然后调用了 `parseMethodAnnotation(annotation)` 方法\r\n\r\n### parseMethodAnnotation(annotation)\r\n\r\n```\r\n    private void parseMethodAnnotation(Annotation annotation) {\r\n      if (annotation instanceof DELETE) {\r\n        parseHttpMethodAndPath(\"DELETE\", ((DELETE) annotation).value(), false);\r\n      } else if (annotation instanceof GET) {\r\n        parseHttpMethodAndPath(\"GET\", ((GET) annotation).value(), false);\r\n      } else if (annotation instanceof HEAD) {\r\n        parseHttpMethodAndPath(\"HEAD\", ((HEAD) annotation).value(), false);\r\n      } else if (annotation instanceof PATCH) {\r\n        parseHttpMethodAndPath(\"PATCH\", ((PATCH) annotation).value(), true);\r\n      } else if (annotation instanceof POST) {\r\n        parseHttpMethodAndPath(\"POST\", ((POST) annotation).value(), true);\r\n      } else if (annotation instanceof PUT) {\r\n        parseHttpMethodAndPath(\"PUT\", ((PUT) annotation).value(), true);\r\n      } else if (annotation instanceof OPTIONS) {\r\n        parseHttpMethodAndPath(\"OPTIONS\", ((OPTIONS) annotation).value(), false);\r\n      } else if (annotation instanceof HTTP) {\r\n        HTTP http = (HTTP) annotation;\r\n        parseHttpMethodAndPath(http.method(), http.path(), http.hasBody());\r\n      } else if (annotation instanceof retrofit2.http.Headers) {\r\n        String[] headersToParse = ((retrofit2.http.Headers) annotation).value();\r\n        if (headersToParse.length == 0) {\r\n          throw methodError(method, \"@Headers annotation is empty.\");\r\n        }\r\n        headers = parseHeaders(headersToParse);\r\n      } else if (annotation instanceof Multipart) {\r\n        if (isFormEncoded) {\r\n          throw methodError(method, \"Only one encoding annotation is allowed.\");\r\n        }\r\n        isMultipart = true;\r\n      } else if (annotation instanceof FormUrlEncoded) {\r\n        if (isMultipart) {\r\n          throw methodError(method, \"Only one encoding annotation is allowed.\");\r\n        }\r\n        isFormEncoded = true;\r\n      }\r\n    }\r\n```\r\n显然，在 `parseMethodAnnotation(annotation)` 中，处理了各种类型的注解，而各个注解所携带的参数，则是在 `parseHttpMethodAndPath(...)` 中进行处理\r\n\r\n### parseHttpMethodAndPath(...)\r\n\r\n\r\n```\r\n    private void parseHttpMethodAndPath(String httpMethod, String value, boolean hasBody) {\r\n      ...\r\n      int question = value.indexOf('?');\r\n      if (question != -1 && question < value.length() - 1) {\r\n        \r\n        String queryParams = value.substring(question + 1);\r\n        Matcher queryParamMatcher = PARAM_URL_REGEX.matcher(queryParams);\r\n        ...\r\n      }\r\n\r\n      this.relativeUrl = value;\r\n      this.relativeUrlParamNames = parsePathParameters(value);\r\n    }\r\n    \r\n    static Set<String> parsePathParameters(String path) {\r\n      Matcher m = PARAM_URL_REGEX.matcher(path);\r\n      Set<String> patterns = new LinkedHashSet<>();\r\n      while (m.find()) {\r\n        patterns.add(m.group(1));\r\n      }\r\n      return patterns;\r\n    }\r\n```\r\n\r\n到这里其实关于 `Retrofit` 主要想了解的问题已经解开了。如果想知道 `Retrofit` 是在哪里调用 `OkHttp` 的，下面可以进入 `HttpServiceMethod` 做一个简单的说明\r\n\r\n## HttpServiceMethod\r\n\r\n### parseAnnotations(...)\r\n\r\n\r\n```\r\n  static <ResponseT, ReturnT> HttpServiceMethod<ResponseT, ReturnT> parseAnnotations(\r\n      Retrofit retrofit, Method method, RequestFactory requestFactory) {\r\n    ...\r\n    CallAdapter<ResponseT, ReturnT> callAdapter =\r\n        createCallAdapter(retrofit, method, adapterType, annotations);\r\n    ...\r\n    }\r\n```\r\n接下来，会从 `createCallAdapter(...)` 开始，进入下面的各个方法\r\n\r\n### createCallAdapter(...)\r\n\r\n```\r\n  private static <ResponseT, ReturnT> CallAdapter<ResponseT, ReturnT> createCallAdapter(\r\n      Retrofit retrofit, Method method, Type returnType, Annotation[] annotations) {\r\n    try {\r\n      //noinspection unchecked\r\n      return (CallAdapter<ResponseT, ReturnT>) retrofit.callAdapter(returnType, annotations);\r\n    } catch (RuntimeException e) { // Wide exception range because factories are user code.\r\n      throw methodError(method, e, \"Unable to create call adapter for %s\", returnType);\r\n    }\r\n  }\r\n```\r\n下面进入 `Retrofit` 的 `callAdapter(...)`， 然后是 `nextCallAdapter(...)`, 通过 `DefaultCallAdapterFactory` 的 `get(...)` 方法得到 `CallAdapter` 对象\r\n\r\n而当你调用代理对象的方法，即你写的接口的方法时，通过 `invoke(...)` 最后调用的就是 `CallAdapter` 对象的 `adapt` 方法，在里面进行了网络请求\r\n\r\n那么 `Retrofit` 的源码就到此为止啦！\r\n\r\n接下来，我们简单的聊一下动态代理吧。不过在动态代理之前，我们可以介绍一下静态代理\r\n\r\n# 静态代理\r\n\r\n拿生活中比较常见的例子来举例吧。\r\n\r\n**点外卖**。当你想吃烤鸭店里的烤鸭，而又懒得去拿时，叫个外卖就好了，外卖小哥会代替你从店里取来烤鸭。\r\n\r\n这里，我们 **取外卖** 就是被代理的功能，而 **外卖小哥** 是你的代理对象，**你自己** 则是被代理的目标对象\r\n\r\n那么接下来就简单了，先定义一个接口，实现功能\r\n\r\n\r\n```\r\npublic interface IProxy {\r\n    public void takeFood();\r\n}\r\n```\r\n然后，你本身具备这个功能\r\n\r\n\r\n```\r\npublic class LazyMan implements IProxy{\r\n\r\n    @Override\r\n    public void takeFood() {\r\n        System.out.println(\"我拿到烤鸭啦！\");\r\n    }\r\n}\r\n```\r\n\r\n外卖小哥具备这个功能，并且他可以代替你实现这个功能\r\n\r\n\r\n```\r\npublic class DeliveryMan implements IProxy{\r\n\r\n    private LazyMan target;\r\n    \r\n    public DeliveryMan(LazyMan target) {\r\n        this.target = target;\r\n    }\r\n\r\n    @Override\r\n    public void takeFood() {\r\n        System.out.println(\"我帮客户拿到烤鸭啦！\");\r\n        target.takeFood();\r\n    }\r\n}\r\n```\r\n实现整个流程则如下\r\n\r\n```\r\npublic void testProxy(){\r\n    //目标对象\r\n    LazyMan target = new LazyMan();\r\n    //代理对象\r\n    IProxy proxy = new DeliveryMan(target);\r\n    proxy.takeFood();\r\n}\r\n```\r\n\r\n静态代理之所以叫 **静态** 的原因就是因为功能接口是已知的。那么以此类推，动态代理自然就是当功能未知时所使用的一种代理模式\r\n\r\n# 动态代理\r\n\r\n动态代理的实现主要依赖于 `Proxy.newProxyInstance(...)` 方法。这时候，我们将 `IProxy` 的功能增加一些\r\n\r\n\r\n```\r\npublic interface IProxy {\r\n\r\n    default void payMoney(){\r\n        System.out.println(\"默认方法:我已经付款啦.\");\r\n    };\r\n\r\n    void takeFood();\r\n\r\n    void eatFood();\r\n}\r\n```\r\n这里加了一个 `default` 也是为了说明之前 `Retrofit` 中的相关方法\r\n\r\n再看目标对象 `LazyMan` 的实现\r\n\r\n\r\n```\r\npublic class LazyMan implements IProxy {\r\n    @Override\r\n    public void eatFood() { System.out.println(\"开始吃烤鸭！\"); }\r\n\r\n    @Override\r\n    public void takeFood() {  System.out.println(\"我拿到烤鸭啦！\"); }\r\n}\r\n```\r\n这时候，要实现之前的流程，操作如下\r\n\r\n\r\n```\r\npublic void testProxy(){\r\n        final IProxy target = new LazyMan();\r\n        ClassLoader classLoader = target.getClass().getClassLoader();\r\n        Class<?>[] interfaces = target.getClass().getInterfaces();\r\n\r\n        IProxy iProxy = (IProxy)Proxy.newProxyInstance(classLoader, interfaces, (proxy, method, args) -> {\r\n            System.out.println(\"-------------开始调用:\" + method.getName() +\"-----------\");\r\n            method.invoke(target, args);\r\n            System.out.println(\"是否是默认方法:\" + method.isDefault());\r\n            System.out.println(\"-------------结束调用\" + method.getName() +\"-----------\\n\");\r\n            return null;\r\n        });\r\n        iProxy.payMoney();\r\n        iProxy.takeFood();\r\n        iProxy.eatFood();\r\n}\r\n```\r\n打印内容如下：\r\n\r\n\r\n```\r\n-------------开始调用:payMoney-----------\r\n默认方法:我已经付款啦.\r\n是否是默认方法:true\r\n-------------结束调用payMoney-----------\r\n\r\n-------------开始调用:takeFood-----------\r\n我拿到烤鸭啦！\r\n是否是默认方法:false\r\n-------------结束调用takeFood-----------\r\n\r\n-------------开始调用:eatFood-----------\r\n开始吃烤鸭！\r\n是否是默认方法:false\r\n-------------结束调用eatFood-----------\r\n```\r\n\r\n可以看到，每次对代理对象的调用，都会执行一次 `InvocationHandler` 的 `invoke(...)` 方法\r\n\r\n> ps:上面用lambda将 `InvocationHandler` 隐藏了\r\n\r\n那么到这里文章就结束了。这一篇就不写总结啦。","433fffcc":"---\r\ntitle: Room Database入门指南\r\ndate: 2018-10-30 21:49:47\r\nindex_img: /img/room_database.png\r\ntags: Android\r\n---\r\n\r\n说到Android端有哪些可以使用的数据库，大家首先想到的自然是SQLite这种带有官方属性加持的轻型的数据库。\r\n\r\n不过对于像我这种基本上没有接触过SQL数据库语言编写的人来说，要通过去写难以查错且又毫不熟悉的数据库代码才能操作数据库的话，那就太令人头大了。\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/001-001.jpg)\r\n\r\n于是乎，便于Android开发者操作数据库的框架也就多了起来，其中人气较高的就有GreenDao、Realm，ObjectBox等，而Room则是谷歌官方十分推荐的，可以代替SQlite的不二之选。\r\n\r\n本篇的主要介绍对象也是Room数据库，不过在此之前，还得简单介绍一下上面提到过的其他几位，同时做个小小的对比。\r\n\r\n# 一、介绍与比较\r\n\r\n\r\n由于我用过的数据库框架并不多，所以对于用过的可以说一下感受，没用过的就简单带过了。\r\n\r\n## 介绍\r\n\r\n### GreenDao 和 ObjectBox \r\n\r\n在这些数据库中， **GreenDao** 算是早闻其名，不过一直没有用过，后来它的作者又出了个 **ObjectBox** ，而且你可以在 [**GreenDao**的GitHub页面](https://github.com/greenrobot/greenDAO) 找到推荐使用 **ObjectBox** 的 [ObjectBox地址](https://objectbox.io/) .\r\n\r\n### Realm\r\n\r\n我真正使用过的还只有 **Realm** 数据库，这里要提一下，**Realm** 数据库对于中国的开发者非常的友好，就像大名鼎鼎的Glide一样， **Realm** 也有中文的介绍文档，文档地址在此：  \r\n[开始使用Realm](https://realm.io/cn/docs/java/latest/)  \r\n虽然这份文档对应的版本不是最新的. 不过对于初次接触 **Realm** 人来说，看这份文档就可以上手了\r\n\r\n最开始使用Realm的时候也是碰过不少坑，不过最主要的是所有数据库对象需要继承 **RealmObject** 这个类(也可以通过接口实现)，这样对项目已有的数据结构不太友好，同时我还发现继承了 **RealmObject** 的对象并不能与 **Gson** 完美结合，如果需要转换的话，还是得费一番周折的。\r\n种种原因，导致我最后从项目中抽去了Realm这个数据库.\r\n\r\n### Room\r\n\r\n与 Realm 分手后的日子里，我并没有放弃对新的数据库的寻找，后来在浏览 Google官方文档的时候才发现了 **Room** 这个新的数据库，经过我一番使用后，就决定是它了！\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/001-002.jpg)\r\n\r\n\r\n## 比较\r\n\r\n因为懒惰的原因，我并没有做过深入的测试，下面会给出从网上找到的关于这些数据库的对比，原文地址如下：\r\n\r\n[**Realm, ObjectBox or Room. Which one is for you?**](https://notes.devlabs.bg/realm-objectbox-or-room-which-one-is-for-you-3a552234fd6e)\r\n\r\n然后是数据量达到 **100k/10k** 的时候，进行增删改查等操作消耗的时间对比：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/001.jpeg)\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/002.jpeg)\r\n\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/003.jpeg)\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/004.jpeg)\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/005.jpeg)\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/006.jpeg)\r\n\r\n可以看到，在各个方面，统统都是 **ObjectBox** 傲视群雄。  \r\n那这篇文章为什么还是要写介绍关于 **Room Database** 呢？\r\n\r\n首先是官方Buff加持，和介绍文档里的一句话：  \r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/007.png)  \r\n[这里是Room的官方介绍文档地址](https://developer.android.google.cn/training/data-storage/room/)\r\n\r\n大致意思就是：**我们强烈建议你用Roon去代替SQLite，不过如果你是个铁头娃非得用SQLite，那我们也没有办法。**\r\n\r\n除了上面这段话，还有一点也可以作为选择Room的原因，就是对于Apk的“增量”是多少。据别人的测试\r\n\r\n> ObjectBox和Realm分别占用1-1.5MB和3-4MB（大小取决于手机架构），而作为SQL封装的Room只占用大约50KB。在方法的增量上，Room只有300多个，ObjectBox和Realm则分别是1300和2000个\r\n\r\n\r\n当然，如果你的数据量很大的话，我觉得还是 **ObjectBox** 更加适合你，因为就从上面的操作数据对比来看， **ObjectBox** 太牛逼了！我以后肯定也会花时间去对 **ObjectBox** 做一番研究，不过目前还是先来介绍介绍 **Room** 吧。\r\n\r\n\r\n# 二、Room的结构\r\n\r\n之前有说过，**Room** 是可以代替 **SQLite** 的，不过我觉得Google推出它更多的是为了搭配 **DataBinding** 使用，如果你对于 **DataBinding** 不太熟悉，可以看一看我前面的关于 **DataBinding** 的文章，这里就不再赘述了。下面就开始说说 **Room** 的结构。\r\n\r\nRoom主要分为三个部分，分别是 **Database**(数据库) 、**Entity**(实体) 、**DAO**(数据访问对象) \r\n\r\n## Database(数据库)\r\n\r\n数据库指的就是一个数据库对象，它继承于 **RoomDataBase** 这个类，并且需要用 **@DataBase** 注解，获取这个数据库对象的方法是通过调用 **Room.databaseBuilder()** 或者 **Room.inMemoryDatabaseBuilder()** ，后者表示在内存中存储数据，如果程序结束了数据也就消失了，所以一般还是使用前者。\r\n\r\n## Entity(实体)\r\n\r\n实体的概念就比较简单了，就类似于MySQL数据库里面的表，一个实体类相当于一个表，而一个实体类有多个属性，就相当于表的多个字段，这个看一看接下来关于 **Entity** 的代码便一目了然。\r\n\r\n## DAO\r\n\r\n关于 **DAO** ，抽象的概念就表示**数据访问对象**，在这里简单的解释一下就是数据操作接口，可以通过编写 **DAO接口** 对数据库进行增删改查等一系列操作。  \r\n> PS:这些接口可以支持RxJava的哦！\r\n\r\n下面是图片说明：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/009.png)\r\n\r\n# 三、开始使用\r\n\r\n在 **Room** 的使用过程中，也是遇到一些坑的，不过都已经解决掉了。如果你也遇到过某些问题，不妨对照一下我的接入流程，说不定就找到了问题所在。\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/008.png)\r\n\r\n## 接入Gradle\r\n\r\n为了避免之后的单元测试出现 <font color=\"#DC143C\">java.lang.RuntimeException: Method e in android.util.Log not mocked. See http://g.co/androidstudio/not-mocked for details.</font> 的错误，除了 **Room** 相关的依赖需要添加外，这里还需要再引用一下 **robolectric单元测试库** 解决问题！\r\n\r\n```\r\n    //room数据库\r\n    def room_version = \"1.1.1\"\r\n    implementation \"android.arch.persistence.room:runtime:$room_version\"\r\n    annotationProcessor \"android.arch.persistence.room:compiler:$room_version\"\r\n    kapt \"android.arch.persistence.room:compiler:$room_version\"      // 由于要使用Kotlin,这里使用了kapt\r\n    implementation \"android.arch.persistence.room:rxjava2:$room_version\"        //之后会用到rxjava，所以这里也可以有\r\n//    implementation \"android.arch.persistence.room:guava:$room_version\"        //由于我们不用guava，这行注释掉\r\n    testImplementation \"android.arch.persistence.room:testing:$room_version\" \r\n    \r\n    //robolectric测试\r\n    testImplementation 'org.robolectric:shadows-multidex:3.8'\r\n    testImplementation \"org.robolectric:robolectric:3.8\"\r\n    //这样就资瓷单元测试咯！\r\n```\r\n\r\n和我一样使用Kotlin的童鞋别忘了下面这行：\r\n\r\n```\r\napply plugin: 'kotlin-kapt'\r\n```\r\n还有，需要做如下更改：\r\n\r\n```\r\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\r\n\r\n    //更改为\r\n    implementation 'com.android.support.test:runner:1.0.2'\r\n\r\n```\r\n这点一定要改哦！不然会出现一些莫名其妙的问题\r\n\r\n\r\n\r\n\r\n相关库的依赖成功添加后就可以开始动手了！\r\n\r\n## 创建 Entity、Dao 与 DataBase\r\n\r\n### 创建Entity\r\n\r\n首先，创建一个 **Entity** 对象，就把它命名为 **Book** 吧\r\n\r\n\r\n```\r\n@Entity\r\nclass Book(@field:ColumnInfo(name = \"book_name\")\r\n           var bookName: String?, var author: String?, var type: String?) {\r\n\r\n    @PrimaryKey(autoGenerate = true)\r\n    var id: Int = 0\r\n}\r\n```\r\n**Book** 有三个属性，分别表示书名、作者、类型。其中有三点需要注意：\r\n\r\n- 每个 **Entity对象** 都需要使用 **@Entity** 注释声明\r\n- **@PrimaryKey** 注释用于声明主键，这里还添加了 autoGenerate = true，表示它是自增的\r\n- **@ColumnInfo** 注释用来给属性设置别名，如果 **bookName** 属性不设置别名的话，查询的时候可以通过 “**bookName**”进行查询，设置别名后就可以通过设置的“**book_name**” 进行查询了，看 **DAO接口** 便知\r\n\r\n\r\n\r\n### 创建 DAO \r\n\r\n这里，通过 **DAO接口** 来对 **Book** 这个对象进行增删改查：\r\n\r\n```\r\n@Dao\r\ninterface BookDao {\r\n\r\n    @get:Query(\"SELECT * FROM book\")\r\n    val all: List<Book>\r\n\r\n    @Query(\"SELECT * FROM book WHERE author LIKE :author\")\r\n    fun getBookByAuthor(author: String): List<Book>\r\n\r\n    @Query(\"SELECT * FROM book WHERE book_name LIKE :name\")\r\n    fun getBookByNamer(name: String): List<Book>\r\n\r\n    @Insert\r\n    fun insert(book: Book): Long?\r\n\r\n    @Insert\r\n    fun insert(vararg books: Book): List<Long>\r\n\r\n    @Insert\r\n    fun insert(books: List<Book>): List<Long>\r\n\r\n    @Update\r\n    fun update(book: Book): Int\r\n\r\n    @Update\r\n    fun update(vararg books: Book): Int\r\n\r\n    @Update\r\n    fun update(books: List<Book>): Int\r\n\r\n    @Delete\r\n    fun delete(book: Book): Int\r\n\r\n    @Delete\r\n    fun delete(vararg books: Book): Int\r\n\r\n    @Delete\r\n    fun delete(books: List<Book>): Int\r\n\r\n}\r\n```\r\n\r\n上面的 **DAO接口**，同样需要进行几点说明：\r\n\r\n- **DAO接口** 需要使用 **@Dao** 注释进行声明\r\n- **Insert** 操作可以使用 **Long** 作为返回值的类型，表示插入操作前的对象数量\r\n- **Update** 和 **Delete** 操作可以使用 Int 作为返回值，表示更新或者删除的行数\r\n- 返回类型还可以是 **void** ，如果结合 **Rxjava** 使用的话还可以是 **Completable、Single、 Maybe、Flowable**等，具体可以参见这篇文章：[Room 🔗 RxJava](https://medium.com/androiddevelopers/room-rxjava-acb0cd4f3757)(需要备好梯子，不过后续有时间的话我也会介绍一下Room搭配Rxjava的使用)\r\n\r\n**Dao接口** 编写完成后，还剩下最重要的 **DataBase**\r\n\r\n### 创建 DataBase\r\n\r\n> 由于实例化一个 **RoomDatabase** 对象的开销是比较大的，所以 **DataBase** 的使用需要遵循单例模式，只在全局创建一个实例即可。\r\n\r\n这里为了方便理解，还是使用java代码去创建一个 **BookDataBase类**，当然，转换成Kotlin只需要Shift + Alt + Ctrl + K 即可\r\n\r\n如果你使用的是饿汉式的单例模式，在Kotlin中通过object修饰可达到同样效果\r\n```\r\n@Database(entities = {Book.class}, version = 1)\r\npublic abstract class BookDataBase extends RoomDatabase {\r\n    public abstract BookDao bookDao();\r\n    private static BookDataBase instance;\r\n\r\n    public static BookDataBase getInstance(Context context){\r\n        if (instance == null){\r\n            synchronized (BookDataBase.class){\r\n                if (instance == null){\r\n                    instance = create(context);\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    private static BookDataBase create(Context context) {\r\n        return Room.databaseBuilder( context,BookDataBase.class,\"book-db\").allowMainThreadQueries().build();\r\n    }\r\n}\r\n```\r\n\r\n上面的例子中有一些需要特别注意：\r\n\r\n- **@Database** 注释用于进行声明，同时还需要有相关的 **entity对象**，其中 **version** 是当前数据库的版本号，如果你对数据相关的**实体类结构**进行了更改，这里的 **version** 就需要**加一**\r\n- **BookDataBase** 除了继承于 **RoomDatabase** ，还需要实例出相关的 **DAO接口**\r\n- create()方法中的\"**book-db**\"是数据库的名字，这里随意，不过需要注意的是 **allowMainThreadQueries()** 方法，这里由于我们会用到单元测试，所以加上这行代码是为了防止 【*Cannot access database on the main thread since it may potentially lock the UI for a long period of time.*】 的报错。正式使用时，请务必去掉这行代码，因为它会让所有耗时操作运行在主线程！\r\n\r\n到这里，我们就可以先愉快的进行测试了.\r\n\r\n\r\n\r\n## 测试\r\n\r\n### 初级测试\r\n\r\n找到 **src** 下的 **test** 目录，然后可以像我这样创建一个 **RoomTest** 类进行测试\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/010.png)\r\n\r\n说到这里，可能会有童鞋尚未了解过单元测试，这时候你可以先去看看相关博客，比如这篇\r\n\r\n[Android 单元测试只看这一篇就够了](https://juejin.im/post/5b57e3fbf265da0f47352618)\r\n\r\n不过这里使用的单元测试是 Android Studio 自带的，也没有用到太复杂的东西，同时我会做一些说明，不够了解的童鞋也可以继续往下看，看完你也就了解了\r\n\r\n\r\n```\r\n@RunWith(AndroidJUnit4::class)\r\nclass RoomTest {\r\n\r\n    private var bookDao: BookDao? = null\r\n    private var bookDataBase: BookDataBase? = null\r\n\r\n    @Before\r\n    @Throws(Exception::class)\r\n    fun setUp() {\r\n        ShadowLog.stream = System.out      //这样方便打印日志\r\n        val context = InstrumentationRegistry.getTargetContext()\r\n        bookDataBase = BookDataBase.getInstance(context)\r\n        bookDao = bookDataBase?.bookDao()\r\n    }\r\n\r\n\r\n    @Test\r\n    fun insert() {\r\n        val book1 = Book(\"时间简史\", \"斯蒂芬·威廉·霍金\", \"科学\")\r\n        val book2 = Book(\"百年孤独\", \"西亚·马尔克斯\", \"文学\")\r\n        val list = bookDao?.insert(book1, book2)\r\n\r\n        assert(list?.size == 2)\r\n    }\r\n\r\n    @Test\r\n    fun query(){\r\n        val books = bookDao?.all\r\n        for (book in books?: emptyList()) {\r\n            Log.e(javaClass.name, \"获取的书籍数据: ${Gson().toJson(book)}\")\r\n        }\r\n    }\r\n\r\n    @After\r\n    @Throws(Exception::class)\r\n    fun cloaseDb() {\r\n        bookDataBase?.close()\r\n    }\r\n}\r\n```\r\n\r\n可以看到，这里的单元测试使用的是 **AndroidJUnit4**，通过 **@Before** 注释的方法，表示用于**相关资源的初始化**，类似于Activity的onCreate()方法；而通过 **@After** 注释的方法，则是用于**相关资源的销毁**，类似于Activity的onDestroy()方法。\r\n\r\n剩下的，通过 **@Test** 注释的方法就表示用于测试的单元，每个测试类里面可以有多个测试单元，这里目前只写了插入和查询两个单元，在 **RoomTest** 类上通过右键运行，然后看一下结果：\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/011.png)\r\n\r\n在测试代码中的 **insert()单元 ** 里，有这样一行代码：\r\n\r\n```\r\nassert(list.size == 2)\r\n```\r\n而测试的结果是一片绿色，就表示这个断言是正确的，list列表长度刚好为2，这里为了验证返回的list是整个数据库长度还是仅仅表示此次进行插入操作的长度，我们修改一下 insert()测试单元：\r\n\r\n```\r\n   @Test\r\n    fun insert() {\r\n        val book1 = Book(\"时间简史\", \"斯蒂芬·威廉·霍金\", \"科学\")\r\n        val book2 = Book(\"百年孤独\", \"西亚·马尔克斯\", \"文学\")\r\n        val list = bookDao?.insert(book1, book2)\r\n        assert(list?.size == 2)\r\n\r\n        val list2 = bookDao?.insert(book1, book2)\r\n        assert(list2?.size == 4)\r\n    }\r\n```\r\n\r\n这时候在 **insert()单元测试区域** 右键运行，就只测试这一个单元，然后结果如下：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/012.png)\r\n\r\n我们在 insert()单元 中进行了两次插入操作，所以数据库的总长度应该为 4 ，而这里第39行的代码：\r\n\r\n```\r\nassert(list2?.size == 4)\r\n```\r\n返回的cede 是 -1，就表示实际上每次插入操作返回的列表长度应该为插入的数量，而非数据库总量。其他操作亦是如此。\r\n\r\n在单元测试中，我们的测试并不能直接用于正式的项目中，因为数据库操作属于耗时操作，所以一定不能把这些操作放在主线程里，而最方便的线程切换，莫过于 **Rxjava** 啦！\r\n\r\n现在开始使用 **Rxjava** 进行测试吧\r\n\r\n### 结合Rxjava的测试\r\n\r\n首先，要在项目中添加 **Rxjava** 的依赖：\r\n\r\n```\r\n    //rxJava2+rxAndroid\r\n    implementation \"io.reactivex.rxjava2:rxjava:2.x.y\"\r\n    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'\r\n```\r\n\r\n在单元测试中，RxJava 如果做 **IO线程** 到 **UI线程** 的切换操作，结果是无法获取的，所以需要将这些线程进行合并，方法如下：\r\n\r\n```\r\n    @Before\r\n    @Throws(Exception::class)\r\n    fun setUp() {\r\n        val context = InstrumentationRegistry.getTargetContext()\r\n        bookDataBase = BookDataBase.getInstance(context)\r\n        bookDao = bookDataBase?.bookDao()\r\n        ShadowLog.stream = System.out\r\n\r\n        initRxJava2()\r\n    }\r\n    \r\n    private fun initRxJava2() {\r\n        RxJavaPlugins.reset()\r\n        RxJavaPlugins.setIoSchedulerHandler { Schedulers.trampoline() }\r\n        RxAndroidPlugins.reset()\r\n        RxAndroidPlugins.setMainThreadSchedulerHandler { Schedulers.trampoline() }\r\n    }\r\n```\r\n\r\n在 **@Before注解** 下的 **setUp()** 方法中进行RxJava的配置，然后我们可以把RxJava常用的线程切换写在一个方法里，方便复用：\r\n\r\n```\r\n    private fun<T> doWithRxJava(t: T): Observable<T>{\r\n        return Observable.create<T>{it.onNext(t)}\r\n                .subscribeOn(Schedulers.io())\r\n                .unsubscribeOn(Schedulers.io())\r\n                .observeOn(AndroidSchedulers.mainThread())\r\n    }\r\n```\r\n\r\n接着，对 **insert单元** 和 **query单元** 进行修改：\r\n\r\n```\r\n    @Test\r\n    fun insert() {\r\n        val book1 = Book(\"时间简史\", \"斯蒂芬·威廉·霍金\", \"科学\")\r\n        val book2 = Book(\"百年孤独\", \"西亚·马尔克斯\", \"文学\")\r\n        doWithRxJava(bookDao?.insert(book1, book2))\r\n                .subscribe ({\r\n                    Log.e(\"insert长度：\" , \"${it?.size}\")\r\n                    assert(it?.size == 2)\r\n                },{\r\n                    Log.e(\"insert出错：\" , \"${it.stackTrace}-${it.message}\")\r\n                })\r\n    }\r\n\r\n    @Test\r\n    fun query(){\r\n        doWithRxJava(bookDao?.all)\r\n                .subscribe({\r\n                    for(book in it?: emptyList()){\r\n                        Log.e(javaClass.name, \"获取的书籍数据: ${Gson().toJson(book)}\")\r\n                        assert(it?.size == 2)\r\n                    }\r\n                },{\r\n                    Log.e(\"query出错：\" , \"${it.stackTrace}-${it.message}\")\r\n                })\r\n    }\r\n```\r\n\r\n然后看一下测试的结果：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/013.png)\r\n\r\n\r\n那么， **Room DataBase** 的入门指南，就写到这里啦！\r\n\r\n后续我可能会再写一篇进阶版的文章，涵盖了真实使用的场景，然后看能不能写一个简单的Demo出来，这样更方便学习吧！\r\n\r\n~~*不过我发现我现在的懒癌是越来越严重了，也不知道下一篇是什么时候*~~\r\n\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/Room-Database/014.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","7bf38c53":"---\r\ntitle: View绘制流程\r\ndate: 2020-03-29 02:59:57\r\nindex_img: /img/view_step.png\r\ntags: 源码系列\r\n---\r\n# 序\r\n\r\n上一篇分析完了Activity的启动流程。这一篇就要来分析View的绘制流程啦。\r\n\r\n\r\n# 引子\r\n\r\n每次分析都需要一个入口。那么这次入口在哪里呢？有过自定义View经验的同学都遇到过那三个熟知的方法: `onMeasure`、`onLayout`、`onDraw` \r\n\r\n所以一般都会从这里开始入手，不过因为刚刚了解了Activity的启动流程，所以这里我们会从启动流程的末尾部分开始作为入口进行分析\r\n\r\n# 开始\r\n\r\n在之前的文章 [Activity启动流程分析](http://oldben.gitee.io/flutter-blog/#/articlePage/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90) 中，有介绍过，Activity启动流程最后需要经过 `ActivityThread` 的 `performLaunchActivity(...)` 方法\r\n\r\n\r\n## 开始之前\r\n\r\n在 `ActivityThread` 的 `performLaunchActivity(...)` 方法中，调用了下面的方法：\r\n\r\n```\r\n    private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) {\r\n                ...\r\n                activity.attach(appContext, this, getInstrumentation(), r.token,\r\n                        r.ident, app, r.intent, r.activityInfo, title, r.parent,\r\n                        r.embeddedID, r.lastNonConfigurationInstances, config,\r\n                        r.referrer, r.voiceInteractor, window, r.configCallback);\r\n                ...\r\n                if (r.isPersistable()) {\r\n                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);\r\n                } else {\r\n                    mInstrumentation.callActivityOnCreate(activity, r.state);\r\n                }\r\n                ...\r\n    }\r\n```\r\n在我们熟知的 Activity的生命周期里，`attach(...)` 方法是就用于做周期前的准备工作。\r\n\r\n我们看一下它具体都做了些什么：\r\n\r\n\r\n```\r\n    //Activity\r\n    \r\n    private Window mWindow;\r\n\r\n    final void attach(Context context, ActivityThread aThread,\r\n            Instrumentation instr, IBinder token, int ident,\r\n            Application application, Intent intent, ActivityInfo info,\r\n            CharSequence title, Activity parent, String id,\r\n            NonConfigurationInstances lastNonConfigurationInstances,\r\n            Configuration config, String referrer, IVoiceInteractor voiceInteractor,\r\n            Window window, ActivityConfigCallback activityConfigCallback) {\r\n        ...        \r\n        mWindow = new PhoneWindow(this, window, activityConfigCallback);\r\n        ...\r\n        mWindow.setWindowManager(...);\r\n    }\r\n\r\n```\r\n\r\n\r\n上面的内容主要展示了 `PhoneWindow` 对象的初始化。在这里，就简单看一下 `Window` 和 `PhoneWindow` 的关系吧：\r\n\r\n\r\n```\r\n//Window\r\npublic abstract class Window {...}\r\n\r\n//PhoneWindow\r\npublic class PhoneWindow extends Window implements MenuBuilder.Callback {...}\r\n```\r\n可以看到，`Window` 是一个抽象类，而 `PhoneWindow` 是 `Window` 的子类，算是`Window` 的实现之一。\r\n\r\n\r\n我们已经知道了在 `attach(...)` 中初始化了 `PhoneWindow` 对象，那么接下来的流程该往哪里走呢？\r\n\r\n\r\n我们知道，Activity的生命周期，从 `onCreate` 开始，到 `onStart` 再到 `onResume`, 而在 `attach(...)` 之后，就会通过 `Instrumentation` 进入到 Activity的 `onCreate`中。\r\n\r\n由于这篇文章主要关注 **View的绘制流程**，所以生命周期相关的流程，不会详细到每一步。我们看一下到了 `onCreate` 中具体做了些什么\r\n\r\n\r\n```\r\n    @CallSuper\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        ...\r\n        mFragments.dispatchCreate();\r\n        getApplication().dispatchActivityCreated(this, savedInstanceState);\r\n        ...\r\n    }\r\n```\r\n在 `onCreate` 中，并没有找到和View相关的内容。但是我们知道,我们每写的 `Activity` 的 `onCreate` 方法中,都存在一个方法 `setContentView(...)` 方法,它做了些什么呢?我们看一下\r\n\r\n```\r\n    //AppCompatActivity\r\n    @Override\r\n    public void setContentView(@LayoutRes int layoutResID) {\r\n        getDelegate().setContentView(layoutResID);\r\n    }\r\n    ...\r\n    //AppCompatDelegateImpl\r\n    @Override\r\n    public void setContentView(int resId) {\r\n        ensureSubDecor();\r\n        ...\r\n    }\r\n    ...\r\n    private void ensureSubDecor() {\r\n        if (!mSubDecorInstalled) {\r\n            mSubDecor = createSubDecor();\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n    ...\r\n    private ViewGroup createSubDecor() {\r\n        ...\r\n        mWindow.getDecorView();\r\n        ...\r\n    }\r\n    ...\r\n    //PhoneWindow\r\n    @Override\r\n    public final View getDecorView() {\r\n        if (mDecor == null || mForceDecorInstall) {\r\n            installDecor();\r\n        }\r\n        return mDecor;\r\n    }\r\n\r\n```\r\n可以看到,在 `setContentView(...)` 中,我们对 `AppCompatDelegateImpl` 的各种方法调用,最后来到 `PhoneWindow` 的 `getDecorView()` 中,通过 `installDecor()` 完成了 `DecorView` 的初始化。当然,除了这些,还有其他布局的初始化等,在这里就不详说了。既然在 `onCreate` 中创建了 `DecorView` \r\n\r\n那么后面两个生命周期呢？\r\n\r\n接下来我们去另外两个生命周期看一看，不过这时候问题来了。另外两个生命周期是怎么走到的？\r\n\r\n看来，我们有必要先了解一下，在哪里我们会进入  `onStart` 和  `onResume`\r\n\r\n## 生命周期\r\n\r\n在上一篇，[Activity启动流程分析](http://oldben.gitee.io/flutter-blog/#/articlePage/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90) 中，我们知道跳转到 `ActivityThread` 之前，是在 `ActivityStackSupervisor` 内的 `realStartActivityLocked(...)` 开启事务处理的：\r\n\r\n\r\n```\r\n    //ActivityStackSupervisor\r\n    \r\n    final boolean realStartActivityLocked(ActivityRecord r, ProcessRecord app,\r\n            boolean andResume, boolean checkConfig) throws RemoteException {\r\n                \r\n                ...\r\n                // Create activity launch transaction.\r\n                final ClientTransaction clientTransaction = ClientTransaction.obtain(app.thread,\r\n                        r.appToken);\r\n                clientTransaction.addCallback(LaunchActivityItem.obtain(new Intent(r.intent),\r\n                        System.identityHashCode(r), r.info,\r\n                        // TODO: Have this take the merged configuration instead of separate global\r\n                        // and override configs.\r\n                        mergedConfiguration.getGlobalConfiguration(),\r\n                        mergedConfiguration.getOverrideConfiguration(), r.compat,\r\n                        r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,\r\n                        r.persistentState, results, newIntents, mService.isNextTransitionForward(),\r\n                        profilerInfo));\r\n\r\n                // Set desired final state.\r\n                final ActivityLifecycleItem lifecycleItem;\r\n                if (andResume) {\r\n                    lifecycleItem = ResumeActivityItem.obtain(mService.isNextTransitionForward());\r\n                } else {\r\n                    lifecycleItem = PauseActivityItem.obtain();\r\n                }\r\n                clientTransaction.setLifecycleStateRequest(lifecycleItem);\r\n\r\n                // Schedule transaction.\r\n                mService.getLifecycleManager().scheduleTransaction(clientTransaction);\r\n                ...\r\n                \r\n    }\r\n```\r\n这之间的逻辑会比较扩散，可以参考一下上一篇最后两种总结图的 `Activity流程总结图` 第14步到第15步。\r\n\r\n`mService.getLifecycleManager()` 获取的 `ClientLifecycleManager` 对象，通过调用这个对象的 `scheduleTransaction(...)` 方法，就开始了接下来的内容\r\n\r\n\r\n```\r\n//1.scheduleTransaction(...)\r\nclass ClientLifecycleManager {\r\n    ...\r\n    void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\r\n        final IApplicationThread client = transaction.getClient();\r\n        transaction.schedule();\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\r\n//2.schedule()\r\npublic class ClientTransaction implements Parcelable, ObjectPoolItem {\r\n    ...\r\n    private IApplicationThread mClient;\r\n    ...\r\n    public void schedule() throws RemoteException {\r\n        mClient.scheduleTransaction(this);\r\n    }\r\n    ...\r\n}\r\n\r\n//3.scheduleTransaction(...)\r\npublic final class ActivityThread extends ClientTransactionHandler {\r\n    ...\r\n    private class ApplicationThread extends IApplicationThread.Stub {\r\n        ...\r\n        @Override\r\n        public void scheduleTransaction(ClientTransaction transaction) throws RemoteException {\r\n            ActivityThread.this.scheduleTransaction(transaction);\r\n        }\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\r\n//4.scheduleTransaction(...)\r\npublic abstract class ClientTransactionHandler {\r\n    ...\r\n    void scheduleTransaction(ClientTransaction transaction) {\r\n        transaction.preExecute(this);\r\n        sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction);\r\n    }\r\n    ...\r\n}\r\n\r\n//5.EXECUTE_TRANSACTION\r\npublic final class ActivityThread extends ClientTransactionHandler {\r\n    ...\r\n    class H extends Handler {\r\n        ...\r\n        public void handleMessage(Message msg) {\r\n            switch (msg.what) {\r\n                ...\r\n                case EXECUTE_TRANSACTION:\r\n                    final ClientTransaction transaction = (ClientTransaction) msg.obj;\r\n                    mTransactionExecutor.execute(transaction);\r\n                    ...\r\n                    break;\r\n                ...\r\n            }\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\r\n```\r\n可以看到，上面走到第五步之后，会来到 `TransactionExecutor` 对象的 `execute` 方法。\r\n\r\n而 `TransactionExecutor` 正是切换各个生命周期非常重要的一个对象\r\n\r\n### TransactionExecutor\r\n\r\n```\r\npublic class TransactionExecutor {\r\n    ...\r\n    public void execute(ClientTransaction transaction) {\r\n        ...\r\n        executeCallbacks(transaction);\r\n\r\n        executeLifecycleState(transaction);\r\n        ...\r\n    }\r\n    \r\n    public void executeCallbacks(ClientTransaction transaction) {\r\n        final List<ClientTransactionItem> callbacks = transaction.getCallbacks();\r\n        ...\r\n        final int size = callbacks.size();\r\n        for (int i = 0; i < size; ++i) {\r\n            ...\r\n            item.execute(mTransactionHandler, token, mPendingActions);\r\n            item.postExecute(mTransactionHandler, token, mPendingActions);\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n    \r\n    private void executeLifecycleState(ClientTransaction transaction) {\r\n        final ActivityLifecycleItem lifecycleItem = transaction.getLifecycleStateRequest();\r\n        ...\r\n        cycleToPath(r, lifecycleItem.getTargetState(), true /* excludeLastState */);\r\n        lifecycleItem.execute(mTransactionHandler, token, mPendingActions);\r\n        lifecycleItem.postExecute(mTransactionHandler, token, mPendingActions);\r\n    }\r\n    \r\n    ...\r\n    \r\n}\r\n```\r\n上面的 `executeCallbacks(...)` 是处理我们之前传入的 `LaunchActivityItem` 对象，最后会执行到它的 `execute()` 方法，然后走到 `ActivityThread` 的 `handleLaunchActivity` 方法去初始化一个Activity。但在这里我们不关心这个，我们主要关心生命周期到底是如何执行到 `onStart` 和 `onResume` 的\r\n\r\n所以，这里需要关注 `executeLifecycleState(...)` 方法，因为它才和生命周期有关。\r\n\r\n上面的 `ActivityLifecycleItem` 对象，就是之前在 `realStartActivityLocked(...)`方法中传入的 `ResumeActivityItem` , 而每个Item都对应了一个生命周期：\r\n\r\n- `onCreate` : 无对应Item\r\n- `onStart` : 无对应Item\r\n- `onResume` : 对应 `ResumeActivityItem`\r\n- `onPause` : 对应 `PauseActivityItem`\r\n- `onStop` : 对应 `StopActivityItem`\r\n- `onDestory`: 对应  `DestroyActivityItem`\r\n- `onRestart`: 无对应Item\r\n\r\n我们可以先看一下 `ResumeActivityItem` 中的  `execute(...)` 方法\r\n\r\n\r\n```\r\n    //ResumeActivityItem\r\n    \r\n    @Override\r\n    public void execute(ClientTransactionHandler client, IBinder token,\r\n            PendingTransactionActions pendingActions) {\r\n        ...\r\n        client.handleResumeActivity(token, true /* finalStateRequest */, mIsForward,\r\n                \"RESUME_ACTIVITY\");\r\n        ...\r\n    }\r\n```\r\n这里的 **client** 对象自然是继承了 `ClientTransactionHandler` 的 `ActivityThread`\r\n\r\n如果看过其他 **Item** 代码的话，会发现每一个的 `execute(...)` 方法，都会调用到 `ActivityThread` 中对应的 `handle...Activity(...)` 方法，也会在那个方法执行到对应的生命周期\r\n\r\n比如 `handleStopActivity(...)` 就执行 `onStop` 生命周期相关逻辑， `handleStartActivity(...)` 执行 `onStart` 生命周期相关逻辑。\r\n\r\n但是到这里问题又来了。 `onStart` 到底是谁执行的？在哪里执行的？到现在也没看到。\r\n\r\n这里，我们继续关注 `executeLifecycleState(...)` 方法，其中还有一个 `cycleToPath(...)`，它也是执行生命周期的组成部分。\r\n\r\n因为上面的某些生命周期没有对应 **Item** 去执行 `handle...Activity(...)`方法，所以会通过其他方法调用 `handle...Activity(...)` ，这里就是其中之一\r\n\r\n\r\n```\r\n    private void cycleToPath(ActivityClientRecord r, int finish,\r\n            boolean excludeLastState) {\r\n        final int start = r.getLifecycleState();\r\n        final IntArray path = mHelper.getLifecyclePath(start, finish, excludeLastState);\r\n        performLifecycleSequence(r, path);\r\n    }\r\n    \r\n    private void performLifecycleSequence(ActivityClientRecord r, IntArray path) {\r\n        final int size = path.size();\r\n        for (int i = 0, state; i < size; i++) {\r\n            state = path.get(i);\r\n            log(\"Transitioning to state: \" + state);\r\n            switch (state) {\r\n                case ON_CREATE:\r\n                    mTransactionHandler.handleLaunchActivity(r, mPendingActions,\r\n                            null /* customIntent */);\r\n                    break;\r\n                case ON_START:\r\n                    mTransactionHandler.handleStartActivity(r, mPendingActions);\r\n                    break;\r\n                case ON_RESUME:\r\n                    mTransactionHandler.handleResumeActivity(r.token, false /* finalStateRequest */,\r\n                            r.isForward, \"LIFECYCLER_RESUME_ACTIVITY\");\r\n                    break;\r\n                case ON_PAUSE:\r\n                    mTransactionHandler.handlePauseActivity(r.token, false /* finished */,\r\n                            false /* userLeaving */, 0 /* configChanges */, mPendingActions,\r\n                            \"LIFECYCLER_PAUSE_ACTIVITY\");\r\n                    break;\r\n                case ON_STOP:\r\n                    mTransactionHandler.handleStopActivity(r.token, false /* show */,\r\n                            0 /* configChanges */, mPendingActions, false /* finalStateRequest */,\r\n                            \"LIFECYCLER_STOP_ACTIVITY\");\r\n                    break;\r\n                case ON_DESTROY:\r\n                    mTransactionHandler.handleDestroyActivity(r.token, false /* finishing */,\r\n                            0 /* configChanges */, false /* getNonConfigInstance */,\r\n                            \"performLifecycleSequence. cycling to:\" + path.get(size - 1));\r\n                    break;\r\n                case ON_RESTART:\r\n                    mTransactionHandler.performRestartActivity(r.token, false /* start */);\r\n                    break;\r\n                default:\r\n                    throw new IllegalArgumentException(\"Unexpected lifecycle state: \" + state);\r\n            }\r\n        }\r\n    }\r\n```\r\n在上面的方法可以看到，会在一个for循环中，根据传入的 `IntArray` 来执行对应方法。\r\n\r\n从 **ON_CREATE** 到 **ON_RESTART** 的值分别是从1到7递增。而传递进入的 `IntArray` 会根据 `start`、`finish` 以及 `TransactionExecutorHelper` 的 `getLifecyclePath(...)` 方法来得出结果。\r\n\r\n在这里，因为此前已经执行了 `onCreate` 周期，所以 `start` 是 **ON_CREATE**，也就是 **1** ，而 `finish` 是 **ON_RESUME**，也就是 **3** 。但是生产的 `IntArray` 并不是 **[1,2,3]** ，而是 **[2]** ，正好是 **[ON_START]**。至于原因嘛，我们看一下 `getLifecyclePath(...)` 方法\r\n\r\n\r\n```\r\n    //TransactionExecutorHelper\r\n    public IntArray getLifecyclePath(int start, int finish, boolean excludeLastState) {\r\n        ...\r\n        if (finish >= start) {\r\n            // just go there\r\n            for (int i = start + 1; i <= finish; i++) {\r\n                mLifecycleSequence.add(i);\r\n            }\r\n        } \r\n        ...\r\n        // Remove last transition in case we want to perform it with some specific params.\r\n        if (excludeLastState && mLifecycleSequence.size() != 0) {\r\n            mLifecycleSequence.remove(mLifecycleSequence.size() - 1);\r\n        }\r\n\r\n        return mLifecycleSequence;\r\n    }\r\n```\r\n传入的 `excludeLastState` 为 **ture**，相信你已经知道了为什么会产生上面的结果啦！\r\n\r\n所以这里我们就知道了，生命周期是如何执行了：\r\n\r\n- 首先通过 `cycleToPath(...)` 调用 `handleStartActivity(...)` 方法执行完 `onStart` 周期\r\n- 然后通过 `ResumeActivityItem` 的 `execute(...)` 方法调用 `handleResumeActivity(...)` 执行 `onResume` 生命周期\r\n\r\n由于  `handleStartActivity(...)` 中没有和 View绘制流程 相关的内容，所以我们直接来到 `handleResumeActivity(...)` 查看。\r\n\r\n\r\n## 进入流程\r\n\r\n### handleResumeActivity(...)\r\n\r\n进入到 `ActivityThread` 的 `handleResumeActivity(...)` 方法\r\n\r\n\r\n```\r\n    public void handleResumeActivity(IBinder token, boolean finalStateRequest, boolean isForward,\r\n            String reason) {\r\n        ...\r\n        final ActivityClientRecord r = performResumeActivity(token, finalStateRequest, reason);\r\n        ...\r\n        final Activity a = r.activity;\r\n        ...\r\n        boolean willBeVisible = !a.mStartedActivity;\r\n        ...\r\n        if (r.window == null && !a.mFinished && willBeVisible) {\r\n            r.window = r.activity.getWindow();\r\n            View decor = r.window.getDecorView();\r\n            decor.setVisibility(View.INVISIBLE);\r\n            ViewManager wm = a.getWindowManager();\r\n            WindowManager.LayoutParams l = r.window.getAttributes();\r\n            a.mDecor = decor;\r\n            l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;\r\n            l.softInputMode |= forwardBit;\r\n            ...\r\n            if (a.mVisibleFromClient) {\r\n                if (!a.mWindowAdded) {\r\n                    a.mWindowAdded = true;\r\n                    wm.addView(decor, l);\r\n                } \r\n                ...\r\n            }\r\n        }\r\n        ...\r\n    }\r\n```\r\n `mStartedActivity` 是只有当这个 Activity 有返回结果时才为 **true**，而 `mFinished` 是只有当 Activity 结束后才为 **true**。并且，我们之前有提到过，在 Activity的 `attach(...)` 方法中创建了 `PhoneWindow` 对象，但是这里的 `ActivityClientRecord` 的 `Window` 对象还是没有的\r\n \r\n 所以这里会进入这个 if 语句。通过 `PhoneWindow` 的 `getDecorView()` 来获取 `DecorView` 对象：\r\n\r\n上面的 `WindowManager` 则是在 Activity的 `attach(...)` 中设置到 Activity中的， `WindowManager` 的实现类是 `WindowManagerImpl`\r\n\r\n这里会通过 `addView(...)` 将 `DecorView` 添加进去。我们来看一下  `addView(...)` 方法\r\n\r\n### addView(...)\r\n\r\n\r\n```\r\npublic final class WindowManagerImpl implements WindowManager {\r\n    private final WindowManagerGlobal mGlobal = WindowManagerGlobal.getInstance();\r\n    ...\r\n    public void addView(@NonNull View view, @NonNull ViewGroup.LayoutParams params) {\r\n        applyDefaultToken(params);\r\n        mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);\r\n    }\r\n    ...\r\n}\r\n\r\n```\r\n加下来，进入 `WindowManagerGlobal`\r\n\r\n\r\n```\r\npublic final class WindowManagerGlobal {\r\n    private final ArrayList<View> mViews = new ArrayList<View>();\r\n    private final ArrayList<ViewRootImpl> mRoots = new ArrayList<ViewRootImpl>();\r\n    private final ArrayList<WindowManager.LayoutParams> mParams =\r\n            new ArrayList<WindowManager.LayoutParams>();\r\n    ...\r\n    public void addView(View view, ViewGroup.LayoutParams params,\r\n            Display display, Window parentWindow) {\r\n        ...\r\n        ViewRootImpl root;\r\n        ...\r\n        synchronized (mLock) {\r\n            ...\r\n            root = new ViewRootImpl(view.getContext(), display);\r\n\r\n            view.setLayoutParams(wparams);\r\n\r\n            mViews.add(view);\r\n            mRoots.add(root);\r\n            mParams.add(wparams);\r\n            try {\r\n                root.setView(view, wparams, panelParentView);\r\n            }\r\n            ...\r\n        }\r\n    }\r\n    ...\r\n}\r\n```\r\n可以看到，在这里初始化了 `ViewRootImpl` 对象，并对其添加了 `DecorView` ，来看一下 `setView(...)` 方法\r\n\r\n### setView(...)\r\n\r\n\r\n```\r\npublic final class ViewRootImpl implements ViewParent,\r\n        View.AttachInfo.Callbacks, ThreadedRenderer.DrawCallbacks {\r\n    ...\r\n    View mView;\r\n    final TraversalRunnable mTraversalRunnable = new TraversalRunnable();\r\n    ...\r\n    public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) {\r\n        synchronized (this) {\r\n            if (mView == null) {\r\n                mView = view;\r\n                ...\r\n                requestLayout();\r\n            }\r\n        }\r\n    }\r\n    ...\r\n    @Override\r\n    public void requestLayout() {\r\n        if (!mHandlingLayoutInLayoutRequest) {\r\n            checkThread();\r\n            mLayoutRequested = true;\r\n            scheduleTraversals();\r\n        }\r\n    }\r\n    ...\r\n    void scheduleTraversals() {\r\n        if (!mTraversalScheduled) {\r\n            ...\r\n            mChoreographer.postCallback(\r\n                    Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\r\n            ...\r\n        }\r\n    }\r\n    ...\r\n    final class TraversalRunnable implements Runnable {\r\n        @Override\r\n        public void run() {\r\n            doTraversal();\r\n        }\r\n    }\r\n    ...\r\n}\r\n```\r\n在 `setView(...)` 方法中，会通过 `requestLayout()` 最后执行到 `TraversalRunnable` 的 `run()` 方法，其中 `mChoreographer.postCallback()` 实际上调用的是 `FrameHandler` 的 `sendMessage(msg)` ，也就是通过 `Handler` 机制完成的。\r\n\r\n接着，我们看一下 `doTraversal()` 里面做了些什么\r\n\r\n\r\n```\r\n    void doTraversal() {\r\n        if (mTraversalScheduled) {\r\n            mTraversalScheduled = false;\r\n            mHandler.getLooper().getQueue().removeSyncBarrier(mTraversalBarrier);\r\n            ...\r\n            performTraversals();\r\n            ...\r\n        }\r\n    }\r\n```\r\n最后，走到了 `performTraversals()` 方法。这是View绘制流程中非常关键的一个方法，我们来看一看\r\n\r\n### performTraversals()\r\n\r\n这个方法体非常的长，而我们展示的内容将会非常的短\r\n\r\n```\r\n    private void performTraversals() {\r\n        ...\r\n        {\r\n            {\r\n                {\r\n                    ...\r\n                    int childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);\r\n                    int childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);\r\n                    ...\r\n                    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);\r\n                }\r\n            }\r\n                    \r\n        }\r\n        ...          \r\n        {\r\n            performLayout(lp, mWidth, mHeight);\r\n        }\r\n        ...\r\n        {\r\n            performDraw();\r\n        }\r\n        ...\r\n    }\r\n```\r\n\r\n可以看到，我们熟悉的那三个流程，都在这里出现啦！\r\n\r\n接下来，在开始介绍上面的三个方法之前，我们需要了解另外一个非常重要的对象 `MeasureSpec`\r\n\r\n\r\n# View绘制流程\r\n\r\n## MeasureSpec\r\n\r\n\r\n```\r\n    public static class MeasureSpec {\r\n        private static final int MODE_SHIFT = 30;\r\n        private static final int MODE_MASK  = 0x3 << MODE_SHIFT;\r\n        \r\n        public static final int UNSPECIFIED = 0 << MODE_SHIFT;\r\n        \r\n        public static final int EXACTLY     = 1 << MODE_SHIFT;\r\n        \r\n        public static final int AT_MOST     = 2 << MODE_SHIFT;\r\n        \r\n        public static int makeMeasureSpec(@IntRange(from = 0, to = (1 << MeasureSpec.MODE_SHIFT) - 1) int size,\r\n                                          @MeasureSpecMode int mode) {\r\n            if (sUseBrokenMakeMeasureSpec) {\r\n                return size + mode;\r\n            } else {\r\n                return (size & ~MODE_MASK) | (mode & MODE_MASK);\r\n            }\r\n        }\r\n        \r\n        public static int getMode(int measureSpec) { return (measureSpec & MODE_MASK); }\r\n        \r\n        public static int getSize(int measureSpec) { return (measureSpec & ~MODE_MASK); }\r\n    }\r\n```\r\n在 `MeasureSpec` 相关逻辑主要分为两个部分，分别是 **mode** 和 **size**。即通过一个 **32位的int** 数值来存储 **mode** 和 **size**\r\n\r\n后30位，用于存储 **height** 或 **width**，前2位，用于表示 View 的绘制模式，这其中，就分了三种模式：\r\n\r\n- **UNSPECIFIED** : 父布局对子布局的大小不做任何限制，子布局可以是任意大小。比如ScrollView这种\r\n- **EXACTLY** : 父布局对子布局的大小有一个确定的尺寸，无论子布局想要多大的空间，都会被这个尺寸限制住\r\n- **AT_MOST** : 在指定大小内，子布局要多大有多大\r\n\r\n上面的 `makeMeasureSpec(size, mode)` 方法就是用于将传入的大小与模式转换在 **32位的int** 数值中\r\n\r\n接下来，我们看一下之前的 `getRootMeasureSpec(...)` 方法\r\n\r\n\r\n```\r\n    private static int getRootMeasureSpec(int windowSize, int rootDimension) {\r\n        int measureSpec;\r\n        switch (rootDimension) {\r\n\r\n        case ViewGroup.LayoutParams.MATCH_PARENT:\r\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);\r\n            break;\r\n        case ViewGroup.LayoutParams.WRAP_CONTENT:\r\n            measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);\r\n            break;\r\n        default:\r\n            measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);\r\n            break;\r\n        }\r\n        return measureSpec;\r\n    }\r\n```\r\n可以看到，结果的模式是根据 `LayoutParams` 的中的布局模式返回的。默认是 `EXACTLY`，另外两个则是一一对应的关系：\r\n\r\n- **LayoutParams.MATCH_PARENT**: 对应 `EXACTLY` 模式\r\n- **LayoutParams.WRAP_CONTENT**: 对应 `AT_MOST` 模式\r\n\r\n`MeasureSpec` 相关内容介绍完了，那么要看一下 `performMeasure(...)` 方法了\r\n\r\n\r\n\r\n```\r\n    //ViewRootImpl\r\n    \r\n    private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) {\r\n        ...\r\n        try {\r\n            mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);\r\n        } \r\n        ...\r\n    }\r\n```\r\n这里调用了 `mView` 的 `measure(...)` 方法，而这个 `mView` 就是我们之前传入的 `DecorView`，我们看一下它的 `measure(...)` \r\n\r\n## measure(...)\r\n\r\n在 `DecorView` 中我们并没有发现 `measure(...)` 方法，我们可以看一下这个类的继承关系\r\n\r\n\r\n```\r\npublic class DecorView extends FrameLayout implements RootViewSurfaceTaker, WindowCallbacks {\r\n    ...\r\n}\r\n```\r\n `DecorView` 的继承关系如下：\r\n \r\n> DecorView => FrameLayout => ViewGroup => View\r\n \r\n除了在 `View` 中，你会发现其他地方都找不到 `measure(...)` ，这是为什么呢？我们看一下就知道了\r\n\r\n\r\n\r\n### View\r\n\r\n\r\n```\r\n    public final void measure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        ...\r\n        {\r\n            {\r\n                onMeasure(widthMeasureSpec, heightMeasureSpec);\r\n            }\r\n        }\r\n        ...\r\n    }\r\n    \r\n```\r\n可以看到， `measure(...)` 被关键词 **final** 修饰了，这说明子类是无法重写这个方法的。而它后面会调用 `onMeasure()` 方法，我们来看一下\r\n\r\n\r\n```\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\r\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\r\n    }\r\n    \r\n    protected int getSuggestedMinimumWidth() {\r\n        return (mBackground == null) ? mMinWidth : max(mMinWidth, mBackground.getMinimumWidth());\r\n    }\r\n    \r\n    protected int getSuggestedMinimumHeight() {\r\n        return (mBackground == null) ? mMinHeight : max(mMinHeight, mBackground.getMinimumHeight());\r\n    }\r\n    \r\n    public static int getDefaultSize(int size, int measureSpec) {\r\n        int result = size;\r\n        int specMode = MeasureSpec.getMode(measureSpec);\r\n        int specSize = MeasureSpec.getSize(measureSpec);\r\n\r\n        switch (specMode) {\r\n        case MeasureSpec.UNSPECIFIED:\r\n            result = size;\r\n            break;\r\n        case MeasureSpec.AT_MOST:\r\n        case MeasureSpec.EXACTLY:\r\n            result = specSize;\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    \r\n```\r\n\r\n可以先看一下 `getSuggestedMinimumWidth(...)` 和 `getSuggestedMinimumHeight(...)`\r\n\r\n- *getSuggestedMinimumWidth(...)* : 返回 **background最小宽度** 与 **view最小宽度** 两者间更大的那个\r\n- *getSuggestedMinimumHeight(...)* : 返回 **background最小高度** 与 **view最小高度** 两者间更大的那个\r\n\r\n这里的 `background` 就是当前View的背景(比如在xml设置的那个)\r\n\r\n然后看一下 `getDefaultSize(...)`，这里传入的 `size` 由 `getSuggestedMinimum...()` 得到。\r\n\r\n只有当 `mode` 为 **MeasureSpec.EXACTLY** 时，返回的是给定的大小；为另外两种模式时，返回的就是 `background` 和 `view` 之间大小的最大值。\r\n\r\n接下来就可以看一下 `setMeasuredDimension(...)` 方法了\r\n\r\n\r\n```\r\n    protected final void setMeasuredDimension(int measuredWidth, int measuredHeight) {\r\n        boolean optical = isLayoutModeOptical(this);\r\n        if (optical != isLayoutModeOptical(mParent)) {\r\n            Insets insets = getOpticalInsets();\r\n            int opticalWidth  = insets.left + insets.right;\r\n            int opticalHeight = insets.top  + insets.bottom;\r\n\r\n            measuredWidth  += optical ? opticalWidth  : -opticalWidth;\r\n            measuredHeight += optical ? opticalHeight : -opticalHeight;\r\n        }\r\n        setMeasuredDimensionRaw(measuredWidth, measuredHeight);\r\n    }\r\n    \r\n    private void setMeasuredDimensionRaw(int measuredWidth, int measuredHeight) {\r\n        mMeasuredWidth = measuredWidth;\r\n        mMeasuredHeight = measuredHeight;\r\n\r\n        mPrivateFlags |= PFLAG_MEASURED_DIMENSION_SET;\r\n    }\r\n```\r\n上面的 `isLayoutModeOptical(...)` 是用于判断是否为 `ViewGroup` 的一种 `LayoutMode`：是否有阴影边界。这里猜测可能是像 `Card` 这样的布局\r\n\r\n`setMeasuredDimension(...)` 最终调用 `setMeasuredDimensionRaw(...)` 设置了 `View` 的测量高度与宽度\r\n\r\n这里 `View` 的测量部分就结束了，我们要知道的是 `DecorView` 的测量流程，所以接下来还要看一下同为 `View` 子布局， `DecorView` 父布局的 `ViewGroup` 和 `FrameLayout` 重写的 `onMeasure(...)` 方法\r\n\r\n看代码发现 `ViewGroup` 没有重写这个方法，所以直接来看 `FrameLayout` 的吧\r\n\r\n### FrameLayout\r\n\r\n\r\n```\r\npublic class FrameLayout extends ViewGroup {\r\n    ...\r\n    @Override\r\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\r\n        int count = getChildCount();\r\n\r\n        final boolean measureMatchParentChildren =\r\n                MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.EXACTLY ||\r\n                MeasureSpec.getMode(heightMeasureSpec) != MeasureSpec.EXACTLY;\r\n        ...\r\n        for (int i = 0; i < count; i++) {\r\n            final View child = getChildAt(i);\r\n            if (mMeasureAllChildren || child.getVisibility() != GONE) {\r\n                measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);\r\n                ...\r\n                if (measureMatchParentChildren) {\r\n                    if (lp.width == LayoutParams.MATCH_PARENT ||\r\n                            lp.height == LayoutParams.MATCH_PARENT) {\r\n                        mMatchParentChildren.add(child);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ...\r\n        count = mMatchParentChildren.size();\r\n        if (count > 1) {\r\n            for (int i = 0; i < count; i++) {\r\n                final View child = mMatchParentChildren.get(i);\r\n                if (lp.width == LayoutParams.MATCH_PARENT) {\r\n                    ...\r\n                    childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(\r\n                            width, MeasureSpec.EXACTLY);\r\n                } else {\r\n                    childWidthMeasureSpec = getChildMeasureSpec(...);\r\n                }\r\n\r\n                final int childHeightMeasureSpec;\r\n                if (lp.height == LayoutParams.MATCH_PARENT) {\r\n                    ...\r\n                    childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(\r\n                            height, MeasureSpec.EXACTLY);\r\n                } else {\r\n                    childHeightMeasureSpec = getChildMeasureSpec(...);\r\n                }\r\n                ...\r\n                child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\r\n            }\r\n        }\r\n    }\r\n    ...\r\n    //ViewGroup\r\n    protected void measureChildWithMargins(View child,\r\n            int parentWidthMeasureSpec, int widthUsed,\r\n            int parentHeightMeasureSpec, int heightUsed) {\r\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\r\n                mPaddingLeft + mPaddingRight + lp.leftMargin + lp.rightMargin\r\n                        + widthUsed, lp.width);\r\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\r\n                mPaddingTop + mPaddingBottom + lp.topMargin + lp.bottomMargin\r\n                        + heightUsed, lp.height);\r\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\r\n    }\r\n}\r\n```\r\n可以看到，`onMeasure(...)` 中，遍历了所有 **子View** ，并通过 `measureChildWithMargins(...)` 调用 **子View** 的 `measure(...)` 方法。\r\n\r\n同时也将 **LayoutParam** 的 **width** 或 **height** 为 `MATCH_PARENT`的 **子View** 添加到 `mMatchParentChildren` 中再进行一次遍历并且调用 `measure(...)` 方法进行测量\r\n\r\n因为 `View` 的  `measure(...)` 方法不可重写，所以最终都会调用到其子布局的 `onmeasure(...)`\r\n\r\n不过上面还有一个问题，那就是为什么要对 `mMatchParentChildren` 再测量一遍？从上面的逻辑看来，被添加到 `mMatchParentChildren` 中的 **子View**， 它的宽高一定有一条是 `LayoutParams.MATCH_PARENT` 而另一个是 `LayoutParams.WRAP_CONTENT`。如果是 `LayoutParams.MATCH_PARENT` ，则直接调用 `MeasureSpec.makeMeasureSpec(...)` 将测量模式设置为 `EXACTLY` ,否则就根据 `getChildMeasureSpec(...)` 返回测量模式。\r\n\r\n在 `measureChildWithMargins(...)` 最后也调用了 `getChildMeasureSpec(...)` ，我们来看一看这个方法\r\n\r\n\r\n\r\n```\r\n    //ViewGroup\r\n    \r\n    public static int getChildMeasureSpec(int spec, int padding, int childDimension) {\r\n        int specMode = MeasureSpec.getMode(spec);\r\n        int specSize = MeasureSpec.getSize(spec);\r\n\r\n        int size = Math.max(0, specSize - padding);\r\n\r\n        int resultSize = 0;\r\n        int resultMode = 0;\r\n\r\n        switch (specMode) {\r\n        // Parent has imposed an exact size on us\r\n        case MeasureSpec.EXACTLY:\r\n            if (childDimension >= 0) {\r\n                resultSize = childDimension;\r\n                resultMode = MeasureSpec.EXACTLY;\r\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\r\n                // Child wants to be our size. So be it.\r\n                resultSize = size;\r\n                resultMode = MeasureSpec.EXACTLY;\r\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\r\n                // Child wants to determine its own size. It can't be\r\n                // bigger than us.\r\n                resultSize = size;\r\n                resultMode = MeasureSpec.AT_MOST;\r\n            }\r\n            break;\r\n\r\n        // Parent has imposed a maximum size on us\r\n        case MeasureSpec.AT_MOST:\r\n            if (childDimension >= 0) {\r\n                // Child wants a specific size... so be it\r\n                resultSize = childDimension;\r\n                resultMode = MeasureSpec.EXACTLY;\r\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\r\n                // Child wants to be our size, but our size is not fixed.\r\n                // Constrain child to not be bigger than us.\r\n                resultSize = size;\r\n                resultMode = MeasureSpec.AT_MOST;\r\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\r\n                // Child wants to determine its own size. It can't be\r\n                // bigger than us.\r\n                resultSize = size;\r\n                resultMode = MeasureSpec.AT_MOST;\r\n            }\r\n            break;\r\n\r\n        // Parent asked to see how big we want to be\r\n        case MeasureSpec.UNSPECIFIED:\r\n            if (childDimension >= 0) {\r\n                // Child wants a specific size... let him have it\r\n                resultSize = childDimension;\r\n                resultMode = MeasureSpec.EXACTLY;\r\n            } else if (childDimension == LayoutParams.MATCH_PARENT) {\r\n                // Child wants to be our size... find out how big it should\r\n                // be\r\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\r\n                resultMode = MeasureSpec.UNSPECIFIED;\r\n            } else if (childDimension == LayoutParams.WRAP_CONTENT) {\r\n                // Child wants to determine its own size.... find out how\r\n                // big it should be\r\n                resultSize = View.sUseZeroUnspecifiedMeasureSpec ? 0 : size;\r\n                resultMode = MeasureSpec.UNSPECIFIED;\r\n            }\r\n            break;\r\n        }\r\n        //noinspection ResourceType\r\n        return MeasureSpec.makeMeasureSpec(resultSize, resultMode);\r\n    }\r\n```\r\n\r\n返回的测量模式是根据 **父布局所提供的测量模式+LayoutParam参数** 结合来确定的。在之前 `ViewRootImpl` 的 `getRootMeasureSpec(...)` 方法中，`LayoutParams.MATCH_PARENT` 与 `EXACTLY` 对应，`LayoutParams.WRAP_CONTENT` 与 `AT_MOST` 对应。但是从这里看来，说明这个对应关系，只适用于根布局，这也和它的注释一致。\r\n\r\n> 注意：当 childDimension >= 0 时，表示这个 child 自己有一个准确的尺寸，这个尺寸值就是 childDimension。\r\n\r\n那么再看一下上面的方法：\r\n\r\n- 当 `childDimension >= 0` 时: 无论父布局模式是什么，子布局的测量模式都是 `EXACTLY` ，且尺寸为 childDimension\r\n- 父布局的mode为 `EXACTLY` 时: 对应关系与 `getRootMeasureSpec(...)` 提到的一致，也就是正常的情况\r\n- 父布局的mode为 `AT_MOST` 时: 子布局模式都是 `AT_MOST`\r\n- 父布局的mode为 `UNSPECIFIED` 时: 子布局模式都是 `UNSPECIFIED`\r\n\r\n关于上面为什么会有第二次测量，以及这里的 `UNSPECIFIED` ，下面是使用场景及说明：\r\n\r\n> 在日常定制View时，确实很少会专门针对 UNSPECIFIED 这个模式去做特殊处理，大多数情况下，都会把它当成MeasureSpec.AT_MOST一样看待，就比如最最常用的TextView，它在测量时也是不会区分UNSPECIFIED和AT_MOST的。\r\n> \r\n> 不过，虽说这个模式比较少直接接触到，但很多场景下，我们已经在不知不觉中用上了，比如RecyclerView的Item，如果Item的宽/高是wrap_content且列表可滚动的话，那么Item的宽/高的测量模式就会是UNSPECIFIED。还有就是NestedScrollView和ScrollView，因为它们都是扩展自FrameLayout，所以它们的子View会测量两次，第一次测量时，子View的heightMeasureSpec的模式是写死为UNSPECIFIED的。 \r\n>\r\n> 我们在自定义ViewGroup过程中，如果允许子View的尺寸比ViewGroup大的话，在测量子View时就可以把Mode指定为UNSPECIFIED。\r\n\r\n\r\n那么到这里， `measure` 就结束了，下面开始 `layout` 部分\r\n\r\n## layout(...)\r\n\r\n先来看一下 `ViewRootImpl` 的 `performLayout(...)`方法\r\n\r\n### performLayout(...)\r\n\r\n\r\n```\r\n    private void performLayout(WindowManager.LayoutParams lp, int desiredWindowWidth,\r\n            int desiredWindowHeight) {\r\n        ...\r\n        final View host = mView;\r\n        ...\r\n        try {\r\n            host.layout(0, 0, host.getMeasuredWidth(), host.getMeasuredHeight());\r\n            ...\r\n            if (numViewsRequestingLayout > 0) {\r\n                ...\r\n                if (validLayoutRequesters != null) {\r\n                    ...\r\n                    host.layout(0, 0, host.getMeasuredWidth(), \r\n                    ...\r\n                }\r\n            }\r\n        } \r\n        ...\r\n    }\r\n```\r\n`mView` 就是 `DecorView` 对象，不过没有在其中找到 `layout(...)` 方法，`FrameLayout` 中也没有，而 `ViewGroup` 中存在，进去看一下吧\r\n\r\n\r\n### layout(...)\r\n\r\n\r\n```\r\n    //ViewGroup\r\n    \r\n    @Override\r\n    public final void layout(int l, int t, int r, int b) {\r\n        if (!mSuppressLayout && (mTransition == null || !mTransition.isChangingLayout())) {\r\n            if (mTransition != null) {\r\n                mTransition.layoutChange(this);\r\n            }\r\n            super.layout(l, t, r, b);\r\n        } else {\r\n            // record the fact that we noop'd it; request layout when transition finishes\r\n            mLayoutCalledWhileSuppressed = true;\r\n        }\r\n    }\r\n```\r\n\r\n这个方法被 `final` 修饰了，说明 `layout(...)` 方法最深也只能在 `ViewGroup` 中了，其中调用了 `super.layout(...)` ,接下来到 `View` 中\r\n\r\n\r\n```\r\n    //View\r\n    \r\n    public void layout(int l, int t, int r, int b) {\r\n        ...\r\n        boolean changed = isLayoutModeOptical(mParent) ?\r\n                setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);\r\n        if (changed || (mPrivateFlags & PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) {\r\n            ...\r\n            onLayout(changed, l, t, r, b);\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n    \r\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) { }\r\n    \r\n    private boolean setOpticalFrame(int left, int top, int right, int bottom) {\r\n        ...\r\n        return setFrame(...);\r\n    }\r\n    \r\n    protected boolean setFrame(int left, int top, int right, int bottom) {\r\n        boolean changed = false;\r\n        ...\r\n        if (mLeft != left || mRight != right || mTop != top || mBottom != bottom) {\r\n            changed = true;\r\n            ...\r\n\r\n            int oldWidth = mRight - mLeft;\r\n            int oldHeight = mBottom - mTop;\r\n            int newWidth = right - left;\r\n            int newHeight = bottom - top;\r\n            boolean sizeChanged = (newWidth != oldWidth) || (newHeight != oldHeight);\r\n\r\n            // Invalidate our old position\r\n            invalidate(sizeChanged);\r\n\r\n            mLeft = left;\r\n            mTop = top;\r\n            mRight = right;\r\n            mBottom = bottom;\r\n            mRenderNode.setLeftTopRightBottom(mLeft, mTop, mRight, mBottom);\r\n\r\n            ...\r\n\r\n            notifySubtreeAccessibilityStateChangedIfNeeded();\r\n        }\r\n        return changed;\r\n    }\r\n```\r\n可以看到，在调用 `onLayout(...)` 之前，就通过 `setFrame(...)` 的方法设置完了 Layout 的布局，并且还做了参数对比判断布局是否发生变化。同时可以发现 `View` 的 `onLayout(...)` 并没有任何操作\r\n\r\n再看看 `ViewGroup` 的 `onLayout(...)` \r\n\r\n``` \r\n    //ViewGroup\r\n    \r\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\r\n    }\r\n```\r\n也没有做什么，并且这个方法是个抽象方法，说明子类 `FrameLayout` 一定实现了这个方法:\r\n\r\n\r\n```\r\n    ///FrameLayout\r\n    \r\n    @Override\r\n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\r\n        layoutChildren(left, top, right, bottom, false /* no force left gravity */);\r\n    }\r\n    \r\n    void layoutChildren(int left, int top, int right, int bottom, boolean forceLeftGravity) {\r\n        final int count = getChildCount();\r\n        ...\r\n        for (int i = 0; i < count; i++) {\r\n            final View child = getChildAt(i);\r\n            if (child.getVisibility() != GONE) {\r\n                final LayoutParams lp = (LayoutParams) child.getLayoutParams();\r\n                ...\r\n                int gravity = lp.gravity;\r\n                ...\r\n\r\n                final int layoutDirection = getLayoutDirection();\r\n                final int absoluteGravity = Gravity.getAbsoluteGravity(gravity, layoutDirection);\r\n                final int verticalGravity = gravity & Gravity.VERTICAL_GRAVITY_MASK;\r\n\r\n                switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {\r\n                    case Gravity.CENTER_HORIZONTAL:\r\n                        childLeft = parentLeft + (parentRight - parentLeft - width) / 2 +\r\n                        lp.leftMargin - lp.rightMargin;\r\n                        break;\r\n                    case Gravity.RIGHT:\r\n                        if (!forceLeftGravity) {\r\n                            childLeft = parentRight - width - lp.rightMargin;\r\n                            break;\r\n                        }\r\n                    case Gravity.LEFT:\r\n                    default:\r\n                        childLeft = parentLeft + lp.leftMargin;\r\n                }\r\n\r\n                switch (verticalGravity) {\r\n                    case Gravity.TOP:\r\n                        childTop = parentTop + lp.topMargin;\r\n                        break;\r\n                    case Gravity.CENTER_VERTICAL:\r\n                        childTop = parentTop + (parentBottom - parentTop - height) / 2 +\r\n                        lp.topMargin - lp.bottomMargin;\r\n                        break;\r\n                    case Gravity.BOTTOM:\r\n                        childTop = parentBottom - height - lp.bottomMargin;\r\n                        break;\r\n                    default:\r\n                        childTop = parentTop + lp.topMargin;\r\n                }\r\n\r\n                child.layout(childLeft, childTop, childLeft + width, childTop + height);\r\n            }\r\n        }\r\n    }\r\n    \r\n```\r\n可以看到，`onLayout(...)` 通过调用 `layoutChildren(...)` 给每个 `child` 测量好了布局定位，然后调用了 `child` 的 `layout(...)` 方法。那么到这里 `layout` 流程就结束了，接下来是 `draw` \r\n\r\n## draw(...)\r\n\r\n进入 `ViewRootImpl` 的 `performDraw()`方法\r\n\r\n### performDraw()\r\n\r\n\r\n```\r\n    private void performDraw() {\r\n        ...\r\n        try {\r\n            boolean canUseAsync = draw(fullRedrawNeeded);\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n    \r\n    private boolean draw(boolean fullRedrawNeeded) {\r\n        ...\r\n        {\r\n            {\r\n                if (!drawSoftware(surface, mAttachInfo, xOffset, yOffset,\r\n                        scalingRequired, dirty, surfaceInsets)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        ...\r\n    }\r\n    \r\n    private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int xoff, int yoff,\r\n            boolean scalingRequired, Rect dirty, Rect surfaceInsets) {\r\n            ...\r\n            try {\r\n                ...\r\n                mView.draw(canvas);\r\n                ...\r\n            }\r\n            ...\r\n    }\r\n\r\n```\r\n接下来，看一下 `DecorView` 的 `draw(...)` 方法\r\n\r\n```\r\n    //DecorView\r\n    @Override\r\n    public void draw(Canvas canvas) {\r\n        super.draw(canvas);\r\n\r\n        if (mMenuBackground != null) {\r\n            mMenuBackground.draw(canvas);\r\n        }\r\n    }\r\n```\r\n\r\n`mMenuBackground.draw(canvas)` 自然就是绘制背景了，我们主要看这个 `super.draw(canvas)` ，它将进入 `View` 的 `draw(canvas)` 方法\r\n\r\n### draw(canvas)\r\n\r\n\r\n```\r\n    //View\r\n    public void draw(Canvas canvas) {\r\n        ...\r\n        /*\r\n         * Draw traversal performs several drawing steps which must be executed\r\n         * in the appropriate order:\r\n         *\r\n         *      1. Draw the background\r\n         *      2. If necessary, save the canvas' layers to prepare for fading\r\n         *      3. Draw view's content\r\n         *      4. Draw children\r\n         *      5. If necessary, draw the fading edges and restore layers\r\n         *      6. Draw decorations (scrollbars for instance)\r\n         */\r\n        ...\r\n        // Step 1, draw the background, if needed\r\n        int saveCount;\r\n\r\n        if (!dirtyOpaque) {\r\n            drawBackground(canvas);\r\n        }\r\n        ...\r\n        // Step 3, draw the content\r\n        if (!dirtyOpaque) onDraw(canvas);\r\n\r\n        // Step 4, draw the children\r\n        dispatchDraw(canvas);\r\n        ...\r\n        // Step 6, draw decorations (foreground, scrollbars)\r\n        onDrawForeground(canvas);\r\n        ...\r\n    }\r\n    \r\n    ...\r\n    protected void onDraw(Canvas canvas) { }\r\n    ...\r\n    protected void dispatchDraw(Canvas canvas) { }\r\n    ...\r\n    \r\n```\r\n上面的注释对于 `draw` 的流程做了一个简要说明， 我们主要关注第三点 `onDraw(canvas)`和第四点 `dispatchDraw(canvas)`，先来看第三点\r\n\r\n### onDraw(canvas)\r\n\r\n只有 `DectorView` 重写了这个方法\r\n\r\n\r\n```\r\n    //DectorView\r\n    @Override\r\n    public void onDraw(Canvas c) {\r\n        super.onDraw(c);\r\n\r\n        mBackgroundFallback.draw(this, mContentRoot, c, mWindow.mContentParent,\r\n                mStatusColorViewState.view, mNavigationColorViewState.view);\r\n    }\r\n```\r\n\r\n因为 `super.onDraw(c)` 最终会调用到 `View` 的 `onDraw(canvas)`，是个空方法，啥也不会做。 而 `BackgroundFallback` 的 `draw(...)` 方法主要是绘制各个子布局的背景\r\n\r\n接下来看一下之前的 `dispatchDraw(canvas)` \r\n\r\n### dispatchDraw(canvas)\r\n\r\n `dispatchDraw(canvas)` 也是一个空方法，只有 `ViewGroup` 对其进行了重写\r\n \r\n \r\n```\r\n    //ViewGroup\r\n    @Override\r\n    protected void dispatchDraw(Canvas canvas) {\r\n        ...\r\n        final int childrenCount = mChildrenCount;\r\n        final View[] children = mChildren;\r\n        ...\r\n        for (int i = 0; i < childrenCount; i++) {\r\n            while (transientIndex >= 0 && mTransientIndices.get(transientIndex) == i) {\r\n                ...\r\n                if ((transientChild.mViewFlags & VISIBILITY_MASK) == VISIBLE ||\r\n                        transientChild.getAnimation() != null) {\r\n                    more |= drawChild(canvas, transientChild, drawingTime);\r\n                }\r\n                ...\r\n            }\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n    \r\n    ...\r\n    \r\n    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {\r\n        return child.draw(canvas, this, drawingTime);\r\n    }\r\n```\r\n上面其实有多处调用到了 `drawChild(...)` 方法，而它又会调用 `child.draw(...)` 方法，最后回到 `View` 的 `draw(...)` 来\r\n\r\n\r\n\r\n# 总结\r\n\r\n这次就通过文字总结View的绘制流程吧\r\n\r\n\r\n1. 创建 `PhoneWindow` : `ActivityThread` 的 `performLaunchActivity(...)` 中,调用 `Activity` 的 `attach(...)` 方法,创建了 `PhoneWindow` \r\n2. 创建 `DecorView` :  在我们实现的 `Activity` 中,通过 `setContentView(...)` 走到 `AppCompatDelegateImpl` 的 `ensureSubDecor()` 方法,最后调用  `PhoneWindow` 的 `installDecor()` 创建  `DecorView` \r\n3. 绑定 `DecorView` : 进入 `ActivityThread` 的 `handleResumeActivity(...)`, 通过 `WindowManagerImpl` 的 `addView(...)` 方法, 将 `DecorView` 保存在 `WindowManagerGlobal` 维护的View列表中。 同时,会设置到 `ViewRootImpl` 中与之进行绑定\r\n4. 开始绘制流程 : 通过 `ViewRootImpl` 的 `requestLayout()` 方法,最终调用到 `doTraversal()`, 至此开始绘制流程\r\n5. `performMeasure(...)` : \r\n    1. 通过对 `DecorView` 调用 `measure(...)` 进入到 `View` 的 `measure(...)` 方法,然后调用 `View` 的 `onMeasure(...)`\r\n    2. 然后走入到 `FrameLayout` 重写的 `onMeasure(...)`方法, 这里会便利 children ,走到 `ViewGroup` 的 `measureChildWithMargins(...)` 方法\r\n    3. 在 `ViewGroup` 的 `measureChildWithMargins(...)` 中, 又会调用 `View` 的 `measure(...)` 方法, 从而形成递归调用\r\n6. `performLayout(...)` : \r\n    1. 通过对 `DecorView` 调用 `layout(...)` 进入到 `ViewGroup` 的 `layout(...)` 方法, 然后又会进入到 `View` 的 `layout(...)` \r\n    2. 通过 `View` 的 `layout(...)`会调用它的 `onLayout(...)` 方法,而 `onLayout(...)` 没有任何逻辑操作, 因此会进入到子类 `FrameLayout` 的  `onLayout(...)` \r\n    3. 在 `FrameLayout` 的  `onLayout(...)` 中,会通过 `layoutChildren(...)` 来调用到 `View` 的 `layout(...)` 方法,从而形成了递归\r\n7. `performDraw()` : \r\n    1. 通过对 `DecorView` 调用 `draw(...)` 进入到 `View` 的 `draw(...)` 方法, 然后会调用 `View` 的 `onDraw(...)` 进入到 `DectorView` 的 `onDraw(...)` 方法,不过这里只做了背景绘制\r\n    2. 然后继续执行之前的 `dispatchDraw(...)` 方法, 遍历 children 对每一个子View 调用它的  `draw(...)` 方法,就这样形成了递归","8438813c":"---\r\ntitle: 从源码看flutter（一）：Widget篇\r\ndate: 2020-04-14 09:06:02\r\nindex_img: /img/flutter_01.png\r\ntags: Flutter系列\r\n---\r\n# 开篇\r\n\r\n我们知道，Flutter中我们做的一切几乎都是在和 `Widget` 打交道，那么它在flutter中扮演着怎样的角色，起到了什么样的作用呢？\r\n\r\n我们将通过阅读源码的方式，去解答关于它的各种疑问。\r\n\r\n而这也是flutter知识拼图中，我们选择的第一块。\r\n\r\n\r\n# Widget\r\n\r\n可以从我们常用的 `StatelessWidget` 和 `StatefulWidget` 看到，他们都拥有同一个父类 `Widget`，我们将 `Widget` 作为起点，先看看一看它的构造\r\n\r\n\r\n```\r\n@immutable\r\nabstract class Widget extends DiagnosticableTree {\r\n\r\n  const Widget({ this.key });\r\n  \r\n  final Key key;\r\n  \r\n  @protected\r\n  Element createElement();\r\n  ...\r\n  static bool canUpdate(Widget oldWidget, Widget newWidget) {\r\n    return oldWidget.runtimeType == newWidget.runtimeType\r\n        && oldWidget.key == newWidget.key;\r\n  }\r\n}\r\n```\r\n`Widget` 是继承于 `DiagnosticableTree` 的，关于 `DiagnosticableTree` 这个类，它主要用于在调试时获取子类的各种属性和children信息，在flutter各个对象中你经常能看到它，目前我们不需要去关心与之相关的内容\r\n\r\n我们可以看到，`Widget` 是一个抽象类；同时它被 `immutable` 注解修饰，说明它的各个属性一定是不可变的，这就是为什么我们写各种 `Widget` 时，所写的各个属性要加 `final` 的原因，否则编译器就会发出警告\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/flutter/1.widget/001.png)\r\n\r\n同时，我们看到了熟悉的 `createElement()` 方法，它交由子类去实现\r\n\r\n还有 `canUpdate(...)` 方法, 如果返回 `true` 表示可以更新当前 `Element` 对象，并用新的 `widget` 更新 `Element` 的 `widget` ，在下一篇关于 `Element` 的介绍中，我们能看到它的具体使用\r\n\r\n接下来，我们看一看几个飞车重要的 Widget 对象\r\n\r\n## StatelessWidget\r\n\r\n\r\n```\r\nabstract class StatelessWidget extends Widget {\r\n  \r\n  const StatelessWidget({ Key key }) : super(key: key);\r\n  \r\n  @override\r\n  StatelessElement createElement() => StatelessElement(this);\r\n  \r\n  @protected\r\n  Widget build(BuildContext context);\r\n}\r\n\r\n```\r\n\r\n`StatelessWidget` 也是一个抽象方法，提供了一个 `build(context)` 方法供子类实现，而这里重写的 `createElement()` 默认返回的是 `StatelessElement(...)` 对象，再来看看 `StatefulWidget`\r\n\r\n\r\n## StatefulWidget\r\n\r\n\r\n```\r\nabstract class StatefulWidget extends Widget {\r\n\r\n  const StatefulWidget({ Key key }) : super(key: key);\r\n\r\n  @override\r\n  StatefulElement createElement() => StatefulElement(this);\r\n\r\n  @protected\r\n  State createState();\r\n}\r\n```\r\n\r\n`StatefulWidget` 同样是一个非常简单的抽象对象，这里默认提供的是创建 `StatefulElement` 的方法。同时，提供了我们非常熟悉的 `createState()` 方法，它返回一个 `State` 对象，我们经常使用的 `setState(...)` 就在其中，来看一下它的实现\r\n\r\n### State\r\n\r\n\r\n```\r\nabstract class State<T extends StatefulWidget> extends Diagnosticable {\r\n  T get widget => _widget;\r\n  \r\n  _StateLifecycle _debugLifecycleState = _StateLifecycle.created;\r\n  \r\n  BuildContext get context => _element;\r\n  \r\n  bool get mounted => _element != null;\r\n  \r\n  void initState() {\r\n    assert(_debugLifecycleState == _StateLifecycle.created);\r\n  }\r\n  \r\n  void didUpdateWidget(covariant T oldWidget) { }\r\n  \r\n  void reassemble() { }\r\n  \r\n  void setState(VoidCallback fn) {\r\n    ...\r\n    _element.markNeedsBuild();\r\n  }\r\n\r\n  void deactivate() { }\r\n  \r\n  void dispose() {\r\n    ...\r\n     _debugLifecycleState = _StateLifecycle.defunct;\r\n    ...\r\n  }\r\n  \r\n  Widget build(BuildContext context);\r\n  \r\n  void didChangeDependencies() { }\r\n}\r\n\r\nenum _StateLifecycle {\r\n\r\n  created,\r\n\r\n  initialized,\r\n\r\n  ready,\r\n\r\n  defunct,\r\n}\r\n```\r\n为了方便阅读，上面省去了部分代码和所有注解，首先可以看到，`State` 是 `Diagnosticable` 的子类，而 `Diagnosticable` 对象就是之前 `DiagnosticableTree` 中内提供的结点，我们不需要关注它。\r\n\r\n`State` 中持有了 `BuildContext` 对象和 `Widget` 对象， `BuildContext` 是 `Element` 实现的接口，下一篇会讲到它。同时，我们可以发现 `State` 是具备生命周期的，分别是四种情况：\r\n\r\n- created: 默认的生命周期\r\n- initialized:  `initState()` 被调用后的生命周期\r\n- ready: `didChangeDependencies()` 被调用后的生命周期， 当生命周期为这个时就准备调用 `build()` 方法了\r\n- defunct: `dispose()` 被调用后的生命周期\r\n\r\n其中第二个第三个都是在 `StatefulElement` 中被改变的，可以简单的看一看\r\n\r\n\r\n```\r\nclass StatefulElement extends ComponentElement {\r\n    ...\r\n  @override\r\n  void _firstBuild() {\r\n    ...\r\n      final dynamic debugCheckForReturnedFuture = _state.initState() as dynamic;\r\n    ...\r\n      _state._debugLifecycleState = _StateLifecycle.initialized;\r\n    ...\r\n    _state.didChangeDependencies();\r\n    ...\r\n      _state._debugLifecycleState = _StateLifecycle.ready;\r\n    ...\r\n  }\r\n  ...\r\n  @override\r\n  void unmount() {\r\n    super.unmount();\r\n    _state.dispose();\r\n    ...\r\n  }\r\n}\r\n```\r\n至于哪里调用了 `_firstBuild()` 我们放到第二篇讲\r\n\r\n还有一些方法，我们简单介绍一下：\r\n\r\n- didUpdateWidget(...): 当 Widget 更新时，会调用它。可以重写这个方法做一些数据修改的操作，比如更新数据，但是不要在这个方法中调用 `setState` 因为这样就重复刷新了\r\n- reassemble(): 这个方法是debug时热重载会触发的，我们一般不需要去管它\r\n- deactivate(): 当前 `Widget` 从树中移除的时候，会调用这个方法，它会比 `dispose()` 先调用\r\n\r\n\r\n还有 `setState(...)` 是我们最常用的一个方法，这个方法中并没有触发传入的 `VoidCallback` ，而是调用了 `Element` 的 `markNeedsBuild()` ，这也是为什么我们把修改数据的逻辑放到 `setState(...)` 前、中、后，数据都能刷新的原因，而真正导致数据刷新的逻辑，等第二篇就知道啦。\r\n\r\n关于 `State` 的部分就差不多了。不知道这时候你是否会产生一个疑问，因为我们常常听说 `Widget`、`Elmenet`、`RenderObject` 这三个对象的关系是十分紧密的。不过到上面只看到了 `Widget` 与 `Element` ，完全没有 `RenderObject` 的身影，那么它是在 `Elmenet` 中创建的吗？\r\n\r\n这里我先提前说明一下，并不是。因为 `Elment` 中并没有相关的 `RenderObject` 创建方法，到这里问题来了，`RenderObject` 的创建方法，在哪里呢？\r\n\r\n下面将介绍另一个非常重要，但是我们很少使用的 `Widget` 对象\r\n\r\n## RenderObjectWidget\r\n\r\n\r\n```\r\nabstract class RenderObjectWidget extends Widget {\r\n    \r\n  const RenderObjectWidget({ Key key }) : super(key: key);\r\n  \r\n  @override\r\n  RenderObjectElement createElement();\r\n  \r\n  @protected\r\n  RenderObject createRenderObject(BuildContext context);\r\n  \r\n  @protected\r\n  void updateRenderObject(BuildContext context, covariant RenderObject renderObject) { }\r\n  \r\n  @protected\r\n  void didUnmountRenderObject(covariant RenderObject renderObject) { }\r\n}\r\n```\r\n可以看到，`RenderObject` 的创建方法其实是由 `RenderObjectWidget` 提供的，同时还提供了对应的 `RenderObjectElement` 创建方法。关于这个 `Widget` 以及 `RenderObject` 相关信息，留到第三篇。本篇就结束了。\r\n\r\n\r\n# 总结\r\n\r\n通过上面一番源码阅读，我们可以发现 `Widget` 具备下面的一些特性：\r\n\r\n- `Widget` 中所持有的对象都是不可修改的，也就是说它不具备数据的存储功能，而只能够对数据进行传递；即便是 `StatefulWidget`，数据的存储也是放在 `State` 中，它只是提供了 `State` 的创建方法\r\n- 每个 `Widget` 都提供了 `Element` 的创建方法，但只有部分 `Widget` 具备 `RenderObject` 的创建方法。从这里我们可以断定， `Element` 与 `RenderObject` 不是一一对应的关系，很可能是一对一或者多对一的关系；同时我们猜想， `Element` 与 `Widget` 是一一对应的关系。\r\n\r\n仅仅根据上面这些特性，并不能给 `Widget` 下一个准确的定义，那是因为我们还没深入了解主要的 `RenderObject` 。不过这里为了结束这篇文章，还是先提前做个定义吧：\r\n\r\n-  `RenderObject` 用于布局绘制等操作，那么  `RenderObjectWidget` 则是向 `RenderObject` 提供绘制所需要的配置参数\r\n-  `State` 用于进行数据的保存与修改， 那么 `StatefulWidget` 则是用于向 `State` 传递配置参数\r\n-  `StatelessWidget` 用于向其他 `Widget` 传递配置参数。\r\n\r\n而 `Widget` 之间又可以相互组合，最后得出结论：**Widget 用于描述描当前的配置和状态下视图所应该呈现的样子**\r\n\r\n","64a70ce7":"---\r\ntitle: 从源码看flutter（三）：RenderObject篇\r\ndate: 2020-04-20 10:03:39\r\nindex_img: /img/flutter_03.png\r\ntags: Flutter系列\r\n---\r\n\r\n# 开篇\r\n\r\n上一篇 [从源码看flutter（二）：Element篇](http://oldben.gitee.io/flutter-blog/#/articlePage/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8Bflutter%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AElement%E7%AF%87) 我们通过 `Element` 的生命周期对 `Element` 有了一个整体的了解，这次我们将来对 `RenderObject` 做深入的分析，进一步完善我们对于 flutter framework的了解\r\n\r\n在[第一篇](http://oldben.gitee.io/flutter-blog/#/articlePage/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8Bflutter%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AWidget%E7%AF%87)，我们知道  `RenderObject` 的创建方法是由 `RenderObjectWidget` 提供的，而我们已经了解过了 `Element` 的生命周期，这里，我们将选择 `RenderObjectElement` 作为此篇文章的分析起点\r\n\r\n# RenderObjectElement\r\n\r\n`RenderObjectElement` 与之前我们分析的其他 `Element` 对象差别不是特别大，主要的不同点在下面的几个方法中\r\n\r\n```\r\nabstract class RenderObjectElement extends Element {\r\n  ...\r\n  @override\r\n  void attachRenderObject(dynamic newSlot) { ... }\r\n  \r\n  @override\r\n  void detachRenderObject() { ... }\r\n  \r\n  @protected\r\n  void insertChildRenderObject(covariant RenderObject child, covariant dynamic slot);\r\n  \r\n  @protected\r\n  void moveChildRenderObject(covariant RenderObject child, covariant dynamic slot);\r\n  \r\n  @protected\r\n  void removeChildRenderObject(covariant RenderObject child);\r\n\r\n}\r\n```\r\n分别是实现了 `Element` 提供的 `attachRenderObject(newSlot)` 与 `detachRenderObject()`，并提供给子类后面三个方法去对 `RenderObject` 对象进行相关操作。\r\n\r\n这里可以看到，有的参数被关键字 `covariant` 所修饰，这个关键字是用于对重写方法的参数做限制的，像上面的 `removeChildRenderObject` 方法，如果有子类重写它，则重写方法中的参数类型需要为 `RenderObject` 或 `RenderObject` 的子类。具体的说明，可以看[这里](https://dart.dev/guides/language/sound-problems#the-covariant-keyword)\r\n\r\n\r\n这里简单的对 `RenderObjectElement` 做了一个介绍，接下来，我们就来看一下它在初始化方法 `mount(...)` 中都做了写什么 \r\n\r\n## mount(...)\r\n\r\n\r\n```\r\n\r\n  @override\r\n  void mount(Element parent, dynamic newSlot) {\r\n    super.mount(parent, newSlot);\r\n    ...\r\n    _renderObject = widget.createRenderObject(this);\r\n    ...\r\n    assert(_slot == newSlot);\r\n    attachRenderObject(newSlot);\r\n    _dirty = false;\r\n  }\r\n```\r\n可以看到，在 `mount(...)` 方法中，调用了 `RenderObjectWidget` 的 `createRenderObject(...)` 方法创建了 `RenderObject` 对象。\r\n\r\n之后通过 `attachRenderObject(newSlot)` 对 `RenderObject` 进行了进一步的操作\r\n\r\n## attachRenderObject(newSlot)\r\n\r\n\r\n```\r\n  @override\r\n  void attachRenderObject(dynamic newSlot) {\r\n    assert(_ancestorRenderObjectElement == null);\r\n    _slot = newSlot;\r\n    _ancestorRenderObjectElement = _findAncestorRenderObjectElement();\r\n    _ancestorRenderObjectElement?.insertChildRenderObject(renderObject, newSlot);\r\n    final ParentDataElement<ParentData> parentDataElement = _findAncestorParentDataElement();\r\n    if (parentDataElement != null)\r\n      _updateParentData(parentDataElement.widget);\r\n  }\r\n```\r\n可以看到，在 `attachRenderObject(newSlot)` 中，首先是寻找到祖先 `RenderObjectElement` 结点，然后将当前 `RenderObject` 插入其中。\r\n\r\n后面还会查找 `ParentDataElement`，关于这类 `Element` ，是当父节点想要把数据通过 `ParentData` 存储在子节点中时才会用到，比如 `Stack` 和 `Position`，其中 `Position` 对应的 `Element` 就是 `ParentDataElement`\r\n\r\n可以简单看一下 `_findAncestorRenderObjectElement()` 逻辑\r\n\r\n\r\n```\r\n  RenderObjectElement _findAncestorRenderObjectElement() {\r\n    Element ancestor = _parent;\r\n    while (ancestor != null && ancestor is! RenderObjectElement)\r\n      ancestor = ancestor._parent;\r\n    return ancestor as RenderObjectElement;\r\n  }\r\n```\r\n就是简单的遍历父节点，当结点为null或者是 `RenderObjectElement` 时就会退出遍历。所以这里找到的是最近的祖先结点\r\n\r\n之后会调用 `RenderObjectElement` 的 `insertChildRenderObject(...)` 将child插入，这是一个抽象方法，具体的逻辑都交由子类去实现\r\n\r\n我们知道，比较常用的两个 `RenderObjectElement` 的实现类，分别是 `SingleChildRenderObjectElement` 和 `MultiChildRenderObjectElement`。前者表示只有一个子节点，常见的对应 `Widget` 有 `Padding` 、 `Align`、`SizeBox` 等 ；后者表示有多个子节点，常见对应的 `Widget` 有 `Wrap`、`Stack`、`Viewport` 等\r\n\r\n每个 `RenderObjectElement` 的实现类，其 `insertChildRenderObject(...)` 都有所不同，但最终都会调用到 `RenderObject` 的 `adoptChild(child)` 方法\r\n\r\n接下来，我们进入到本篇文章主角 `RenderObject` 的相关信息\r\n\r\n# RenderObject\r\n\r\n\r\n```\r\nabstract class RenderObject extends AbstractNode with DiagnosticableTreeMixin implements HitTestTarget {\r\n    ...\r\n}\r\n```\r\n可以看到， `RenderObject` 是 `AbstractNode` 的子类，并且实现了 `HitTestTarget` 接口， `HitTestTarget` 是用于处理点击事件的\r\n\r\n我们来看一下 `AbstractNode`\r\n\r\n## AbstractNode\r\n\r\n\r\n```\r\nclass AbstractNode {\r\n  int _depth = 0;\r\n  \r\n  @protected\r\n  void redepthChild(AbstractNode child) { ... }\r\n  \r\n  @mustCallSuper\r\n  void attach(covariant Object owner) { ... }\r\n  \r\n  ...\r\n  \r\n  AbstractNode _parent;\r\n  \r\n  @protected\r\n  @mustCallSuper\r\n  void adoptChild(covariant AbstractNode child) { ... }\r\n  \r\n  @protected\r\n  @mustCallSuper\r\n  void dropChild(covariant AbstractNode child) { ... }\r\n}\r\n```\r\n在 `AbstractNode` 中，提供了许多方法供子类实现，其中比较核心的就是 `adoptChild(...)` \r\n\r\n可以先简单看一下它的 `adoptChild(...)`\r\n\r\n\r\n```\r\n  @protected\r\n  @mustCallSuper\r\n  void adoptChild(covariant AbstractNode child) {\r\n    ...\r\n    child._parent = this;\r\n    if (attached)\r\n      child.attach(_owner);\r\n    redepthChild(child);\r\n  }\r\n```\r\n接下来，来看一下 `RenderObject` 的实现\r\n\r\n## adoptChild(...)\r\n\r\n\r\n```\r\n  @override\r\n  void adoptChild(RenderObject child) {\r\n    ...\r\n    setupParentData(child);\r\n    markNeedsLayout();\r\n    markNeedsCompositingBitsUpdate();\r\n    markNeedsSemanticsUpdate();\r\n    super.adoptChild(child);\r\n  }\r\n```\r\n\r\n这里，我们主要关注 `markNeedsLayout()`\r\n\r\n## markNeedsLayout()\r\n\r\n\r\n```\r\n  RenderObject _relayoutBoundary;\r\n  ...\r\n  @override\r\n  PipelineOwner get owner => super.owner as PipelineOwner;\r\n  ...\r\n\r\n  void markNeedsLayout() {\r\n    ...\r\n    if (_relayoutBoundary != this) {\r\n      markParentNeedsLayout();\r\n    } else {\r\n      _needsLayout = true;\r\n      if (owner != null) {\r\n        ...\r\n        owner._nodesNeedingLayout.add(this);\r\n        owner.requestVisualUpdate();\r\n      }\r\n    }\r\n  }\r\n```\r\n其中 `_relayoutBoundary` 表示重新布局的边界，如果当前 `RenderObject` 就是该边界，则只需要将当前的 `_needsLayout` 设为 **true**，同时将当前 `RenderObject` 添加到 `PipelineOwner` 中维护的 `_nodesNeedingLayout` 中；如果边界是父节点的话，则会调用父节点的 `markNeedsLayout()` 方法\r\n\r\n那么下一步，我们应该走到哪里呢？\r\n\r\n在上一篇中，我们知道 `Element` 的刷新流程，会走到 `WidgetsBinding ` 的 `drawFrame()` 方法\r\n\r\n\r\n```\r\n  @override\r\n  void drawFrame() {\r\n    ...\r\n    try {\r\n      if (renderViewElement != null)\r\n        buildOwner.buildScope(renderViewElement);\r\n      super.drawFrame();\r\n      buildOwner.finalizeTree();\r\n    }\r\n    ...\r\n  }\r\n```\r\n在 `buildScope(...)` 和 `finalizeTree()` 中间，调用了 `super.drawFrame()`，它会来到 `RendererBinding` 的 `drawFrame()` 方法中\r\n\r\n## RendererBinding -> drawFrame()\r\n\r\n\r\n```\r\n  @protected\r\n  void drawFrame() {\r\n    assert(renderView != null);\r\n    pipelineOwner.flushLayout();\r\n    pipelineOwner.flushCompositingBits();\r\n    pipelineOwner.flushPaint();\r\n    if (sendFramesToEngine) {\r\n      renderView.compositeFrame(); // this sends the bits to the GPU\r\n      pipelineOwner.flushSemantics(); // this also sends the semantics to the OS.\r\n      _firstFrameSent = true;\r\n    }\r\n  }\r\n```\r\n可以看到，这里主要是通过 `PipelineOwner` 去进行一些操作，其中，我们主要关注 `flushLayout()` 和 `flushPaint()`\r\n\r\n## PipelineOwner\r\n\r\n### flushLayout()\r\n\r\n\r\n```\r\n  List<RenderObject> _nodesNeedingLayout = <RenderObject>[];\r\n  ...\r\n  void flushLayout() {\r\n    ...\r\n    try {\r\n      ...\r\n      while (_nodesNeedingLayout.isNotEmpty) {\r\n        final List<RenderObject> dirtyNodes = _nodesNeedingLayout;\r\n        _nodesNeedingLayout = <RenderObject>[];\r\n        for (final RenderObject node in dirtyNodes..sort((RenderObject a, RenderObject b) => a.depth - b.depth)) {\r\n          if (node._needsLayout && node.owner == this)\r\n            node._layoutWithoutResize();\r\n        }\r\n      }\r\n    } finally {\r\n      ...\r\n        _debugDoingLayout = false;\r\n      ...\r\n    }\r\n  }\r\n```\r\n`flushLayout()` 中，依旧是先根据深度，也就是父节点在前子节点在后的顺序进行排序，然后遍历调用 `RenderObject` 的 `_layoutWithoutResize()` 方法\r\n\r\n可以简单看一下 `_layoutWithoutResize()` 方法\r\n\r\n#### RenderObject -> _layoutWithoutResize()\r\n\r\n\r\n```\r\n  void _layoutWithoutResize() {\r\n    ...\r\n    RenderObject debugPreviousActiveLayout;\r\n    ...\r\n      performLayout();\r\n    ...\r\n    _needsLayout = false;\r\n    markNeedsPaint();\r\n  }\r\n  ...\r\n  @protected\r\n  void performLayout();\r\n```\r\n在 `_layoutWithoutResize()` 中，会调用 `performLayout()` 方法，这个方法交由子类实现，一般实现它的子类中，会在这个方法内调用 `performLayout()` 的 `onLayout(...)` 方法\r\n\r\n我们可以简单看一下 `onLayout(...)` \r\n\r\n\r\n```\r\n  void layout(Constraints constraints, { bool parentUsesSize = false }) {\r\n    ...\r\n    if (!parentUsesSize || sizedByParent || constraints.isTight || parent is! RenderObject) {\r\n      relayoutBoundary = this;\r\n    } else {\r\n      relayoutBoundary = (parent as RenderObject)._relayoutBoundary;\r\n    }\r\n    ...\r\n    _relayoutBoundary = relayoutBoundary;\r\n    ...\r\n    if (sizedByParent) {\r\n      ...\r\n        performResize();\r\n      ...\r\n    }\r\n    ...\r\n      performLayout();\r\n    ...\r\n    _needsLayout = false;\r\n    markNeedsPaint();\r\n  }\r\n```\r\n基本上，执行 `performLayout()` 后就可以确定布局的大小了，之后，都会调用 `markNeedsPaint()` \r\n\r\n#### RenderObject -> markNeedsPaint()\r\n\r\n\r\n```\r\n  void markNeedsPaint() {\r\n    ...\r\n    _needsPaint = true;\r\n    if (isRepaintBoundary) {\r\n      ...\r\n      if (owner != null) {\r\n        owner._nodesNeedingPaint.add(this);\r\n        owner.requestVisualUpdate();\r\n      }\r\n    } else if (parent is RenderObject) {\r\n      final RenderObject parent = this.parent as RenderObject;\r\n      parent.markNeedsPaint();\r\n      ...\r\n    } else {\r\n      ...\r\n      if (owner != null)\r\n        owner.requestVisualUpdate();\r\n    }\r\n  }\r\n  \r\n  ...\r\n  bool get isRepaintBoundary => false;\r\n```\r\n可以看到，通过对 `isRepaintBoundary` 进行判断做了不同的逻辑处理，如果 `RenderObject` 的  `isRepaintBoundary` 不为 **true** 则会一直找向父节点查找，直到找到 **true** 为止，然后将它们一起绘制，所以合理重写这个方法可以避免不必要的绘制。\r\n\r\n当 `isRepaintBoundary` 为 **true** 时，就是将需要绘制的 `RenderObject` 放入 `PipelineOwner` 维护的另一个列表 `_nodesNeedingPaint` 中\r\n\r\n`PipelineOwner` 的 `flushLayout()` 差不多就结束了，接下来看一下它的 `flushPaint()`\r\n\r\n### flushPaint()\r\n\r\n\r\n```\r\n  void flushPaint() {\r\n    ...\r\n      _debugDoingPaint = true;\r\n    ...\r\n    try {\r\n      final List<RenderObject> dirtyNodes = _nodesNeedingPaint;\r\n      _nodesNeedingPaint = <RenderObject>[];\r\n      ...\r\n      for (final RenderObject node in dirtyNodes..sort((RenderObject a, RenderObject b) => b.depth - a.depth)) {\r\n        assert(node._layer != null);\r\n        if (node._needsPaint && node.owner == this) {\r\n          if (node._layer.attached) {\r\n            PaintingContext.repaintCompositedChild(node);\r\n          } else {\r\n            node._skippedPaintingOnLayer();\r\n          }\r\n        }\r\n      }\r\n      ...\r\n    } finally {\r\n      ...\r\n        _debugDoingPaint = false;\r\n      ...\r\n    }\r\n  }\r\n```\r\n依旧是排序后，进行遍历处理。这里又引入了一个新的概念 `Layer`。\r\n\r\n当 `node._layer.attached` 为true 时表示该 `Layer` 对象被添加到了 `Layer` 树中。关于这个对象，我们会在下篇文章中进行更加详细的说明\r\n\r\n\r\n\r\n这里只需要关注 ` PaintingContext.repaintCompositedChild(node)` 方法\r\n\r\n在此之前，先简单的说明一下，`PaintingContext` 对象就是用于进行绘制的地方，它持有一个 `Canvas` 对象，你在flutter中看到的所有页面，基本上都是由 `Canvas` 来绘制的\r\n\r\n####  PaintingContext -> repaintCompositedChild(node)\r\n\r\n\r\n```\r\nclass PaintingContext extends ClipContext {\r\n  ...\r\n  static void repaintCompositedChild(RenderObject child, { bool debugAlsoPaintedParent = false }) {\r\n    assert(child._needsPaint);\r\n    _repaintCompositedChild(\r\n      child,\r\n      debugAlsoPaintedParent: debugAlsoPaintedParent,\r\n    );\r\n  }\r\n  ...\r\n}\r\n```\r\n它调用了 `_repaintCompositedChild(...)` 方法\r\n\r\n####  PaintingContext -> _repaintCompositedChild(...)\r\n\r\n\r\n```\r\n  static void _repaintCompositedChild(\r\n    RenderObject child, {\r\n    bool debugAlsoPaintedParent = false,\r\n    PaintingContext childContext,\r\n  }) {\r\n    assert(child.isRepaintBoundary);\r\n    ...\r\n    if (childLayer == null) {\r\n      ...\r\n      child._layer = childLayer = OffsetLayer();\r\n    } else {\r\n      ...\r\n      childLayer.removeAllChildren();\r\n    }\r\n    ...\r\n    childContext ??= PaintingContext(child._layer, child.paintBounds);\r\n    child._paintWithContext(childContext, Offset.zero);\r\n    ...\r\n    assert(identical(childLayer, child._layer));\r\n    childContext.stopRecordingIfNeeded();\r\n  }\r\n```\r\n\r\n\r\n\r\n最后，主要的逻辑都在 `RenderObject` 的 `_paintWithContext(...)` 中\r\n\r\n### RenderObject -> _paintWithContext(...)\r\n\r\n\r\n```\r\n  void _paintWithContext(PaintingContext context, Offset offset) {\r\n    ...\r\n    _needsPaint = false;\r\n    try {\r\n      paint(context, offset);\r\n      ...\r\n    }\r\n    ...\r\n  }\r\n  \r\n  void paint(PaintingContext context, Offset offset) { }\r\n```\r\n最后执行的 `paint(...)` 方法，显然交由子类去实现。\r\n\r\n其实到这里，关于 `RenderObject` 的流程分析就差不多了。销毁的部分和我们之前看的 `Element` 销毁都是大同小异的，所以这里不介绍了\r\n\r\n下面，我们可以用一个简单的例子来作为这次 `RenderObject` 的学习\r\n\r\n# 例子\r\n\r\n\r\n```\r\nimport 'package:flutter/material.dart';\r\nimport 'dart:math';\r\n\r\nvoid main() => runApp(MyWidget());\r\n\r\nclass MyWidget extends SingleChildRenderObjectWidget{\r\n  @override\r\n  RenderObject createRenderObject(BuildContext context) => MyRenderObject();\r\n}\r\n\r\nclass MyElement extends SingleChildRenderObjectElement{\r\n  MyElement(SingleChildRenderObjectWidget widget) : super(widget);\r\n}\r\n\r\nclass MyRenderObject extends RenderBox{\r\n\r\n  @override\r\n  BoxConstraints get constraints => BoxConstraints(minHeight: 100.0, minWidth: 100.0);\r\n\r\n  @override\r\n  void performLayout() => size = Size(constraints.minWidth + Random().nextInt(200), constraints.minHeight + Random().nextInt(200));\r\n\r\n  @override\r\n  void paint(PaintingContext context, Offset offset) {\r\n    Paint paint = Paint()..color = Colors.primaries[Random().nextInt(Colors.primaries.length)];\r\n    context.canvas.drawRect(Rect.fromLTWH(offset.dx, offset.dy, size.width, size.height), paint);\r\n  }\r\n}\r\n```\r\n\r\n例子可以直接在这里进行测试：https://dartpad.dev/\r\n\r\n我们重写了 `RenderBox` ，它是 `RenderObject` 一个主要的抽象实现类\r\n\r\n`RenderBox` 中获取 `BoxConstraints` 的方法默认调用的是父节点的 `constraints` ，这里为了简化例子，我们将其重写了。这个对象主要是用于对 `RenderBox` 的大小进行限制，这个限制的逻辑你是可以自定义的\r\n\r\n\r\n\r\n一般情况下，我们要自定义自己的 `RenderObject` ，都是重写 `RenderBox`。要自定义 `Element` 则是重写 `SingleChildRenderObjectElement` 或者 `MultiChildRenderObjectElement`\r\n\r\n那么这篇关于 `RenderObject` 的文章就到这里结束了\r\n\r\n\r\n# 总结\r\n\r\n简单的总结一下 `RenderObject` 的一些特性吧\r\n\r\n- `RenderObject` 的主要职责就是完成界面的布局、测量与绘制\r\n- `RenderObject` 中有一个 `ParentData` 对象，如果有父节点需要将某些数据存储在子节点，会给子节点设置 `ParentData` 并将数据存入其中。比如 `RenderAligningShiftedBox` 在 `performLayout()` 时，就会给 child 设置 `BoxParentData`，在其中存储偏移量 `Offeset`，代表 `Widgett` 就是 `Center`\r\n- `RenderObject` 在进行绘制时，会判断当前的 `isRepaintBoundary` 是否为 **true**，是则创建一个自己的 `Layer` 去进行进行绘制，默认为 `OffsetLayer`；不是则从父节点中获取 `Layer` ，与父节点一起绘制。关于 `Layer` 的更多信息，将在下一篇中详细说明","edcd4c5f":"---\r\ntitle: 从源码看flutter（二）：Element篇\r\ndate: 2020-04-17 03:39:25\r\nindex_img: /img/flutter_02.png\r\ntags: Flutter系列\r\n---\r\n# 开篇\r\n\r\n上一篇 [从源码看flutter（一）：Widget篇](http://oldben.gitee.io/flutter-blog/#/articlePage/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8Bflutter%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AWidget%E7%AF%87) 我们了解到了关于 `Widget` 的相关知识， 知道了 `Element` 都是通过 `Widget` 的 `createElement()` 方法来创建的。\r\n\r\n那么，是谁调用了 `createElement()` 方法？通过查找， 发现只有两处调用了这个方法。分别是：\r\n\r\n- `Element` 的 `inflateWidget(...)` 方法\r\n- `RenderObjectToWidgetAdapter` 的 `attachToRenderTree(...)` 方法\r\n\r\n第一个方法在 `Element` 内部，并且不是 **static** 方法，显然 `Element` 不可能凭空调用自己的方法创建自己， 所以它是用来生成其他 `Element` 对象的。而第一个 `Element` 就是在第二个方法被创建出来的。\r\n\r\n在我们介绍 `Element` 对象之前，我们可以先简单了解一下第一个 `Element` 的创建过程\r\n\r\n## RenderObjectToWidgetElement\r\n\r\n我们知道，flutter的入口在 `runApp(widget)` 方法里，我们可以看一下:\r\n\r\n### runApp(app)\r\n\r\n```\r\nvoid runApp(Widget app) {\r\n  WidgetsFlutterBinding.ensureInitialized()\r\n    ..scheduleAttachRootWidget(app)\r\n    ..scheduleWarmUpFrame();\r\n}\r\n```\r\n在这里进行了所有的初始化操作，而我们通过 `runApp(app)` 传入的根 `Widget` 被第二个方法 `scheduleAttachRootWidget(app)` 所调用，从这个方法进入\r\n\r\n### scheduleAttachRootWidget(app)\r\n\r\n\r\n```\r\nmixin WidgetsBinding on BindingBase, ServicesBinding, SchedulerBinding, GestureBinding, RendererBinding, SemanticsBinding {\r\n  ...\r\n  @protected\r\n  void scheduleAttachRootWidget(Widget rootWidget) {\r\n    Timer.run(() {\r\n      attachRootWidget(rootWidget);\r\n    });\r\n  }\r\n  ...\r\n  void attachRootWidget(Widget rootWidget) {\r\n    _renderViewElement = RenderObjectToWidgetAdapter<RenderBox>(\r\n      container: renderView,\r\n      debugShortDescription: '[root]',\r\n      child: rootWidget,\r\n    ).attachToRenderTree(buildOwner, renderViewElement as RenderObjectToWidgetElement<RenderBox>);\r\n  }\r\n  ...\r\n}\r\n```\r\n可以看到，最终通过创建 `RenderObjectToWidgetAdapter` 对象，并调用其 `attachToRenderTree(...)` 方法创建了 `RenderObjectToWidgetElement`，我们简单了解一下\r\n\r\n### attachToRenderTree(...)\r\n\r\n\r\n```\r\nclass RenderObjectToWidgetAdapter<T extends RenderObject> extends RenderObjectWidget {\r\n  ...\r\n  RenderObjectToWidgetElement<T> attachToRenderTree(BuildOwner owner, [ RenderObjectToWidgetElement<T> element ]) {\r\n    ...\r\n        element = createElement();\r\n    ...\r\n    return element;\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n这里的 `createElement()` 也就是我们之前提到过的，第二个调用的地方。之后所有的 `Element` 都是通过其 **父Element** 调用 `inflateWidget(...)` 方法所创建了\r\n\r\n接下来，我们开始正式介绍 `Element` 对象\r\n\r\n# Element\r\n\r\n\r\n我们常用的 `StatefulWidget` 、`StatelessWidget` 所对应的 `Element` 对象，继承关系如下:\r\n\r\n> xxxElement -> ComponentElement -> Element\r\n\r\n许多其他的 `Element` 对象也都是直接或者间接继承于 `ComponentElement` ，不过 `RenderObjectWidget` 的 `Element` 继承关系如下：\r\n\r\n> RenderObjectElement -> Element\r\n\r\n下面，我们从 `Element` 的构造函数开始\r\n\r\n## Element(widget)\r\n\r\n```\r\n  Element(Widget widget)\r\n    : assert(widget != null),\r\n      _widget = widget;\r\n```\r\n在构造函数里面，进行了 `Element` 所对应的 `Widget` 对象的赋值。接下来看一看 `Element` 的结构\r\n\r\n\r\n```\r\nabstract class Element extends DiagnosticableTree implements BuildContext {\r\n    ...\r\n}\r\n```\r\n\r\n`DiagnosticableTree` 在第一篇已经介绍过，这里不再赘述。可以看到这里有个我们熟悉的对象 `BuildContext` , 经常可以在 `Widget` 或 `State` 的 `build(...)` 方法中看到它，我们先来简单的了解一下它\r\n\r\n## BuildContext\r\n\r\n\r\n```\r\nabstract class BuildContext {\r\n    \r\n  Widget get widget;\r\n  \r\n  BuildOwner get owner;\r\n  ...\r\n  RenderObject findRenderObject();\r\n  ...\r\n  InheritedElement getElementForInheritedWidgetOfExactType<T extends InheritedWidget>();\r\n\r\n  T findAncestorWidgetOfExactType<T extends Widget>();\r\n  ...\r\n  void visitChildElements(ElementVisitor visitor);\r\n  ...\r\n}\r\n```\r\n上面列出了比较典型的一些方法。`BuildContext` 是一个抽象类，因为 dart 中没有 **Interface** ，而这里的 `BuildContext` 本质上只提供各种调用方法，所以完全可以把它当成 java 中的接口\r\n\r\n其中 `BuildOwner` 对象只在 `WidgetsBinding` 的 `initInstances()` 中初始化过一次，也就是说全局只有唯一的实例。他是 **widget framework** 的管理类，实际上的的作用有很多，比如在 `Element` 中，就负责管理它的生命周期\r\n\r\n其他的一些方法：\r\n\r\n- findRenderObject(): 用于返回当前 `Widget` 对应的 `RenderObject` ，如果当前 `Widget` 不是 `RenderObjectWidget` 则从children中寻找\r\n- getElementForInheritedWidgetOfExactType(): 在维护的 `Map<Type, InheritedElement>` 中查找 `InheritedElement`，在我们熟知的 `Provider` 中的 `Provider.of<T>(context)` 就是通过这种方法获取数据类的\r\n- findAncestorWidgetOfExactType(): 通过遍历 `Element` 的 **parent** 来找到指定类型Widget\r\n- visitChildElements(): 用于遍历 **子Element**\r\n\r\n`BuildContext` 大致就介绍这些，接下来我们来看 `Element` 中的一些成员变量\r\n\r\n## Element的成员变量\r\n\r\n\r\n```\r\nabstract class Element extends DiagnosticableTree implements BuildContext {\r\n  ...\r\n  Element _parent;\r\n  ...\r\n  dynamic _slot;\r\n  ...\r\n  int _depth;\r\n  ...\r\n  Widget _widget;\r\n  ...\r\n  BuildOwner _owner;\r\n  ...\r\n  bool _active = false;\r\n  ...\r\n  _ElementLifecycle _debugLifecycleState = _ElementLifecycle.initial;\r\n  ...\r\n  Map<Type, InheritedElement> _inheritedWidgets;\r\n  ...\r\n  bool _dirty = true;\r\n  ...\r\n  bool _inDirtyList = false;\r\n}\r\n```\r\n\r\n上面列举出了主要的一些成员变量\r\n\r\n`Element` 中默认持有 `parent` 对象，而 `slot` 用于表示它在  `parent` 中 **child列表** 的位置，如果 `parent` 只有一个 **child** ， `slot` 应该为 null ，再来看看剩下的一些变量\r\n\r\n- depth : 当前 `Element` 节点在树中的深度，深度是递增的，且必须大于0\r\n- _active: 默认为 **false**， 当 `Element` 被添加到树后，变为 **true**\r\n- _inheritedWidgets: 从 `parent` 一直传递下来，维护了所有 `InheritedElement` ，不过很好奇为什么这里不直接用 **static** 修饰，是为了方便垃圾回收吗？\r\n- dirty: 如果为 **true** 就表示需要 **reBuild** 了， 在 `markNeedsBuild()` 中会被设为 **true**\r\n- _inDirtyList: 当 `Element` 被标记为 `dirty` 后，随之会将 `Element` 放入 `BuildOwner` 中的 `_dirtyElements` ，并设置为 **true** ，等待 **reBuild**\r\n\r\n\r\n还有一个 生命周期对象 `_debugLifecycleState`\r\n\r\n```\r\nenum _ElementLifecycle {\r\n  initial,\r\n  active,\r\n  inactive,\r\n  defunct,\r\n}\r\n```\r\n它对外部是隐藏的，这个生命周期和 `State` 的有点类似，不过其中的 `active` 和 `inactive` 是可以来回切换的，这里就涉及到 `Element` 的复用了，后面会说\r\n\r\n然后是 `Element` 的一些主要方法，我们简单的看一下\r\n\r\n## Element的方法\r\n\r\n\r\n```\r\n  RenderObject get renderObject { ... }\r\n  \r\n  void visitChildren(ElementVisitor visitor) { }\r\n  \r\n  @override\r\n  void visitChildElements(ElementVisitor visitor) {\r\n    ...\r\n    visitChildren(visitor);\r\n  }\r\n  \r\n  @protected\r\n  Element updateChild(Element child, Widget newWidget, dynamic newSlot) { ... }\r\n  \r\n  @mustCallSuper\r\n  void mount(Element parent, dynamic newSlot) { ... }\r\n  \r\n  @mustCallSuper\r\n  void update(covariant Widget newWidget) {\r\n    ...\r\n    _widget = newWidget;\r\n  }\r\n  \r\n  Element _retakeInactiveElement(GlobalKey key, Widget newWidget) { ... }\r\n  \r\n  @protected\r\n  Element inflateWidget(Widget newWidget, dynamic newSlot) { ... }\r\n  \r\n  @protected\r\n  void deactivateChild(Element child) { ... }\r\n  \r\n  @mustCallSuper\r\n  void activate() { ... }\r\n  \r\n  @mustCallSuper\r\n  void deactivate() { ... }\r\n  \r\n  @mustCallSuper\r\n  void unmount() { ... }\r\n  \r\n  @mustCallSuper\r\n  void didChangeDependencies() {\r\n    ...\r\n    markNeedsBuild();\r\n  }\r\n  \r\n  void markNeedsBuild(){ ... }\r\n  \r\n  void rebuild() { ... }\r\n  \r\n  @protected\r\n  void performRebuild();\r\n```\r\n上面的主要方法中，最核心的是 `mount()` 、`unmount()` 、`inflateWidget(...)` 、`updateChild(...)` 、`rebuild()` 这些\r\n\r\n这里我们不去直接介绍这些方法的作用，因为脱离上下文单独看的话可能阅读体验不会太好，后面会走一遍 `Element` 的创建流程，在这个过程中去阐述各个方法的作用。\r\n\r\n不过我们可以先看其中一个方法 `renderObject` 了解一下 `Element` 与 `RenderObject` 的对应关系\r\n\r\n\r\n```\r\n  RenderObject get renderObject {\r\n    RenderObject result;\r\n    void visit(Element element) {\r\n      assert(result == null); // this verifies that there's only one child\r\n      if (element is RenderObjectElement)\r\n        result = element.renderObject;\r\n      else\r\n        element.visitChildren(visit);\r\n    }\r\n    visit(this);\r\n    return result;\r\n  }\r\n```\r\n解释一下就是，如果当前 `element` 是 `RenderObjectElement` 的话，直接返回它持有的 `renderObject` ，否则遍历 children 去获取最近的 `renderObject` 对象\r\n\r\n从这里也可以知道 `RenderObject` 只与 `RenderObjectElement` 是一一对应的，与其他 `Element` 则是一对多的关系，也验证了我们上一篇中的判定\r\n\r\n> 不过这里有一点需要吐槽的是，在方法里面直接定义方法，阅读体验不是特别好，而后面这样的情况还会很多\r\n\r\n接下来，我们准备进入 `Element` 的创建流程入口\r\n\r\n## Element 创建流程入口\r\n\r\n既然要走创建流程，自然是要找个起点的。在上一篇中，我们知道通过 `createElement()` 创建 `Element` 的方法只在两个地方被调用：\r\n\r\n- 其一是作为根节点 `Element` 的 `RenderObjectToWidgetElement` 在 `RenderObjectToWidgetAdapter` 的 `attachToRenderTree(...)` 中被创建\r\n- 另一个是其他所有 `Element` 在 `inflateWidget(...)` 方法中被创建\r\n\r\n我们以第二个方法为入口，进入 `Element` 的创建流程，先简单的看一下第二个方法\r\n\r\n\r\n```\r\nabstract class Element extends DiagnosticableTree implements BuildContext {\r\n  ...\r\n  @protected\r\n  Element inflateWidget(Widget newWidget, dynamic newSlot) {\r\n    ...\r\n    final Element newChild = newWidget.createElement();\r\n    ...\r\n    newChild.mount(this, newSlot);\r\n    assert(newChild._debugLifecycleState == _ElementLifecycle.active);\r\n    return newChild;\r\n  }\r\n  ...\r\n}\r\n```\r\n可以看到，上面最后调用了 `Element` 的 `mount(...)` 方法，所以这个方法算是各个 `Element` 的入口了。\r\n\r\n上一篇我们提到过，不同 `Widget` 对应 `Element` 的实现都不一样，其中最广泛的两种实现分别是 `ComponentElement` 和 `RenderObjectElement`。\r\n\r\n我们可以从第一个开始了解\r\n\r\n## ComponentElement 的创建流程\r\n\r\n进入它的 `mount(...)` 方法\r\n\r\n### mount(...)\r\n\r\n```\r\n  void mount(Element parent, dynamic newSlot) {\r\n    super.mount(parent, newSlot);\r\n    ...\r\n    _firstBuild();\r\n    ...\r\n  }\r\n```\r\n调用了父类，也就是 `Element` 的 `mount(...)`\r\n\r\n### Element -> mount(...)\r\n\r\n\r\n```\r\n  @mustCallSuper\r\n  void mount(Element parent, dynamic newSlot) {\r\n    ...\r\n    _parent = parent;\r\n    _slot = newSlot;\r\n    _depth = _parent != null ? _parent.depth + 1 : 1;\r\n    _active = true;\r\n    if (parent != null) // Only assign ownership if the parent is non-null\r\n      _owner = parent.owner;\r\n    final Key key = widget.key;\r\n    if (key is GlobalKey) {\r\n      key._register(this);\r\n    }\r\n    _updateInheritance();\r\n    assert(() {\r\n      _debugLifecycleState = _ElementLifecycle.active;\r\n      return true;\r\n    }());\r\n  }\r\n```\r\n可以看到，在 `mount(...)` 中，进行了一些列的初始化操作。\r\n\r\n其中如果传入的 `key` 是 `GlobalKey` ，会将当前 `Element` 存入 `GlobalKey` 中维护的 `Map<GlobalKey, Element>` 对象。\r\n\r\n最后会将生命周期设置为 `_ElementLifecycle.active`\r\n\r\n接下来，可以看一下 `ComponentElement` 的 `_firstBuild()`\r\n\r\n### _firstBuild()\r\n\r\n\r\n```\r\n  void _firstBuild() {\r\n    rebuild();\r\n  }\r\n```\r\n调用了 `rebuild()` ，它是在 `Element` 中实现的\r\n\r\n\r\n### Element -> rebuild()\r\n\r\n\r\n```\r\n  void rebuild() {\r\n    ...\r\n    performRebuild();\r\n    ...\r\n  }\r\n  \r\n  @protected\r\n  void performRebuild();\r\n```\r\n最后调用到 `performRebuild()` 方法，`Element` 中这个方法什么都没做，就是交由子类去实现的，接下来回到 `ComponentElement` \r\n\r\n### performRebuild()\r\n\r\n\r\n```\r\n  @override\r\n  void performRebuild() {\r\n    if (!kReleaseMode && debugProfileBuildsEnabled)\r\n      Timeline.startSync('${widget.runtimeType}',  arguments: timelineWhitelistArguments);\r\n\r\n    ...\r\n    Widget built;\r\n    try {\r\n      built = build();\r\n      ...\r\n    } catch (e, stack) {\r\n      built = ErrorWidget.builder(...);\r\n    } finally {\r\n      ...\r\n      _dirty = false;\r\n      ...\r\n    }\r\n    try {\r\n      _child = updateChild(_child, built, slot);\r\n      assert(_child != null);\r\n    } catch (e, stack) {\r\n      built = ErrorWidget.builder(...);\r\n      _child = updateChild(null, built, slot);\r\n    }\r\n\r\n    if (!kReleaseMode && debugProfileBuildsEnabled)\r\n      Timeline.finishSync();\r\n  }\r\n```\r\n可以看到，开头和结尾都做了debug模式的判断，并使用了 `Timeline` 这个对象，它的作用其实就是我们之前介绍过的，用于在 **DevTool** 中检测性能表现\r\n\r\n可以看到，上面通过调用我们最熟悉的 `build()` 方法来创建 `Widget` ，如果发生异常的话，就会在 `catch` 语句中创建一个 `ErrorWidget`， 也就是我们常常遇见的那个红色的错误界面啦！\r\n\r\n后面会通过 `updateChild(...)` 来给当前 `Element` 的 `_child` 赋值\r\n\r\n而  `updateChild(...)` 位于 `Element` 中\r\n\r\n### Element -> updateChild(...)\r\n\r\n```\r\n  Element updateChild(Element child, Widget newWidget, dynamic newSlot) {\r\n    ...\r\n    if (newWidget == null) {\r\n      if (child != null)\r\n        deactivateChild(child);\r\n      return null;\r\n    }\r\n    if (child != null) {\r\n      if (child.widget == newWidget) {\r\n        if (child.slot != newSlot)\r\n          updateSlotForChild(child, newSlot);\r\n        return child;\r\n      }\r\n      if (Widget.canUpdate(child.widget, newWidget)) {\r\n        if (child.slot != newSlot)\r\n          updateSlotForChild(child, newSlot);\r\n        child.update(newWidget);\r\n        assert(child.widget == newWidget);\r\n        assert(() {\r\n          child.owner._debugElementWasRebuilt(child);\r\n          return true;\r\n        }());\r\n        return child;\r\n      }\r\n      deactivateChild(child);\r\n      assert(child._parent == null);\r\n    }\r\n    return inflateWidget(newWidget, newSlot);\r\n  }\r\n```\r\n\r\n`updateChild(...)` 是非常重要的一个方法，它接受三个参数，分别是 `Element child` 、`Widget newWidget` 以及 `dynamic newSlot`，传入的参数不同，这个方法的作用也不一样，主要分为下面几种情况：\r\n\r\n|                     | newWidget为null  | newWidget不为null   |\r\n| --- | --- | --- |\r\n|  child为null  |  ①.返回null         |  ②.返回新的Elment |\r\n|  child不为null  | ③.移除传入child,返回null | ④.根据 canUpdate(...) 决定返回更新后的child或者新Element |\r\n\r\n其中的 `deactivateChild(child)` 就是将传入 `Element` 移除掉\r\n\r\n而我们在 `performRebuild()` 中创来的值是: **child为null** 并且 **newWidget不为null**，属于第二种情况。直接进入 `inflateWidget(...)` 方法\r\n\r\n### Element -> inflateWidget(...)\r\n\r\n又回到最初的起点\r\n\r\n```\r\n  @protected\r\n  Element inflateWidget(Widget newWidget, dynamic newSlot) {\r\n    assert(newWidget != null);\r\n    final Key key = newWidget.key;\r\n    if (key is GlobalKey) {\r\n      final Element newChild = _retakeInactiveElement(key, newWidget);\r\n      if (newChild != null) {\r\n        assert(newChild._parent == null);\r\n        assert(() {\r\n          _debugCheckForCycles(newChild);\r\n          return true;\r\n        }());\r\n        newChild._activateWithParent(this, newSlot);\r\n        final Element updatedChild = updateChild(newChild, newWidget, newSlot);\r\n        assert(newChild == updatedChild);\r\n        return updatedChild;\r\n      }\r\n    }\r\n    //创建新的Element，开始下一轮循环\r\n    return newChild;\r\n  }\r\n```\r\n\r\n方法后部分的逻辑之前已经说过，这里可以看一下前部分关于 `GlobalKey` 的部分。如果获取到 `widget` 的 `key` 是 `GlobalKey`， 并且之前 `Widget` 已经在 `Element` 的 `mount(...)` 中注册到了 `GlobalKey`的话，就会在这里取出并且复用。这部分是在 `_retakeInactiveElement(...)` 完成的，可以简单看一下：\r\n\r\n\r\n```\r\n  Element _retakeInactiveElement(GlobalKey key, Widget newWidget) {\r\n    final Element element = key._currentElement;\r\n    if (element == null)\r\n      return null;\r\n    if (!Widget.canUpdate(element.widget, newWidget))\r\n      return null;\r\n    ...\r\n    return element;\r\n  }\r\n```\r\n当`Element`不存在或者无法更新时，则不会进行复用，返回 null\r\n\r\n如果结果不为null，后面再调用 `updateChild(...)` 方法，这里传入的参数都不为null，所以会进入之前所说的第四种情况：\r\n\r\n\r\n```\r\n  Element updateChild(Element child, Widget newWidget, dynamic newSlot) {\r\n    ...\r\n      //这里一定是true的\r\n      if (Widget.canUpdate(child.widget, newWidget)) {\r\n        if (child.slot != newSlot)\r\n          updateSlotForChild(child, newSlot);\r\n        child.update(newWidget);\r\n        assert(child.widget == newWidget);\r\n        assert(() {\r\n          child.owner._debugElementWasRebuilt(child);\r\n          return true;\r\n        }());\r\n        return child;\r\n      }\r\n    ...\r\n    return inflateWidget(newWidget, newSlot);\r\n  }\r\n```\r\n注意到上面的部分，调用 `child` 的 `update(newWidget)` 方法，这个方法除了更新当前 `Element` 持有的 `Widget` 外，剩下的逻辑都交给子类去实现了\r\n\r\n那么 `ComponentElement` 的创建流程大致就讲到这里\r\n\r\n下面，我们可以看一下 `ComponentElement` 的两个子类 `StatelessElement` 与 `StatefulElement`\r\n\r\n### StatelessElement \r\n\r\n\r\n```\r\nclass StatelessElement extends ComponentElement {\r\n  /// Creates an element that uses the given widget as its configuration.\r\n  StatelessElement(StatelessWidget widget) : super(widget);\r\n\r\n  @override\r\n  StatelessWidget get widget => super.widget as StatelessWidget;\r\n\r\n  @override\r\n  Widget build() => widget.build(this);\r\n\r\n  @override\r\n  void update(StatelessWidget newWidget) {\r\n    super.update(newWidget);\r\n    assert(widget == newWidget);\r\n    _dirty = true;\r\n    rebuild();\r\n  }\r\n}\r\n```\r\n`StatelessElement` 非常简单，重写的 `update(...)` 也只是调用了 `rebuild()`，感觉没有什么可说的。\r\n\r\n接下来看看 `StatefulElement`\r\n\r\n### StatefulElement\r\n\r\n\r\n```\r\nclass StatefulElement extends ComponentElement {\r\n\r\n  StatefulElement(StatefulWidget widget)\r\n      : _state = widget.createState(),\r\n        super(widget) {\r\n    ...\r\n    _state._element = this;\r\n    ...\r\n    _state._widget = widget;\r\n    ...\r\n   }\r\n   \r\n  \r\n  @override\r\n  void _firstBuild() { ... }\r\n  \r\n  @override\r\n  void update(StatefulWidget newWidget) { ... }\r\n  \r\n  @override\r\n  void unmount() { ... }\r\n}\r\n```\r\n这里展示了 `StatefulElement` 一些主要的方法，可以看到在构造函数中把 `Element` 和 `Widget` 对象放入了 `State` 中\r\n\r\n接下来看一下剩下三个方法都做了什么\r\n\r\n#### _firstBuild()\r\n\r\n\r\n```\r\n  @override\r\n  void _firstBuild() {\r\n      ...\r\n      final dynamic debugCheckForReturnedFuture = _state.initState() as dynamic;\r\n      ...\r\n      _state._debugLifecycleState = _StateLifecycle.initialized;\r\n    ...\r\n    _state.didChangeDependencies();\r\n      ...\r\n      _state._debugLifecycleState = _StateLifecycle.ready;\r\n      ...\r\n    super._firstBuild();\r\n  }\r\n```\r\n`ComponentElement` 中是在 `mount(...)`里调用 `_firstBuild()` 的，这里重写了这个方法，并且在里面进行了一些初始化的操作，并且调用了 `State` 的 `initState()` 方法\r\n\r\n### update(...)\r\n\r\n\r\n```\r\n  @override\r\n  void update(StatefulWidget newWidget) {\r\n    super.update(newWidget);\r\n    ...\r\n    final StatefulWidget oldWidget = _state._widget;\r\n    ...\r\n    _dirty = true;\r\n    _state._widget = widget as StatefulWidget;\r\n      ...\r\n      final dynamic debugCheckForReturnedFuture = _state.didUpdateWidget(oldWidget) as dynamic;\r\n      ...\r\n    rebuild();\r\n  }\r\n```\r\n在这里主要是调用了 `State` 的 `didUpdateWidget(...)` 方法，其他内容和 `StatelessElement` 差不多\r\n\r\n那么到了这里，关于 `StatefulWidget`中我们常用的 `setState()` 方法，它具体会走过 `StatelessElement` 的哪些过程呢，下面我们就来看一下\r\n\r\n## StatefulElement的刷新流程\r\n\r\n我们知道 `State` 的 `setState()` 方法会调用 `Element` 的 `markNeedsBuild()`\r\n\r\n### Element -> markNeedsBuild()\r\n\r\n\r\n```\r\n  BuildOwner get owner => _owner;\r\n\r\n  void markNeedsBuild() {\r\n    ...\r\n    if (dirty)\r\n      return;\r\n    _dirty = true;\r\n    owner.scheduleBuildFor(this);\r\n  }\r\n```\r\n下面进入 `BuildOwner` 看看 `scheduleBuildFor(element)` 做了些什么\r\n\r\n### BuildOwner -> scheduleBuildFor(element)\r\n\r\n\r\n```\r\n  final List<Element> _dirtyElements = <Element>[];\r\n\r\n  void scheduleBuildFor(Element element) {\r\n    ...\r\n    if (element._inDirtyList) {\r\n      ...\r\n      _dirtyElementsNeedsResorting = true;\r\n      return;\r\n    }\r\n    ...\r\n    if (!_scheduledFlushDirtyElements && onBuildScheduled != null) {\r\n      _scheduledFlushDirtyElements = true;\r\n      onBuildScheduled();\r\n    }\r\n    _dirtyElements.add(element);\r\n    element._inDirtyList = true;\r\n    ...\r\n  }\r\n```\r\n可以看到，`scheduleBuildFor(element)` 后面会将需要刷新的 `Element` 添加到 `_dirtyElements` 中，并将该 `Element` 的 `_inDirtyList` 标记为 **true**\r\n\r\n但之后并没有做其他的操作，那刷新到底是如何进行的呢？这就要看前面调用的一个方法 `onBuildScheduled()` 了\r\n\r\n### BuildOwner -> onBuildScheduled()\r\n\r\n这个方法是在 `BuildOwner` 被创建时设置的\r\n\r\n\r\n```\r\nmixin WidgetsBinding on BindingBase, ServicesBinding, SchedulerBinding, GestureBinding, RendererBinding, SemanticsBinding {\r\n  ...\r\n  @override\r\n  void initInstances() {\r\n    ...\r\n    _buildOwner = BuildOwner();\r\n    buildOwner.onBuildScheduled = _handleBuildScheduled;\r\n    ...\r\n  }\r\n  ...\r\n}\r\n\r\n```\r\n来看一下 `_handleBuildScheduled`\r\n\r\n\r\n#### WidgetsBinding  -> _handleBuildScheduled\r\n\r\n\r\n```\r\n  void _handleBuildScheduled() {\r\n    ...\r\n    ensureVisualUpdate();\r\n  }\r\n```\r\n`ensureVisualUpdate()` 在 `SchedulerBinding` 中被定义\r\n\r\n\r\n```\r\nmixin SchedulerBinding on BindingBase, ServicesBinding {\r\n  ...\r\n  void ensureVisualUpdate() {\r\n    switch (schedulerPhase) {\r\n      ...\r\n      case SchedulerPhase.postFrameCallbacks:\r\n        scheduleFrame();\r\n        return;\r\n      ...\r\n    }\r\n  }\r\n  ...\r\n}\r\n```\r\n后面会进入 `scheduleFrame()` 方法\r\n\r\n#### SchedulerBinding -> scheduleFrame()\r\n\r\n\r\n```\r\n  @protected\r\n  void ensureFrameCallbacksRegistered() {\r\n    window.onBeginFrame ??= _handleBeginFrame;\r\n    window.onDrawFrame ??= _handleDrawFrame;\r\n  }\r\n  \r\n  void scheduleFrame() {\r\n    ...\r\n    ensureFrameCallbacksRegistered();\r\n    window.scheduleFrame();\r\n    _hasScheduledFrame = true;\r\n  }\r\n  \r\n```\r\n这里会调用 `window.scheduleFrame()` \r\n\r\n\r\n#### Window -> scheduleFrame()\r\n\r\n\r\n```\r\nclass Window {\r\n  ...\r\n  /// Requests that, at the next appropriate opportunity, the [onBeginFrame]\r\n  /// and [onDrawFrame] callbacks be invoked.\r\n  ///\r\n  /// See also:\r\n  ///\r\n  ///  * [SchedulerBinding], the Flutter framework class which manages the\r\n  ///    scheduling of frames.\r\n  void scheduleFrame() native 'Window_scheduleFrame';\r\n}\r\n```\r\n到了这里，就是对 engine 的相关操作了。其中，经过各种各样的操作之后，会回调到 dart 层的 `_drawFrame()` 方法\r\n\r\n> sky_engine -> ui -> hooks.dart -> _drawFrame()\r\n\r\n如果你对 engine 中的**这一部分操作**感兴趣的话，可以看一下这一篇文章 [Flutter渲染机制—UI线程](http://gityuan.com/2019/06/15/flutter_ui_draw/)， 因为都是C++的内容，超越了我的能力范畴，所以这里直接去看大神的吧\r\n\r\n`_drawFrame()` 方法内容如下：\r\n\r\n```\r\nvoid _drawFrame() {\r\n  _invoke(window.onDrawFrame, window._onDrawFrameZone);\r\n}\r\n```\r\n最后，会调用到之前在 `SchedulerBinding` 中 `onDrawFrame` 所注册的 `_handleDrawFrame` 方法, 它会调用 `handleDrawFrame()`\r\n\r\n####  SchedulerBinding -> handleDrawFrame()\r\n\r\n\r\n```\r\n  void handleDrawFrame() {\r\n    ...\r\n    try {\r\n      // PERSISTENT FRAME CALLBACKS\r\n      _schedulerPhase = SchedulerPhase.persistentCallbacks;\r\n      for (FrameCallback callback in _persistentCallbacks)\r\n        _invokeFrameCallback(callback, _currentFrameTimeStamp);\r\n      ...\r\n    }\r\n    ...\r\n  }\r\n```\r\n在这里会遍历 `_persistentCallbacks` 来执行对应方法，它是通过 `RendererBinding` 的 `addPersistentFrameCallback` 添加，并且之后的每一次 frame 回调都会遍历执行一次\r\n\r\n这里将要执行的方法，是在 `RendererBinding` 的 `initInstances()` 中添加的 `_handlePersistentFrameCallback`\r\n\r\n\r\n```\r\n  void _handlePersistentFrameCallback(Duration timeStamp) {\r\n    drawFrame();\r\n    _mouseTracker.schedulePostFrameCheck();\r\n  }\r\n```\r\n最后，会调用到 `WidgetBinding` 的 `drawFrame()`\r\n\r\n#### WidgetBinding -> drawFrame()\r\n\r\n```\r\n  @override\r\n  void drawFrame() {\r\n    ...\r\n    try {\r\n      if (renderViewElement != null)\r\n        buildOwner.buildScope(renderViewElement);\r\n      super.drawFrame();\r\n      buildOwner.finalizeTree();\r\n    }\r\n    ...\r\n  }\r\n```\r\n`renderViewElement` 就是我们之前看 `runApp()` 流程中所创建的 **根Element**\r\n\r\n最后调又回到了 `BuildOwner` 对象，并调用它的 `buildScope(...)` 方法\r\n\r\n### BuildOwner -> buildScope(...)\r\n\r\n `buildScope(...)` 用于对 **Element Tree** 进行局部更新\r\n\r\n```\r\n  void buildScope(Element context, [ VoidCallback callback ]) {\r\n    ...\r\n      _debugBuilding = true;\r\n    ...\r\n      _scheduledFlushDirtyElements = true;\r\n    ...\r\n      _dirtyElements.sort(Element._sort);\r\n      _dirtyElementsNeedsResorting = false;\r\n      int dirtyCount = _dirtyElements.length;\r\n      int index = 0;\r\n      while (index < dirtyCount) {\r\n        ...\r\n          _dirtyElements[index].rebuild();\r\n        ...\r\n        index += 1;\r\n        ...\r\n        //如果在局部更新的过程中，_dirtyElements发生了变化\r\n        //比如可能有新的对象插入了_dirtyElements，就在这里进行处理\r\n      }\r\n    ...\r\n      for (Element element in _dirtyElements) {\r\n        assert(element._inDirtyList);\r\n        element._inDirtyList = false;\r\n      }\r\n      _dirtyElements.clear();\r\n      _scheduledFlushDirtyElements = false;\r\n      _dirtyElementsNeedsResorting = null;\r\n    ...\r\n        _debugBuilding = false;\r\n    ...\r\n  }\r\n```\r\n所以其实从上面我们就能知道，局部更新的原理就是把需要更新的对象存入了 `_dirtyElements` 中，然后在需要更新的时候，遍历它们，进行 `reBuild()`\r\n\r\n遍历之前，会调用 `sort(...)` 方法进行排序，判断条件是 `Element` 的深度，按照从小到大排列，也就是对于 `Element` 是从上往下更新的。\r\n\r\n更新结束后，`_dirtyElements` 会被清空，各个标志位也会被重置\r\n\r\n到这里，`StatefulElement` 的刷新流程我们已经了解到了，接下来我们了解一下它的销毁流程，同时顺便也可以知道 `Element` 的销毁流程\r\n\r\n## StatefulElement的销毁流程\r\n\r\n其实在 `drawFrame()` 的 `buildScope(...)` 方法后紧跟着的 `buildOwner.finalizeTree()` 就是用于进行 `Element` 的销毁的\r\n\r\n不过这里不将它作为入口，记得我们之前 `Element` 的 `updateChild(...)` 方法里面，有两处会对 `Element` 进行销毁，而调用销毁的方法就是 `deactivateChild(child)` \r\n\r\n下面就从这里作为入口\r\n\r\n### Element -> deactivateChild(child)\r\n\r\n\r\n```\r\n  @protected\r\n  void deactivateChild(Element child) {\r\n    ...\r\n    child._parent = null;\r\n    child.detachRenderObject();\r\n    owner._inactiveElements.add(child);\r\n    ...\r\n  }\r\n```\r\n在这里会清除掉 `child` 对于 `parent` 的引用，同时也调用 `detachRenderObject()` 去销毁 `RenderObject`，关于它的细节下一片蘸再说。\r\n\r\n最主要的还是向 `BuildOwner` 的 `_inactiveElements` 中添加了当前要销毁的 `child`\r\n\r\n我们可以先了解一下 `_inactiveElements`\r\n\r\n### _InactiveElements\r\n\r\n\r\n```\r\nclass _InactiveElements {\r\n  bool _locked = false;\r\n  final Set<Element> _elements = HashSet<Element>();\r\n  \r\n  static void _deactivateRecursively(Element element) {\r\n    ...\r\n    element.deactivate();\r\n    ...\r\n    element.visitChildren(_deactivateRecursively);\r\n    ...\r\n  }\r\n  \r\n  void add(Element element) {\r\n    ...\r\n    if (element._active)\r\n      _deactivateRecursively(element);\r\n    _elements.add(element);\r\n  }\r\n}\r\n```\r\n可以看到，`_InactiveElements ` 中使用 `Set` 存放了所有需要销毁的对象\r\n\r\n在 `add(element)` 方法中，如果当前要销毁的对象还处于活跃状态，则通过递归的方式，遍历它的 `children` ，对每个 `child Element` 调用 `deactivate()` 来设为销毁状态，可以看一下 `deactivate()` 方法\r\n\r\n```\r\n  ///Element\r\n  @mustCallSuper\r\n  void deactivate() {\r\n    ...\r\n    _inheritedWidgets = null;\r\n    _active = false;\r\n    ...\r\n      _debugLifecycleState = _ElementLifecycle.inactive;\r\n    ...\r\n  }\r\n```\r\n将要被销毁的 `Element` 生命周期会变为 `inactive`\r\n\r\n这里我们收集完要销毁的 `Element` 之后呢，就会在`WidgetsBinding` 的 `drawFrame()` 被触发时调用 `finalizeTree()` 来进行真正的销毁了\r\n\r\n### BuildOwner -> finalizeTree()\r\n\r\n\r\n```\r\n  void finalizeTree() {\r\n    ...\r\n      lockState(() {\r\n        _inactiveElements._unmountAll(); // this unregisters the GlobalKeys\r\n      });\r\n    ...\r\n  }\r\n```\r\n这里调用了 `_InactiveElements` 的 `_unmountAll()` 来进行销毁\r\n\r\n### _InactiveElements -> _unmountAll()\r\n\r\n\r\n```\r\n  void _unmountAll() {\r\n    _locked = true;\r\n    final List<Element> elements = _elements.toList()..sort(Element._sort);\r\n    _elements.clear();\r\n    try {\r\n      elements.reversed.forEach(_unmount);\r\n    } finally {\r\n      assert(_elements.isEmpty);\r\n      _locked = false;\r\n    }\r\n  }\r\n```\r\n这里的销毁也是由上到下的，调用了 `_unmount(element)` 方法\r\n\r\n```\r\n  void _unmount(Element element) {\r\n    ...\r\n    element.visitChildren((Element child) {\r\n      assert(child._parent == element);\r\n      _unmount(child);\r\n    });\r\n    element.unmount();\r\n    ...\r\n  }\r\n```\r\n> 不得不说，dart 将方法作为参数传递，并且在某些情况下可以省略输入方法的参数真是好用，不过可能就牺牲了一点可读性\r\n\r\n`_unmount(element)` 也是遍历 children ，然后调用 `child Element` 的 `unmount()` 来进行销毁\r\n\r\n在 `_InactiveElements` 中还有一个 `remove` 方法，介绍 `unmount()` 前我们先把这个给看了\r\n\r\n### _InactiveElements -> remove()\r\n\r\n```\r\n  void remove(Element element) {\r\n    ...\r\n    _elements.remove(element);\r\n    ...\r\n  }\r\n```\r\n这里就是从 `Set` 中移除传入的 `Element` 对象，在之前的 `_unmountAll()` 中会通过 `clear()` 清楚 `Set` 内所有的元素，那为什么这里会有这样一种情况呢？之前我们在 `Element` 的 `inflateWidget(...)` 中提到过，`GlobalKey` 是可以用于复用 `Element` 的，被复用的 `Element` 对象无需重新创建。我们再来看一下\r\n\r\n#### Element -> _retakeInactiveElement(...)\r\n\r\n\r\n```\r\n  @protected\r\n  Element inflateWidget(Widget newWidget, dynamic newSlot) {\r\n    ...\r\n    final Key key = newWidget.key;\r\n    if (key is GlobalKey) {\r\n      final Element newChild = _retakeInactiveElement(key, newWidget);\r\n      if (newChild != null) {\r\n        ...\r\n        newChild._activateWithParent(this, newSlot);\r\n        final Element updatedChild = updateChild(newChild, newWidget, newSlot);\r\n        assert(newChild == updatedChild);\r\n        return updatedChild;\r\n      }\r\n    }\r\n    ...\r\n  }\r\n\r\n  Element _retakeInactiveElement(GlobalKey key, Widget newWidget) {\r\n    ...\r\n    final Element element = key._currentElement;\r\n    if (element == null)\r\n      return null;\r\n    if (!Widget.canUpdate(element.widget, newWidget))\r\n      return null;\r\n    ...\r\n    final Element parent = element._parent;\r\n    if (parent != null) {\r\n      ...\r\n      parent.forgetChild(element);\r\n      parent.deactivateChild(element);\r\n    }\r\n    ...\r\n    owner._inactiveElements.remove(element);\r\n    return element;\r\n  }\r\n```\r\n可以看到，在 `_retakeInactiveElement(...)` 末尾处，会将被复用了的 `Element` 从 `_inactiveElements` 中移除掉。获取到这个 `Element` 后，会调用 `_activateWithParent(...)` 方法再次将 `Element` 激活\r\n\r\n#### Element -> _activateWithParent(...)\r\n\r\n\r\n```\r\n  void _activateWithParent(Element parent, dynamic newSlot) {\r\n    ...\r\n    _parent = parent;\r\n    ...\r\n    _updateDepth(_parent.depth);\r\n    _activateRecursively(this);\r\n    attachRenderObject(newSlot);\r\n    ...\r\n  }\r\n  \r\n  static void _activateRecursively(Element element) {\r\n    ...\r\n    element.activate();\r\n    ...\r\n    element.visitChildren(_activateRecursively);\r\n  }\r\n```\r\n这里会通过递归调用，激活 `Element` 和它的 `children` ，来看一下 `active()` 方法\r\n\r\n#### Element -> activate()\r\n\r\n\r\n```\r\n  @mustCallSuper\r\n  void activate() {\r\n    ...\r\n    final bool hadDependencies = (_dependencies != null && _dependencies.isNotEmpty) || _hadUnsatisfiedDependencies;\r\n    _active = true;\r\n    ...\r\n    _dependencies?.clear();\r\n    _hadUnsatisfiedDependencies = false;\r\n    _updateInheritance();\r\n    ...\r\n      _debugLifecycleState = _ElementLifecycle.active;\r\n    ...\r\n    if (_dirty)\r\n      owner.scheduleBuildFor(this);\r\n    if (hadDependencies)\r\n      didChangeDependencies();\r\n  }\r\n  \r\n  \r\n  ///StatefulElement\r\n  @override\r\n  void activate() {\r\n    super.activate();\r\n    ...\r\n    markNeedsBuild();\r\n  }\r\n```\r\n在 `activate()` 中，`Element` 的生命周期再次变为了 `active`, 这也就是我们之前所说过的， `Element` 的四个生命周期中可能会出现 `active` 和 `inactive` 切换的情况。\r\n\r\n那么在哪种情况下会触发这种复用呢？其实很简单：**当处于不同深度的同一类型 `Widget` 使用了同一个 `GlobalKey` 就可以**， 比如下面这样：\r\n\r\n\r\n```\r\nCenter(\r\n          child: changed\r\n              ? Container(\r\n                  child: Text('aaaa', key: globalKey),\r\n                  padding: EdgeInsets.all(20))\r\n              : Text('bbb', key: globalKey),\r\n        )\r\n```\r\n当通过 `setState` 修改 `changed` 时，就可以触发复用\r\n\r\n插曲就说到这里，我们继续之前的 `unmount()` 方法\r\n\r\n### Element -> unmount()\r\n\r\n\r\n```\r\n  @mustCallSuper\r\n  void unmount() {\r\n    ...\r\n    final Key key = widget.key;\r\n    if (key is GlobalKey) {\r\n      key._unregister(this);\r\n    }\r\n    assert(() {\r\n      _debugLifecycleState = _ElementLifecycle.defunct;\r\n      return true;\r\n    }());\r\n  }\r\n```\r\n\r\n可以看到，`unmount()` 中，如果当前 `Element` 注册了 `Globalkey` 就会被清空掉，同时生命周期会被设置为 `defunct`，在 `StatefulElement` 中会重写这个方法\r\n\r\n### StatefulElement -> unmount()\r\n\r\n\r\n```\r\n  @override\r\n  void unmount() {\r\n    super.unmount();\r\n    _state.dispose();\r\n    ...\r\n    _state._element = null;\r\n    _state = null;\r\n  }\r\n```\r\n在这里调用了 `State` 的 `dispose()` 方法，并且在之后清理了 `State` 中持有的 `Element` 引用，最后将 `State` 置空\r\n\r\n到了这里，`StatefulElement` 的销毁流程也结束了，本篇文章也接近尾声\r\n\r\n当然，还有 `RenderObjectElement` 都还没有做过分析，因为所有和 `RenderObject` 有关的内容都将放到第三篇来讲，这里就先跳过吧\r\n\r\n\r\n\r\n# 总结\r\n\r\n- `Element` 是真正的数据持有者，而 `State` 也是在它的构造函数里被创建，它的生命周期比 `State` 略长。\r\n- 每次刷新时，`Widget` 都会被重新创建，而在 `Element` 的创建流程结束后， `Element` 只有在 `canUpdate(...)` 返回 **false** 时才会重新创建，不然一般都是调用它的 `update(...)` 进行更新。`StatelessElement` 也是这样的。\r\n- `GlobalKey` 除了可以跨 `Widget` 传递数据外，还可以对 `Element` 进行复用\r\n\r\n剩下的总结，就看图片吧\r\n\r\n> 注:以上源码分析基于flutter stable 1.13.6  \r\n新的版本可能存在代码不一致的地方，比如updateChild(...)，但是逻辑都是一样的，可以放心食用\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/flutter/2.element/element.png)\r\n\r\n\r\n\r\n\r\n\r\n","5bb7aebf":"---\r\ntitle: 从源码看flutter（五）：GestureDetector篇\r\ndate: 2020-04-23 10:43:35\r\nindex_img: /img/flutter_05.png\r\ntags: Flutter系列\r\n---\r\n# 开篇\r\n\r\nflutter的触摸事件涉及到的东西比较多，本篇文章将会从  `GestureDetector` 作为切入点，来对触摸事件的实现做一个全面的了解\r\n\r\n# GestureDetector\r\n\r\n```\r\nclass GestureDetector extends StatelessWidget {\r\n  ...\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final Map<Type, GestureRecognizerFactory> gestures = <Type, GestureRecognizerFactory>{};\r\n    ...\r\n    return RawGestureDetector(\r\n      gestures: gestures,\r\n      behavior: behavior,\r\n      excludeFromSemantics: excludeFromSemantics,\r\n      child: child,\r\n    );\r\n  }\r\n}\r\n```\r\n这里，会将所有在 `GestureDetector` 设置的各种点击事件，放在各个 `GestureRecognizer` 中，然后通过 `GestureRecognizerFactory` 对其进行封装，存入 `gestures` 中，这里 `GestureRecognizerFactory` 的实现还是蛮有意思的，感兴趣的小伙伴可以去看一下它的源码\r\n\r\n这里，我们先简单了解一下 `GestureRecognizer`\r\n\r\n## GestureRecognizer\r\n\r\n\r\n```\r\nabstract class GestureRecognizer extends GestureArenaMember with DiagnosticableTreeMixin {\r\n  ...\r\n  void addPointer(PointerDownEvent event) { \r\n    ...\r\n    if (isPointerAllowed(event)) {\r\n      addAllowedPointer(event);\r\n    } else {\r\n      handleNonAllowedPointer(event);\r\n    }\r\n  }\r\n  \r\n  @protected\r\n  void addAllowedPointer(PointerDownEvent event) { }\r\n  ...\r\n}\r\n```\r\n`GestureRecognizer` 主要提供了`addPointer(downEvent)` 用于接收 `PointerDownEvent` 对象，它会调用 `addAllowedPointer(event)` 方法，由子类去具体实现\r\n\r\n`GestureRecognizer` 继承于 `GestureArenaMember`，它只提供了两个方法\r\n\r\n```\r\nabstract class GestureArenaMember {\r\n  void acceptGesture(int pointer);\r\n\r\n  void rejectGesture(int pointer);\r\n}\r\n```\r\n分别表示手势竞技场成员获胜与失败时会调用的方法，接下来我们来看一下 `RawGestureDetector`\r\n\r\n# RawGestureDetector\r\n\r\n```\r\nclass RawGestureDetector extends StatefulWidget {\r\n    ...\r\n}\r\n\r\nclass RawGestureDetectorState extends State<RawGestureDetector> {\r\n  ...\r\n  void _handlePointerDown(PointerDownEvent event) {\r\n    assert(_recognizers != null);\r\n    for (final GestureRecognizer recognizer in _recognizers.values)\r\n      recognizer.addPointer(event);\r\n  }\r\n  。。。\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget result = Listener(\r\n      onPointerDown: _handlePointerDown,\r\n      behavior: widget.behavior ?? _defaultBehavior,\r\n      child: widget.child,\r\n    );\r\n    if (!widget.excludeFromSemantics)\r\n      result = _GestureSemantics(...);\r\n    return result;\r\n  }\r\n  ...\r\n}\r\n```\r\n`RawGestureDetector` 是一个 `StatefulWidget` ，它默认返回的是 `Listener` 对象。其中还有一个 `_GestureSemantics` 它用于实现一些具有语义化的手势，比如长按展示 `tooltip`等，这里我们不用关注它。\r\n\r\n这里将之前通过 `GestureDetector` 传入的 `gestures` 转换成了 `_recognizers`，并且将他们放在了 `_handlePointerDown(event)` 方法里通过 `onPointerDown` 传给了 `Listener` 对象\r\n\r\n这里还需要注意， `_handlePointerDown(event)` 中对 `GestureRecognizer` 对象进行了遍历，并调用了他们的 `addPointer(event)` 方法\r\n\r\n接下来我们看一下 `Listener` \r\n\r\n# Listener\r\n\r\n\r\n```\r\nclass Listener extends StatelessWidget {\r\n  ...\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Widget result = _child;\r\n    if (onPointerEnter != null ||\r\n        onPointerExit != null ||\r\n        onPointerHover != null) {\r\n      result = MouseRegion(...);\r\n    }\r\n    result = _PointerListener(\r\n      onPointerDown: onPointerDown,\r\n      onPointerUp: onPointerUp,\r\n      onPointerMove: onPointerMove,\r\n      onPointerCancel: onPointerCancel,\r\n      onPointerSignal: onPointerSignal,\r\n      behavior: behavior,\r\n      child: result,\r\n    );\r\n    return result;\r\n  }\r\n}\r\n```\r\n`Listener` 是一个 `StatelessWidget` ，当传入的部分事件不为 **null** 时，比如悬停事件 `onPointerHover`，返回的就是 `MouseRegion`，它用来处理鼠标的输入，默认返回 `_PointerListener`，这里我们只需要关注这个对象\r\n\r\n从前面我们可以知道，我们只对 `Listener` 传入了 `onPointerDown` ，所以这里传递给 `_PointerListener` 的其他手势回调都是 `null`\r\n\r\n# _PointerListener\r\n\r\n```\r\nclass _PointerListener extends SingleChildRenderObjectWidget {\r\n  ...\r\n  @override\r\n  RenderPointerListener createRenderObject(BuildContext context) {\r\n    return RenderPointerListener(\r\n      onPointerDown: onPointerDown,\r\n      ...\r\n    );\r\n  }\r\n  ...\r\n}\r\n```\r\n`_PointerListener` 是一个 `SingleChildRenderObjectWidget` ，它对应的 `RenderObject` 是 `RenderPointerListener` ，我们来看一下这个对象\r\n\r\n# RenderPointerListener\r\n\r\n\r\n```\r\nclass RenderPointerListener extends RenderProxyBoxWithHitTestBehavior {\r\n  ...\r\n  @override\r\n  void handleEvent(PointerEvent event, HitTestEntry entry) {\r\n    ...\r\n    if (onPointerDown != null && event is PointerDownEvent)\r\n      return onPointerDown(event);\r\n    ...\r\n  }\r\n}\r\n```\r\n之前我们分析 `RenderObject` 时就知道， `RenderObject` 对象有一个 `HitTestTarget` 接口\r\n\r\n\r\n```\r\nabstract class RenderObject extends AbstractNode with DiagnosticableTreeMixin implements HitTestTarget { ... }\r\n\r\nabstract class HitTestTarget {\r\n  factory HitTestTarget._() => null;\r\n\r\n  void handleEvent(PointerEvent event, HitTestEntry entry);\r\n}\r\n```\r\n这个接口提供了 `handleEvent(...)` 方法供 `RenderObject` 实现去处理各种手势事件，最终基本上都是交给子类去实现这个方法。这里的 `RenderPointerListener` 就是如此\r\n\r\n这里对于 `GestureDetector` 的整体结构有了一个初步的了解，并且无法再往下深入了，接下来我们将从另外一个切入点来看手势事件。那就是手势分发的起点\r\n\r\n\r\n# 手势分发流程\r\n\r\n起点其实不难找，之前我们就知道过了，`runApp(...)` 方法作为flutter的入口，会对 `WidgetsFlutterBinding` 进行初始化，`WidgetsFlutterBinding` 混入了多个 `Binding` 对象，其中就有专门处理手势的 `GestureBinding`，我们看一下就知道了\r\n\r\n## 手势分发起点: GestureBinding\r\n\r\n在 `GestureBinding` 的 `initInstances()` 中可以看到如下内容\r\n\r\n\r\n```\r\nmixin GestureBinding on BindingBase implements HitTestable, HitTestDispatcher, HitTestTarget {\r\n  @override\r\n  void initInstances() {\r\n    super.initInstances();\r\n    _instance = this;\r\n    window.onPointerDataPacket = _handlePointerDataPacket;\r\n  }\r\n  ...\r\n}\r\n```\r\n这里的 `_handlePointerDataPacket` 就是触摸事件的起点，它会处理设备输入的信息，将其转换为flutter中的手势事件\r\n\r\n### _handlePointerDataPacket(...)\r\n\r\n\r\n```\r\n  final Queue<PointerEvent> _pendingPointerEvents = Queue<PointerEvent>();\r\n  \r\n  void _handlePointerDataPacket(ui.PointerDataPacket packet) {\r\n    _pendingPointerEvents.addAll(PointerEventConverter.expand(packet.data, window.devicePixelRatio));\r\n    if (!locked)\r\n      _flushPointerEventQueue();\r\n  }\r\n```\r\n手势事件都被存放在了一个队列中，之后会调用 `_flushPointerEventQueue()` 来进行手势分发\r\n\r\n### _flushPointerEventQueue(...)\r\n\r\n```\r\n  void _flushPointerEventQueue() {\r\n    assert(!locked);\r\n    while (_pendingPointerEvents.isNotEmpty)\r\n      _handlePointerEvent(_pendingPointerEvents.removeFirst());\r\n  }\r\n```\r\n这里通过遍历队列，调用 `_handlePointerEvent(event)` 对各个event进行处理\r\n\r\n### _handlePointerEvent(event)\r\n\r\n```\r\n  void _handlePointerEvent(PointerEvent event) {\r\n    ...\r\n    HitTestResult hitTestResult;\r\n    if (event is PointerDownEvent || event is PointerSignalEvent) {\r\n      ...\r\n    } else if (event is PointerUpEvent || event is PointerCancelEvent) {\r\n      ...\r\n    } else if (event.down) {\r\n      ...\r\n    }\r\n    ...\r\n    if (hitTestResult != null ||\r\n        event is PointerHoverEvent ||\r\n        event is PointerAddedEvent ||\r\n        event is PointerRemovedEvent) {\r\n      dispatchEvent(event, hitTestResult);\r\n    }\r\n  }\r\n```\r\n当你在在屏幕上点击一下，触发的事件流程如下:\r\n\r\n> PointerHoverEvent -> PointerDownEvent -> PointerUpEvent\r\n\r\n在屏幕上滑动时，流程如下\r\n\r\n> PointerHoverEvent -> PointerDownEvent -> ...PointerMoveEvent... -> PointerUpEvent\r\n\r\n`PointerHoverEvent` 主要用于 flutter_web 中的鼠标悬停事件，这里我们不关注它，我们可以看一下，当触发 `PointerDownEvent` 时，做了些什么\r\n\r\n\r\n```\r\n  final Map<int, HitTestResult> _hitTests = <int, HitTestResult>{};\r\n  ...\r\n    if (event is PointerDownEvent || event is PointerSignalEvent) {\r\n      assert(!_hitTests.containsKey(event.pointer));\r\n      hitTestResult = HitTestResult();\r\n      hitTest(hitTestResult, event.position);\r\n      if (event is PointerDownEvent) {\r\n        _hitTests[event.pointer] = hitTestResult;\r\n      }\r\n      ...\r\n    }\r\n  ...\r\n  @override // from HitTestable\r\n  void hitTest(HitTestResult result, Offset position) {\r\n    result.add(HitTestEntry(this));\r\n  }\r\n```\r\n这里的 `hitTest(...)` 由接口 `HitTestable` 提供，值得注意的是 `GestureBinding` 与 `RendererBinding` 都实现了这个接口，可以看一下在 `RendererBinding` 中的实现\r\n\r\n```\r\n  ///RendererBinding\r\n  @override\r\n  void hitTest(HitTestResult result, Offset position) {\r\n    assert(renderView != null);\r\n    renderView.hitTest(result, position: position);\r\n    super.hitTest(result, position);\r\n  }\r\n```\r\n这里调用了 `RenderView` 的 `hitTest(...)` 方法，我们已经知道过了，它是根 `RenderObject` 对象，进入它的 `hitTest(...)` 看一下\r\n\r\n```\r\n  ///RenderView\r\n  bool hitTest(HitTestResult result, { Offset position }) {\r\n    if (child != null)\r\n      child.hitTest(BoxHitTestResult.wrap(result), position: position);\r\n    result.add(HitTestEntry(this));\r\n    return true;\r\n  }\r\n```\r\n这里的 `child` 是 `RenderBox` 对象，在 `RenderBox` 中默认提供了 `hitTest(...)` 这个方法\r\n\r\n```\r\n  ///RenderBox\r\n  bool hitTest(BoxHitTestResult result, { @required Offset position }) {\r\n    ...\r\n    if (_size.contains(position)) {\r\n      if (hitTestChildren(result, position: position) || hitTestSelf(position)) {\r\n        result.add(BoxHitTestEntry(this, position));\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n```\r\n所以看到这里你就能知道，当触发了 `PointerDownEvent ` 事件时，会调用所有 `RenderBox` 的 `hitTest(...)` 方法，将符合条件的对象放入到 `BoxHitTestEntry(...)` 中，再存入 `HitTestResult` 维护的 ` List<HitTestEntry> _path` 里\r\n\r\n`HitTestEntry` 接受的对象是 `HitTestTarget` ，上面我们也提到过了，`RenderObject` 是实现了这个接口的。所以最后这些 `RenderBox` 会被存入 `BoxHitTestEntry` 先放入 `List<HitTestEntry>` 中，其次是存入了 `HitTestEntry` 的 `RenderView` ，最后才是 `GestureBinding` 对象\r\n\r\n至于为什么要把这些对象收集起来放入 `HitTestResult` 呢？后面会逐步说明\r\n\r\n当 `HitTestResult` 被创建后，会被存入`GestureBinding` 维护的 `Map<int, HitTestResult> _hitTests` 中，**key** 是 `event.pointer` ，每触发一次事件，`pointer` 的值都会+1，不会重复\r\n\r\n接下来，会进入 `dispatchEvent(event, hitTestResult)` 方法，进行分发事件\r\n\r\n### dispatchEvent(...)\r\n\r\n\r\n```\r\n  @override // from HitTestDispatcher\r\n  void dispatchEvent(PointerEvent event, HitTestResult hitTestResult) {\r\n    ...\r\n    if (hitTestResult == null) {\r\n      assert(event is PointerHoverEvent || event is PointerAddedEvent || event is PointerRemovedEvent);\r\n      try {\r\n        pointerRouter.route(event);\r\n      } catch (exception, stack) {\r\n        ...\r\n      return;\r\n    }\r\n    for (final HitTestEntry entry in hitTestResult.path) {\r\n      try {\r\n        entry.target.handleEvent(event.transformed(entry.transform), entry);\r\n      }\r\n      ...\r\n    }\r\n  }\r\n```\r\n我们主要关注 `entry.target.handleEvent(...)` 方法，这里对之前在 `hitTest(...)` 中添加的各个实现了 `HitTestTarget` 接口的对象，调用其 `handleEvent(...)` 方法。而 `hitTestResult.path` 的顺序我们已经说过了，大致是下面这样：\r\n\r\n> ... -> RenderPointerListener -> ... -> RenderView -> GestureBinding\r\n\r\n这里会依次调用他们实现的 `handleEvent(...)` 。而事件的分发，就是通过这样实现的！\r\n\r\n## 开始手势分发\r\n\r\n我们再次进入 `RenderPointerListener` 的 `handleEvent(...)` 方法\r\n\r\n### RenderPointerListener \r\n\r\n\r\n```\r\n  @override\r\n  void handleEvent(PointerEvent event, HitTestEntry entry) {\r\n    ...\r\n    if (onPointerDown != null && event is PointerDownEvent)\r\n      return onPointerDown(event);\r\n    ...\r\n  }\r\n```\r\n这里会调用 `onPointerDown(event)` ，通过前面的的了解，我们知道这个方法就是 `RawGestureDetectorState ` 传入的 `_handlePointerDown(...)`，再来看一遍\r\n\r\n\r\n```\r\n  void _handlePointerDown(PointerDownEvent event) {\r\n    for (final GestureRecognizer recognizer in _recognizers.values)\r\n      recognizer.addPointer(event);\r\n  }\r\n```\r\n`addPointer(event)` 的内容之前也说过了，最终都是调用 `GestureRecognizer` 提供的 `addAllowedPointer(...)` 方法。如果我们在 `GestureDetector` 中设置了 `onTapDown()` 或者其他点击事件，这里就会调用 `TapGestureRecognizer` 的 `addPointer(...)` 方法。我们就先以它为例，来看一下都做了些什么\r\n\r\n#### TapGestureRecognizer\r\n\r\n我们先简单的看一下 `TapGestureRecognizer` 的继承结构\r\n\r\n> TapGestureRecognizer -> BaseTapGestureRecognizer -> PrimaryPointerGestureRecognizer -> OneSequenceGestureRecognizer -> GestureRecognizer\r\n\r\n这些类中，只有 `GestureRecognizer` 实现了 `addPointer(...)` 方法，只有 `BaseTapGestureRecognizer` 和 `PrimaryPointerGestureRecognizer` 实现了 `addAllowedPointer(...)` 方法\r\n\r\n可以先来看一下 `BaseTapGestureRecognizer` 的 `addAllowedPointer(...)` \r\n\r\n#### BaseTapGestureRecognizer\r\n\r\n\r\n```\r\n  PointerDownEvent _down;\r\n  ...\r\n  @override\r\n  void addAllowedPointer(PointerDownEvent event) {\r\n    assert(event != null);\r\n    if (state == GestureRecognizerState.ready) {\r\n      _down = event;\r\n    }\r\n    if (_down != null) {\r\n      super.addAllowedPointer(event);\r\n    }\r\n  }\r\n```\r\n这里只是做了一个简单的赋值，保存传递的 `PointerDownEvent` ，它会在 `_reset()` 中被置空\r\n\r\n接下来，进入 `PrimaryPointerGestureRecognizer` 的 `addAllowedPointer(...)` \r\n\r\n#### PrimaryPointerGestureRecognizer\r\n\r\n\r\n```\r\n  @override\r\n  void addAllowedPointer(PointerDownEvent event) {\r\n    startTrackingPointer(event.pointer, event.transform);\r\n    if (state == GestureRecognizerState.ready) {\r\n      state = GestureRecognizerState.possible;\r\n      primaryPointer = event.pointer;\r\n      initialPosition = OffsetPair(local: event.localPosition, global: event.position);\r\n      if (deadline != null)\r\n        _timer = Timer(deadline, () => didExceedDeadlineWithEvent(event));\r\n    }\r\n  }\r\n```\r\n这里主要关注 `startTrackingPointer(...)` 方法，它在 `OneSequenceGestureRecognizer ` 中实现\r\n\r\n#### OneSequenceGestureRecognizer \r\n\r\n\r\n```\r\n  @protected\r\n  void startTrackingPointer(int pointer, [Matrix4 transform]) {\r\n    GestureBinding.instance.pointerRouter.addRoute(pointer, handleEvent, transform);\r\n    _trackedPointers.add(pointer);\r\n    assert(!_entries.containsValue(pointer));\r\n    _entries[pointer] = _addPointerToArena(pointer);\r\n  }\r\n```\r\n上面有两个比较关键的地方，先看第一个 `addRoute(...)`\r\n\r\n\r\n```\r\n  ///PointerRouter\r\n  final Map<int, Map<PointerRoute, Matrix4>> _routeMap = <int, Map<PointerRoute, Matrix4>>{};\r\n  ...\r\n  void addRoute(int pointer, PointerRoute route, [Matrix4 transform]) {\r\n    final Map<PointerRoute, Matrix4> routes = _routeMap.putIfAbsent(\r\n      pointer,\r\n      () => <PointerRoute, Matrix4>{},\r\n    );\r\n    assert(!routes.containsKey(route));\r\n    routes[route] = transform;\r\n  }\r\n```\r\n在这里把 `handleEvent(...)` 方法作为 `PointerRoute` 传入到了 `PointerRouter` 中，它的作用，我们后面就知道了。接下来看另一个非常关键的地方：`_entries[pointer] = _addPointerToArena(pointer)`\r\n\r\n\r\n```\r\n  GestureArenaTeam _team;\r\n  ...\r\n  GestureArenaEntry _addPointerToArena(int pointer) {\r\n    ...\r\n    return GestureBinding.instance.gestureArena.add(pointer, this);\r\n  }\r\n```\r\n可以看到，这里将当前的 `OneSequenceGestureRecognizer` 作为 `GestureArenaMember` 对象，传入了 `GestureBinding` 中维护的 `GestureArenaManager` 内。也就是将需要竞技的手势成员，放入了手势竞技场内。\r\n\r\n那么到这里，`RenderPointerListener` 的 `handleEvent(...)` 就执行完毕了，接下来会执行 `RenderView` 的 `handleEvent(...)`，不过由于它并没有重写这个方法，所以我们会直接来到 `GestureBinding` 的 `handleEvent(...)`\r\n\r\n### GestureBinding\r\n\r\n\r\n```\r\n  final PointerRouter pointerRouter = PointerRouter();\r\n  ...\r\n  @override // from HitTestTarget\r\n  void handleEvent(PointerEvent event, HitTestEntry entry) {\r\n    pointerRouter.route(event);\r\n    if (event is PointerDownEvent) {\r\n      gestureArena.close(event.pointer);\r\n    } else if (event is PointerUpEvent) {\r\n      gestureArena.sweep(event.pointer);\r\n    } else if (event is PointerSignalEvent) {\r\n      pointerSignalResolver.resolve(event);\r\n    }\r\n  }\r\n```\r\n这里就要进入这个非常重要的 `route(event)` 方法了\r\n\r\n#### PointerRouter\r\n\r\n\r\n```\r\n  final Map<int, Map<PointerRoute, Matrix4>> _routeMap = <int, Map<PointerRoute, Matrix4>>{};\r\n  final Map<PointerRoute, Matrix4> _globalRoutes = <PointerRoute, Matrix4>{};\r\n\r\n\r\n  void route(PointerEvent event) {\r\n    final Map<PointerRoute, Matrix4> routes = _routeMap[event.pointer];\r\n    final Map<PointerRoute, Matrix4> copiedGlobalRoutes = Map<PointerRoute, Matrix4>.from(_globalRoutes);\r\n    if (routes != null) {\r\n      _dispatchEventToRoutes(\r\n        event,\r\n        routes,\r\n        Map<PointerRoute, Matrix4>.from(routes),\r\n      );\r\n    }\r\n    _dispatchEventToRoutes(event, _globalRoutes, copiedGlobalRoutes);\r\n  }\r\n```\r\n这里有两个 `_dispatchEventToRoutes(...)` 方法，后者执行的是 `_globalRoutes` 中的 `PointerRoute`，而 `_globalRoutes` 中存放的是其他的全局手势，比如用于隐藏 `ToolTips` 的手势等，目前还不太了解它的其他具体作用。\r\n\r\n不过前面的 `routes` 就是我们之前在 `OneSequenceGestureRecognizer` 的 `startTrackingPointer(...)` 中添加的各个 `handleEvent(...)` 方法\r\n\r\n可以看一下 `_dispatchEventToRoutes(...)`\r\n\r\n```\r\n  void _dispatchEventToRoutes(\r\n    PointerEvent event,\r\n    Map<PointerRoute, Matrix4> referenceRoutes,\r\n    Map<PointerRoute, Matrix4> copiedRoutes,\r\n  ) {\r\n    copiedRoutes.forEach((PointerRoute route, Matrix4 transform) {\r\n      if (referenceRoutes.containsKey(route)) {\r\n        _dispatch(event, route, transform);\r\n      }\r\n    });\r\n  }\r\n  ...\r\n  void _dispatch(PointerEvent event, PointerRoute route, Matrix4 transform) {\r\n    try {\r\n      event = event.transformed(transform);\r\n      route(event);\r\n    }\r\n    ...\r\n  }\r\n```\r\n就是遍历然后执行所有的 `PointerRoute` 方法，这里的 `PointerRoute` 就是之前的各个 `OneSequenceGestureRecognizer` 中的 `handleEvent(...)` \r\n\r\n> 这里要注意不要把 `OneSequenceGestureRecognizer` 的 `handleEvent(...)` 和 `RenderPointerListener` 的 `handleEvent(...)` 混淆了\r\n\r\n`OneSequenceGestureRecognizer` 提供了 `handleEvent(...)` ，交由子类去实现，我们接着之前的点击事件，实现它的点击子类是 `PrimaryPointerGestureRecognizer` ；如果是拖拽事件的话，实现的子类就是 `DragGestureRecognizer`\r\n\r\n#### PrimaryPointerGestureRecognizer\r\n\r\n\r\n```\r\n  @override\r\n  void handleEvent(PointerEvent event) {\r\n    assert(state != GestureRecognizerState.ready);\r\n    if (state == GestureRecognizerState.possible && event.pointer == primaryPointer) {\r\n      final bool isPreAcceptSlopPastTolerance = ...;\r\n      final bool isPostAcceptSlopPastTolerance = ...;\r\n\r\n      if (event is PointerMoveEvent && (isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance)) {\r\n        resolve(GestureDisposition.rejected);\r\n        stopTrackingPointer(primaryPointer);\r\n      } else {\r\n        handlePrimaryPointer(event);\r\n      }\r\n    }\r\n    stopTrackingIfPointerNoLongerDown(event);\r\n  }\r\n  \r\n  @protected\r\n  void handlePrimaryPointer(PointerEvent event);\r\n```\r\n当前事件是 `PointerMoveEvent` 时，会做一个判断，如果一定时间内滑动的距离超过 18px 那么就会进入第一个判断中，该手势会被拒绝掉，也就是从竞技场中会被移除，此时会触发 `onTapCancel`\r\n\r\n我们主要关心手势有效时的方法 `handlePrimaryPointer(event)`，可以看到这个方法是交由子类去实现的，实现它的子类自然就是 `BaseTapGestureRecognizer` 了\r\n\r\n#### BaseTapGestureRecognizer\r\n\r\n```\r\n  @override\r\n  void handlePrimaryPointer(PointerEvent event) {\r\n    if (event is PointerUpEvent) {\r\n      _up = event;\r\n      _checkUp();\r\n    } else if (event is PointerCancelEvent) {\r\n      resolve(GestureDisposition.rejected);\r\n      ...\r\n      _reset();\r\n    } else if (event.buttons != _down.buttons) {\r\n      resolve(GestureDisposition.rejected);\r\n      stopTrackingPointer(primaryPointer);\r\n    }\r\n  }\r\n```\r\n可以看到，在这里只对 `PointerUpEvent` 与 `PointerCancelEvent` 进行了处理，并没有处理 `PointerDownEvent` ，这里很自然的就可以知道， `PointerDownEvent` 肯定被放在了 `GestureBinding` 的 `handleEvent(...)` 的后面部分进行处理\r\n\r\n不过我们这里还是可以先看一下 `PointerUpEvent` 是如何处理的，进入 `_checkUp()` 方法\r\n\r\n```\r\n  @protected\r\n  void handleTapUp({ PointerDownEvent down, PointerUpEvent up });\r\n  ...\r\n  void _checkUp() {\r\n    ...\r\n    handleTapUp(down: _down, up: _up);\r\n    _reset();\r\n  }\r\n```\r\n`_checkUp()` 中调用了 `handleTapUp(...)` 方法，它是一个交由子类实现的方法，而 `BaseTapGestureRecognizer` 的子类就是 `TapGestureRecognizer` 了\r\n\r\n#### TapGestureRecognizer\r\n\r\n\r\n```\r\n  @protected\r\n  T invokeCallback<T>(String name, RecognizerCallback<T> callback, { String debugReport() }) {\r\n    ...\r\n      result = callback();\r\n    ...\r\n    return result;\r\n  }\r\n\r\n  @protected\r\n  @override\r\n  void handleTapUp({PointerDownEvent down, PointerUpEvent up}) {\r\n    final TapUpDetails details = TapUpDetails(...);\r\n    switch (down.buttons) {\r\n      case kPrimaryButton:\r\n        if (onTapUp != null)\r\n          invokeCallback<void>('onTapUp', () => onTapUp(details));\r\n        if (onTap != null)\r\n          invokeCallback<void>('onTap', onTap);\r\n        break;\r\n        ...\r\n      default:\r\n    }\r\n  }\r\n```\r\n可以看到，最终通过 `invokeCallback(...)` 方法执行了传入的方法，包括 `onTapUp` 和 `onTap` ，从这里我们就知道了，我们最最常用的点击事件，就是在 `TapGestureRecognizer` 的 `handleTapUp(...)` 中执行的。\r\n\r\n而 `TapGestureRecognizer` 还有 `handleTapDown(...)` 用于执行 `onTapDown` ，它则是通过 `BaseTapGestureRecognizer` 的 `_checkDown()` 调用\r\n\r\n接下来我们可以回到 `GestureBinding ` ，看看 `PointerDownEvent` 到底是如何处理的\r\n\r\n```\r\n  void handleEvent(PointerEvent event, HitTestEntry entry) {\r\n    pointerRouter.route(event);\r\n    if (event is PointerDownEvent) {\r\n      gestureArena.close(event.pointer);\r\n    }\r\n    ...\r\n  }\r\n```\r\n#### GestureArenaManager -> close(...)\r\n\r\n```\r\n  void close(int pointer) {\r\n    final _GestureArena state = _arenas[pointer];\r\n    ...\r\n    state.isOpen = false;\r\n    ...\r\n    _tryToResolveArena(pointer, state);\r\n  }\r\n  \r\n  void _tryToResolveArena(int pointer, _GestureArena state) {\r\n    assert(_arenas[pointer] == state);\r\n    assert(!state.isOpen);\r\n    if (state.members.length == 1) {\r\n      scheduleMicrotask(() => _resolveByDefault(pointer, state));\r\n    } else if (state.members.isEmpty) {\r\n      _arenas.remove(pointer);\r\n      assert(_debugLogDiagnostic(pointer, 'Arena empty.'));\r\n    } else if (state.eagerWinner != null) {\r\n      assert(_debugLogDiagnostic(pointer, 'Eager winner: ${state.eagerWinner}'));\r\n      _resolveInFavorOf(pointer, state, state.eagerWinner);\r\n    }\r\n  }\r\n```\r\n`close(...)` 调用了 `_tryToResolveArena(...)` 方法，在这个方法中，处理了三种情况\r\n\r\n- 如果竞技场成员只有一个\r\n- 如果竞技场没有任何成员\r\n- 如果存在竞技场的获胜者\r\n\r\n如果成员只有一个，那么事件理所应当交给它处理；如果没有成员就不说了；如果存在胜利者，交给胜利者处理也是正常的。显然，`close(...)` 中并没有对竞技场的成员做一个竞争的处理，它只负责没有点击冲突的时候，也就是只有一个点击对象。这种情况最后会通过调用它的 `acceptGesture(...)` 来触发 `onTapDown`\r\n\r\n我们继续看 `close(...)` 后面的方法\r\n\r\n\r\n```\r\n  @override // from HitTestTarget\r\n  void handleEvent(PointerEvent event, HitTestEntry entry) {\r\n    pointerRouter.route(event);\r\n    if (event is PointerDownEvent) {\r\n      gestureArena.close(event.pointer);\r\n    } else if (event is PointerUpEvent) {\r\n      gestureArena.sweep(event.pointer);\r\n    } \r\n    ...\r\n  }\r\n```\r\n\r\n\r\n#### GestureArenaManager -> sweep(...)\r\n\r\n\r\n```\r\n  void sweep(int pointer) {\r\n    ...\r\n    if (state.members.isNotEmpty) {\r\n      ...\r\n      state.members.first.acceptGesture(pointer);\r\n      ...\r\n      for (int i = 1; i < state.members.length; i++)\r\n        state.members[i].rejectGesture(pointer);\r\n    }\r\n  }\r\n```\r\n看看这个方法，多么简单粗暴，直接确定竞技场成员中的第一个为获胜者！根据前面我们说过的 `hintTest(...)` 的添加顺序，可以知道，`RenderBox`数最下层的对象是最先被添加到列表中的\r\n\r\n所以这里的第一个成员，就是最下层的对象，在屏幕的显示中，它就是最里层的元素，所以如果像下面这样，为两个颜色块设置点击事件的话，只有红色的会生效\r\n\r\n<img src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/flutter/5.gesture/001.jpg\" width=400>\r\n\r\n我们可以简单的看一下 `acceptGesture(...)` 做了些什么，这里会进入 `BaseTapGestureRecognizer` 的 `acceptGesture(...)`\r\n\r\n```\r\n  ///BaseTapGestureRecognizer\r\n  @override\r\n  void acceptGesture(int pointer) {\r\n    super.acceptGesture(pointer);\r\n    if (pointer == primaryPointer) {\r\n      _checkDown();\r\n      _wonArenaForPrimaryPointer = true;\r\n      _checkUp();\r\n    }\r\n  }\r\n```\r\n可以看到，这里的 `_checkDown()` 中就处理了 `onTapDown` 事件，后面跟着了一个 `_checkUp()` 用于对 `onTapUp` 和 `onTap` 的处理，如果竞技场成员只有一个，这里的 `_checkUp()` 不会生效\r\n\r\n到这里，关于点击事件的整个流程我们都清楚了，可以分为下面两种情况\r\n\r\n- 竞技场只有一个成员时：在 `GestureArenaManager` 的 `close(...)` 中完成 `onTapDown` 的调用，此时事件为 `PointDownEvent`; 在 `PointerRouter` 的 `route(...)` 方法完成对 `onTapUp` 和 `onTap` 的调用，此时事件为 `PointUpEvent`\r\n- 竞技场有多个成员时：在 `GestureArenaManager` 的 `sweep(...)` 方法先完成对 `onTapDown` 的调用，后完成对 `onTapUp` 与 `onTap` 的调用，此时事件为 `PointUpEvent`\r\n\r\n\r\n接下来可能你会产生疑问了，如果上面两个颜色块监听的是相同的滑动事件，在竞技场中他们又是如何处理的呢？\r\n\r\n下面就来简单的看一下，以 `PanGestureRecognizer` 为例\r\n\r\n### PanGestureRecognizer\r\n\r\n简单的看一下它的结构\r\n\r\n> PanGestureRecognizer -> DragGestureRecognizer -> OneSequenceGestureRecognizer -> GestureRecognizer\r\n\r\n基本上和拖拽相关的核心逻辑都在 `DragGestureRecognizer` 中了\r\n\r\n从之前我们的流程就知道，会先走 `addAllowedPointer(...)` 方法，之后通过在 `GestureBinding` 的 `handleEvent(...)` 中执行 `PointerRouter` 的 `route(...)` 来走 `GestureRecognizer` 的  `handleEvent(...)` 方法\r\n\r\n所以我们先看 `DragGestureRecognizer` 的 `addAllowedPointer(...)`\r\n\r\n```\r\n  @override\r\n  void addAllowedPointer(PointerEvent event) {\r\n    startTrackingPointer(event.pointer, event.transform);\r\n    _velocityTrackers[event.pointer] = VelocityTracker();\r\n    if (_state == _DragState.ready) {\r\n      _state = _DragState.possible;\r\n      ...\r\n      _checkDown();\r\n    } else if (_state == _DragState.accepted) {\r\n      resolve(GestureDisposition.accepted);\r\n    }\r\n  }\r\n```\r\n还是会先在 `startTrackingPointer(...)` 将 `handleEvent(...)` 加入 `PointerRouter` ，然后把当前对象加入竞技场。\r\n\r\n接着通过 `_checkDown()` 执行了 `onDown` 方法，对于 `DragGestureRecognizer` 它就是 `onPanDown`\r\n\r\n以上是收到 `onPointDownEvent` 时的事件，因为是拖拽，接下来会收到 `onPointMoveEvent` 事件\r\n\r\n再看它的 `handleEvent(...)`\r\n\r\n```\r\n  @override\r\n  void handleEvent(PointerEvent event) {\r\n    ...\r\n\r\n    if (event is PointerMoveEvent) {\r\n      ...\r\n      if (_state == _DragState.accepted) {\r\n        ...\r\n      } else {\r\n        ...\r\n        if (_hasSufficientGlobalDistanceToAccept)\r\n          resolve(GestureDisposition.accepted);\r\n      }\r\n    }\r\n    ...\r\n  }\r\n```\r\n其中 `_hasSufficientGlobalDistanceToAccept` 是交由子类去实现的方法，用于判断滑动距离是否有效，默认大于36个像素就有效；如果有效，就会进入 `resolve(...)` 方法，它最终会调用到 `GestureArenaManager` 的 `_resolveInFavorOf(...)` \r\n\r\n而这个方法，对于传入的 `GestureArenaMember` 对象，直接判定其为胜出者，并将其他竞技场成员清除掉。而这里传入的对象和我们之前再点击事件中的一样，都是树结构中最下层的对象，也就是屏幕上最里层的元素\r\n\r\n所以这里的滑动事件在竞技场中的处理就是这样了。而我们本篇的内容也即将结束\r\n\r\n\r\n# 总结\r\n\r\n手势的分发流程大致如下：\r\n\r\n- **触发手势**: flutter接受到由底层传来的触摸事件通知，它会触发 `GestureBinding` 的 `_handlePointerDataPacket(...)` 方法，flutter再这个方法中对传来的数据进行转换，变成flutter中适用的格式\r\n- **HitTestTarget对象收集**: 通过 `hitTest(...)` 方法，将 `RenderObject`树中符合条件的 `RenderBox` 对象添加到 `HitTestResult` 中，添加顺序是由底至上的，最上层的两个对象分别是 `GestureBinding` 与 `RenderView` ，这些对象都实现了 `HitTestTarget` 接口，也就是说他们都具备 `handlerEvent(...)` 方法\r\n- **事件分发**: 在 `dispatchEvent(...)` 中，通过遍历之前添加的对象，调用他们的 `handlerEvent(...)` 方法来进行事件的分发\r\n- **GestureRecognizer对象收集**: 我们的 `GestureDetector` 对应的 `RenderPointerListener` 会进行事件处理，在收到 `PointDownEvent` 事件时，会将所有 `GestureDetector` 中注册的 `GestureRecognizer` 对象的 `handlerEvent` 方法作为 `PointerRoute` 传入 `PointerRouter` ，并将该对象放入 `GestureArenaManager` 维护的竞技场\r\n- **事件处理**: 执行到最外层，也就是 `GestureBinding` 的 `handleEvent` 中，在这里从竞技场选出最终处理手势的 `GestureRecognizer` 对象，然后进行手势处理\r\n\r\n> ps:以上分析都是基于单点触摸事件，尚未对多点触摸事件进行分析\r\n\r\n最后，说明一下，单点触摸事件的核心并不是所谓的手势竞技场，因为根本就没有一个真正的竞技过程。最终都是直接选择最下层的 `GestureDetector` 作为手势的处理者，单点触摸事件的核心其实是这些竞技场成员被添加到竞技场中的顺序，**是由底至上的顺序**","381901e3":"---\r\ntitle: 从源码看flutter（四）：Layer篇\r\ndate: 2020-04-21 03:46:55\r\nindex_img: /img/flutter_04.png\r\ntags: Flutter系列\r\n---\r\n\r\n# 开篇\r\n\r\n这一篇，我们将简单的了解一下 `Layer` 相关内容，因为其中大部分是与C++交互，所以只是从结构上做一个认识与分析\r\n\r\n从上一篇中，我们了解到了，如果 `RenderObject` 的 `isRepaintBoundary` 为 **true** 会通过自己的 `Layer` 对象去渲染,如果没有为 `RenderObject` 手动指定 `Layer` 的话，默认会是 `OffestLayer`;为 **false** 则通过父节点的 `Layer` 对象渲染。\r\n\r\n其中 **paint** 相关的 `Layer` 逻辑都在 `PaintingContext` 中，每次 **paint** 都会创建一个新的 `PaintingContext` 对象\r\n\r\n同时通过 `PaintingContext` 获取 `Canvans` 时会创建一个 `PictureLayer` 被合成到 `PaintingContext` 的创建时所接收的 `Layer` 中\r\n\r\n下面，我们简单的看一下 `Layer` 对象\r\n\r\n# Layer\r\n\r\n\r\n```\r\nabstract class Layer extends AbstractNode with DiagnosticableTreeMixin {\r\n\r\n  @override\r\n  ContainerLayer get parent => super.parent as ContainerLayer;\r\n  ...\r\n  Layer get nextSibling => _nextSibling;\r\n  ...\r\n  Layer get previousSibling => _previousSibling;\r\n  ...\r\n  @protected\r\n  void addToScene(ui.SceneBuilder builder, [ Offset layerOffset = Offset.zero ]);\r\n  ...\r\n}\r\n```\r\n`Layer` 和 `RenderObject` 一样，都是 `AbstractNode` 的子类，可以看到持有的 `parent` 对象都是 `ContainerLayer`，同时 `Layer` 还有两个对象 `nextSibling` 和 `previousSibling`，看起来像一个双向链表的结构\r\n\r\n`addToScene(...)` 交由子类实现，就是将 `Layer` 对象交给 **engine** 去处理，传递给 **engine** 的逻辑都在 `SceneBuilder` 中\r\n\r\n`Layer` 有多个子类，分别实现不同的渲染功能\r\n\r\n![](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/flutter/4.layer/001.png)\r\n\r\n其中 `PictureLayout` 是主要的图像绘制层；\r\n`TextureLayer` 则用于外界纹理的实现，通过它可以实现诸如相机、视频播放、OpenGL等相关操作；\r\n`ContainerLayout` 则是各个 `Layer` 组成的复合层\r\n\r\n# Layer的刷新\r\n\r\n上一篇中，我们自定义了 `RenderObject` 并且重写了它的 `paint(...)` 方法，通过对 `Canvans` 对象进行操作，我们绘制了自己想要的图像，而  `Canvans` 是从 `PaintingContext` 中获取的，在获取 `Canvans` 时，其实做了和 `Layer` 有关的一系列操作\r\n\r\n\r\n```\r\nclass PaintingContext extends ClipContext {\r\n  ...\r\n  @override\r\n  Canvas get canvas {\r\n    if (_canvas == null)\r\n      _startRecording();\r\n    return _canvas;\r\n  }\r\n\r\n  void _startRecording() {\r\n    assert(!_isRecording);\r\n    _currentLayer = PictureLayer(estimatedBounds);\r\n    _recorder = ui.PictureRecorder();\r\n    _canvas = Canvas(_recorder);\r\n    _containerLayer.append(_currentLayer);\r\n  }\r\n  ...\r\n}\r\n```\r\n可以看到，在这里创建了一个新的 `PictureLayer` 被添加到了 `_containerLayer` 中，我们的 `Layer` 最终是如何被渲染的呢？\r\n\r\n信息还是可以从上一篇获得，我们知道 `RendererBinding` 的 `drawFrame()` 中进行了布局与绘制操作\r\n\r\n\r\n```\r\n  @protected\r\n  void drawFrame() {\r\n    assert(renderView != null);\r\n    pipelineOwner.flushLayout();\r\n    pipelineOwner.flushCompositingBits();\r\n    pipelineOwner.flushPaint();\r\n    if (sendFramesToEngine) {\r\n      renderView.compositeFrame(); // this sends the bits to the GPU\r\n      pipelineOwner.flushSemantics(); // this also sends the semantics to the OS.\r\n      _firstFrameSent = true;\r\n    }\r\n  }\r\n```\r\n最终的渲染其实是通过 `compositeFrame()` 来进行的，而这里的 `renderView` 就是我们的根`RenderObject` 我们可以看一下 `compositeFrame()` 做了些什么\r\n\r\n\r\n```\r\nclass RenderView extends RenderObject with RenderObjectWithChildMixin<RenderBox> {\r\n  ...\r\n  void compositeFrame() {\r\n    ...\r\n      final ui.SceneBuilder builder = ui.SceneBuilder();\r\n      final ui.Scene scene = layer.buildScene(builder);\r\n      if (automaticSystemUiAdjustment)\r\n        _updateSystemChrome();\r\n      _window.render(scene);\r\n      scene.dispose();\r\n    ...\r\n  }\r\n  ...\r\n}\r\n```\r\n可以看到，这里通过 `buildScene(...)` 创建了 `Scene` 对象，根据注释来看，它相当于一颗 `Layer` 树\r\n\r\n之后通过 `Window` 对象的 `render(...)` 方法来进行渲染\r\n\r\n```\r\n  void render(Scene scene) native 'Window_render';\r\n```\r\n它直接调用的是 **engine** 的方法，通过这个方法，就可以对图像进行渲染，后面我们会进行一个测试来展示它的作用\r\n\r\n这里的 `layer` 就是根 `Layer` ，它其实是一个 `TransformLayer`，我们可以简单看一下它的创建流程\r\n\r\n## 根Layer创建流程\r\n\r\n在 `RendererBinding` 的 `initInstances()` 中通过 `initRenderView()` 进行了 `RenderView` 的创建\r\n\r\n\r\n```\r\nmixin RendererBinding on BindingBase, ServicesBinding, SchedulerBinding, GestureBinding, SemanticsBinding, HitTestable {\r\n  ...\r\n  @override\r\n  void initInstances() {\r\n    super.initInstances();\r\n    ...\r\n    initRenderView();\r\n    ...\r\n  }\r\n  ...\r\n}\r\n\r\n```\r\n\r\n### RendererBinding -> initRenderView()\r\n\r\n\r\n```\r\n  void initRenderView() {\r\n    assert(renderView == null);\r\n    renderView = RenderView(configuration: createViewConfiguration(), window: window);\r\n    renderView.prepareInitialFrame();\r\n  }\r\n```\r\n根 `Layer` 就是在 `prepareInitialFrame()` 中创建的\r\n\r\n### RenderView -> prepareInitialFrame()\r\n\r\n\r\n```\r\n  void prepareInitialFrame() {\r\n    ...\r\n    scheduleInitialLayout();\r\n    scheduleInitialPaint(_updateMatricesAndCreateNewRootLayer());\r\n    ...\r\n  }\r\n```\r\n创建的方法就是 `_updateMatricesAndCreateNewRootLayer()`\r\n\r\n\r\n```\r\n  TransformLayer _updateMatricesAndCreateNewRootLayer() {\r\n    _rootTransform = configuration.toMatrix();\r\n    final TransformLayer rootLayer = TransformLayer(transform: _rootTransform);\r\n    rootLayer.attach(this);\r\n    ...\r\n    return rootLayer;\r\n  }\r\n```\r\n这里我们只是简单的了解一下根 `Layer` 的创建流程，它就是一个 `TransformLayer` 对象。\r\n\r\n创建流程我们知道了，而想要了解刷新流程，我们需要回到 `compositeFrame()` 方法中，执行刷新的方法就在 `buildScene(...)` 里\r\n\r\n## buildScene(...)\r\n\r\n从前面的关系图我们知道，`TransformLayer` 的父类是 `OffsetLayer`，而 `OffsetLayer` 的父类是 `ContainerLayer`，它们都没有重写 `buildScene(...)` 方法，所以最后会调用 `ContainerLayer` 的 `buildScene(...)`\r\n\r\n\r\n```\r\n  ui.Scene buildScene(ui.SceneBuilder builder) {\r\n    ...\r\n    updateSubtreeNeedsAddToScene();\r\n    addToScene(builder);\r\n    ...\r\n    _needsAddToScene = false;\r\n    ...\r\n    return scene;\r\n  }\r\n```\r\n可以先看一下 `updateSubtreeNeedsAddToScene()` 方法\r\n\r\n## updateSubtreeNeedsAddToScene()\r\n\r\n\r\n```\r\n  ///ConstraintLayer\r\n  @override\r\n  void updateSubtreeNeedsAddToScene() {\r\n    super.updateSubtreeNeedsAddToScene();\r\n    Layer child = firstChild;\r\n    while (child != null) {\r\n      child.updateSubtreeNeedsAddToScene();\r\n      _needsAddToScene = _needsAddToScene || child._needsAddToScene;\r\n      child = child.nextSibling;\r\n    }\r\n  }\r\n\r\n  ///Layer\r\n  @protected\r\n  @visibleForTesting\r\n  void updateSubtreeNeedsAddToScene() {\r\n    _needsAddToScene = _needsAddToScene || alwaysNeedsAddToScene;\r\n  }\r\n```\r\n其实所有 `Layer` 类中，只有 `ConstraintLayer` 和 `Layer` 具备这两个方法，这里其实就是遍历所有子 `Layer` 对象，调用他们的 `updateSubtreeNeedsAddToScene()` 来设置 `_needsAddToScene` 的值\r\n\r\n这个值顾名思义，就是表示是否需要将改 `Layer` 添加到 `Scene` 中，如果需要添加，则就是进行刷新了。它根据 `_needsAddToScene` 和 `alwaysNeedsAddToScene` 来设置，当调用 `markNeedsAddToScene()` 方法的时候， `_needsAddToScene` 就会被设置为 **true**\r\n\r\n`updateSubtreeNeedsAddToScene()` 执行结束后，接下来会调用 `addToScene(builder)` 方法\r\n\r\n## addToScene(...)\r\n\r\n正好 `TransformLayer` 重写了这个方法，并且没有调用父类的方法\r\n\r\n\r\n```\r\n  @override\r\n  void addToScene(ui.SceneBuilder builder, [ Offset layerOffset = Offset.zero ]) {\r\n    ...\r\n    engineLayer = builder.pushTransform(\r\n      _lastEffectiveTransform.storage,\r\n      oldLayer: _engineLayer as ui.TransformEngineLayer,\r\n    );\r\n    addChildrenToScene(builder);\r\n    builder.pop();\r\n  }\r\n```\r\n这里的 `engineLayer` 对象是用于进行复用的\r\n\r\n可以看到这里调用了 `addChildrenToScene(builder)` 方法，这个方法只在 `ContainerLayer` 中，且没有被重写\r\n\r\n## addChildrenToScene(...)\r\n\r\n\r\n```\r\n  void addChildrenToScene(ui.SceneBuilder builder, [ Offset childOffset = Offset.zero ]) {\r\n    Layer child = firstChild;\r\n    while (child != null) {\r\n      if (childOffset == Offset.zero) {\r\n        child._addToSceneWithRetainedRendering(builder);\r\n      } else {\r\n        child.addToScene(builder, childOffset);\r\n      }\r\n      child = child.nextSibling;\r\n    }\r\n  }\r\n```\r\n在这里就是遍历 **child** ，然后调用它们各自实现的 `addToScene(...)` 方法，而是否要将 `Layer` 添加到 `Scene` 的判断依据，已经在之前的 `updateSubtreeNeedsAddToScene()` 中完成了。\r\n\r\n这里需要注意一下， `_addToSceneWithRetainedRendering(builder)` 就是用于对之前的 `_engineLayer` 进行复用，当 `childOffset` 为 `Offset.zero` 时\r\n\r\n那么到这里 `Layer` 的刷新流程就结束了。而本篇文章差不多也快到头了，接下来我们完成上面提到过的，进行一个渲染测试\r\n\r\n# 渲染测试\r\n\r\n可以在这里进行测试：https://dartpad.dev/\r\n\r\n```\r\nimport 'dart:ui';\r\nimport 'dart:math';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/rendering.dart';\r\n\r\n\r\nvoid main(){\r\n    final OffsetLayer rootLayer = new OffsetLayer();\r\n    final PictureLayer pictureLayer = new PictureLayer(Rect.zero);\r\n    rootLayer.append(pictureLayer);\r\n\r\n    PictureRecorder recorder = PictureRecorder();\r\n    Canvas canvas = Canvas(recorder);\r\n\r\n    Paint paint = Paint();\r\n    paint.color = Colors.primaries[Random().nextInt(Colors.primaries.length)];\r\n\r\n    canvas.drawRect(Rect.fromLTWH(0, 0, 300, 300), paint);\r\n    pictureLayer.picture = recorder.endRecording();\r\n\r\n    SceneBuilder sceneBuilder = SceneBuilder();\r\n    rootLayer.addToScene(sceneBuilder);\r\n\r\n    Scene scene = sceneBuilder.build();\r\n    window.onDrawFrame = (){\r\n      window.render(scene);\r\n    };\r\n    window.scheduleFrame();\r\n}\r\n```\r\n效果如下\r\n\r\n<img src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/flutter/4.layer/002.png\" width=200>\r\n\r\n可以看到，我们没有使用任何 `Widget` 就在设备上展示了一个图案。所以其实从这里就可以了解到为什么说 Flutter是通过skia引擎去绘制的了。\r\n\r\n关于 `Layer` 的其他内容，这里也不再深入了，毕竟再深入就是C++了\r\n\r\n本篇是我们讲过的四棵树中最后的一颗，而这里非常方便用于测试一个我们前三篇都遇到了但是都略过了的部分，那就是 **热重载**\r\n\r\n# 额外部分：热重载\r\n\r\n当你通过上面的用例进行测试的时候，点击一下热重载按钮，是不是发现会报错：\r\n\r\n```\r\nError -32601 received from application: Method not found\r\n```\r\n并且图案的颜色并不会更改，这就涉及到我们之前提到过的一个方法了：`reassemble()` 了\r\n\r\n在 `Element` 和 `RenderObject` 中你经常能看到与之相关的方法，它就是用于实现热重载的核心逻辑\r\n\r\n在 `BindingBase` 中，我们可以看到找到这样一个方法：`reassembleApplication()` ，就是它来进行热重载控制的\r\n\r\n它会调用 `performReassemble()` 方法\r\n\r\n\r\n```\r\n  @mustCallSuper\r\n  @protected\r\n  Future<void> performReassemble() {\r\n    FlutterError.resetErrorCount();\r\n    return Future<void>.value();\r\n  }\r\n```\r\n在 `WidgetsBinding` 和 `RendererBinding` 都重写了这个方法，如果感兴趣的话，可以去看一下，他们分在其中调用了让 `Element` 和 `RenderObject` 进行热重载的方法\r\n\r\n那么，我们想要实现实现热重载其实就很简单了，看代码：\r\n\r\n\r\n```\r\nimport 'dart:ui';\r\nimport 'dart:math';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/rendering.dart';\r\nimport 'package:flutter/foundation.dart';\r\n\r\nvoid main() => TestBinding();\r\n\r\nclass TestBinding extends BindingBase{\r\n\r\n  @override\r\n  Future<void> performReassemble(){\r\n    final OffsetLayer rootLayer = new OffsetLayer();\r\n    final PictureLayer pictureLayer = new PictureLayer(Rect.zero);\r\n    rootLayer.append(pictureLayer);\r\n\r\n    PictureRecorder recorder = PictureRecorder();\r\n    Canvas canvas = Canvas(recorder);\r\n\r\n    Paint paint = Paint();\r\n    paint.color = Colors.primaries[Random().nextInt(Colors.primaries.length)];\r\n\r\n    canvas.drawRect(Rect.fromLTWH(0, 0, 300, 300), paint);\r\n    pictureLayer.picture = recorder.endRecording();\r\n\r\n    SceneBuilder sceneBuilder = SceneBuilder();\r\n    rootLayer.addToScene(sceneBuilder);\r\n\r\n    Scene scene = sceneBuilder.build();\r\n    window.onDrawFrame = (){\r\n      window.render(scene);\r\n    };\r\n    window.scheduleFrame();\r\n    super.performReassemble();\r\n    return Future<void>.value();\r\n  }\r\n}\r\n```\r\n热重载效果如下，大家可以在设备上进行测试\r\n\r\n<img src=\"https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/flutter/4.layer/003.gif\" width=200>\r\n\r\n当然，热重载的核心逻辑就是这个了。\r\n\r\n不过此前会进行代码文件的变更检查等，详情可以看这一篇文章：[揭秘Flutter Hot Reload（原理篇）](https://juejin.im/post/5bc80ef7f265da0a857aa924)\r\n\r\n本篇到这里就结束了，而【**从源码看flutter**】 尚未结束，敬请期待吧","3e8af4b0":"---\r\ntitle: 单例与锁\r\ndate: 2020-03-13 21:17:23\r\nindex_img: /img/lock.png\r\ntags: 源码系列\r\n---\r\n\r\n\r\n# 序\r\n\r\n关于单例和锁的概念，以前一直都是把别人的分析文章简单看一遍，自己实操的不多，其中很多东西都知之甚少，没有一个完整的概念。\r\n\r\n而在之前的面试中，也被要求过手写单例，并且是在编译器上写的。即便如此，写出来的东西问题也非常多。所以我有必要再对这些知识重新认识一遍了。\r\n\r\n# 引子\r\n\r\n简单介绍一下单例的概念吧：就是**一个对象在整个系统中只能存在一个实例**\r\n\r\n那么在java中单例一定是和 **static** 关键字挂钩的\r\n\r\n如何去实现一个单例呢？我们下面一步步来看\r\n\r\n# 单例\r\n\r\n先来试一下最简单的单例\r\n\r\n### 饿汉式单例\r\n\r\n这个名字特别有意思，也比较符合这个单例的情况。\r\n\r\n\r\n```\r\npublic class SingleClass {\r\n    private SingleClass() { }\r\n    private static SingleClass instance = new SingleClass();\r\n    public static SingleClass getInstance(){\r\n        return instance;\r\n    }\r\n}\r\n```\r\n> 注意，单例模式暴露给调用者的接口要保证它不会破坏单例模式，所以这里的构造方法是私有的。  \r\n想要获取SingleClass对象，只能通过调用它的 getInstance()方法。当然，还有很多破坏这种单例的方法，后面再说\r\n\r\n\r\n我们来通过多线程获取的方式检验一下，看看它是不是单例：\r\n\r\n```\r\n    @Test\r\n    public void test(){\r\n        for(int i = 0; i < 10; i++){\r\n            new Thread(() -> {\r\n                SingleClass singleClass = SingleClass.getInstance();\r\n                System.out.println(\"hashcode: \" + singleClass.hashCode());\r\n            }).start();\r\n        }\r\n    }\r\n```\r\n\r\n打印内容：\r\n```\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\nhashcode: 1202440441\r\n```\r\n\r\n可以看到，获取的都是同一个对象。显然，这样的单例模式是可以的。\r\n\r\n不过因为一开始就创建了一个静态的对象，这就导致了不管程序是否需要使用到它，它都会消耗掉一部分资源。所以我们可以优化一下\r\n\r\n### 有缺陷的懒汉式单例\r\n\r\n\r\n```\r\npublic class SingleClass {\r\n    private SingleClass() { }\r\n    private static SingleClass instance;\r\n    public static SingleClass getInstance(){\r\n        if(instance == null){\r\n            instance = new SingleClass();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```\r\n看一下上面的单例模式，只有调用 **getInstance()** 方法才会去创建一个单例对象，好像没有问题。\r\n\r\n但是如果放在多线程模式下运行呢？我们再来检验一下，还是上面的检验方法，看一下检验后的结果：\r\n\r\n\r\n```\r\nhashcode: 1225245564\r\n\r\nhashcode: 686369273\r\nhashcode: 686369273\r\nhashcode: 686369273\r\nhashcode: 686369273\r\nhashcode: 686369273\r\nhashcode: 686369273\r\n\r\nhashcode: 416757494\r\nhashcode: 686369273\r\nhashcode: 686369273\r\n```\r\n显然，在10个线程同时去获取这个单例对象时，创建了多个实例\r\n\r\n那这里，就要介绍到另一个关键字 **synchronized** 了\r\n\r\n### synchronized\r\n\r\n **synchronized** 的作用是给 **方法或者代码块加锁**，也就是说它不能被用来修饰一个变量。\r\n \r\n 并且根据 **synchronized** 的不同使用方式，加的锁类型也不同。\r\n \r\n 主要分为两种，分别是 **对象锁(也叫方法锁)** 和 **类锁**，接下来我们需要搞明白两个问题：\r\n \r\n - **什么是对象锁和类锁？**\r\n - **对象锁和类锁分别有什么作用？**\r\n\r\n#### 对象锁和类锁\r\n\r\n我们可以先在概念上线介绍一下这个问题\r\n\r\n如果我们有这样一个类：\r\n\r\n```\r\npublic class SynchronizedClass {\r\n    //对象锁\r\n    public synchronized void methodA(){}\r\n    public void methodB(){\r\n        synchronized(this){ }\r\n    }\r\n    Object object = new Object();\r\n    public void methodC(){\r\n        synchronized(object){ }\r\n    }\r\n\r\n    //类锁\r\n    public static synchronized void methodD(){}\r\n    public static void methodE(){\r\n        synchronized (SynchronizedClass.class){ }\r\n    }\r\n}\r\n```\r\n根据这个类展开：\r\n- 对象锁：\r\n     - 如果 **new** 了100个 **SynchronizedClass** 对象，而每一个对象都有他们独自的**对象锁**，这时候如果有两个线程 **X** 和 **Y**，**X** 在访问某个对象的 `methodA()` 方法时候， **Y** 是不可以访问这个对象的 `methodA()` 的，必须要等待 **X** 访问完毕才可以，但是这时候 **Y** 可以访问其他99个对象的 `methodA()`\r\n- 类锁：\r\n    - 同样的，上面的流程走一遍。对于线程  **X** 和 **Y** ，不能同时访问 `methodD()` 或者 `methodE()` 方法\r\n\r\n来做个试验吧，这样看起来更加明显\r\n\r\n#### 对象锁\r\n\r\n```\r\npublic class SynClassTest{\r\n\r\n    public synchronized void printSyn()  {\r\n        int i = 0;\r\n        while (i++ < 5){\r\n            System.out.println(\"Syn-\" + Thread.currentThread().getName() + \":\" + i);\r\n        }\r\n    }\r\n    public synchronized void printNoSyn()   {\r\n        int i = 0;\r\n        while (i++ < 5){\r\n            System.out.println(\"NoSyn-\" + Thread.currentThread().getName() + \":\" + i);\r\n        }\r\n    }\r\n}\r\n```\r\n我们注意到，上面两个方法都是用 **synchronized** 关键字修饰了的。接下来看一下测试方法：\r\n\r\n```\r\n    @Test\r\n    public void test()  {\r\n        SynClassTest obj = new SynClassTest();\r\n        Thread a = new Thread(() -> {\r\n            obj.printNoSyn();\r\n        }, \"NoSyn\");\r\n        Thread b = new Thread(() -> {\r\n            obj.printSyn();\r\n        }, \"Syn\");\r\n        a.start();\r\n        b.start();\r\n    }\r\n```\r\n\r\n打印内容：\r\n\r\n```\r\nNoSyn-NoSyn:1\r\nNoSyn-NoSyn:2\r\nNoSyn-NoSyn:3\r\nNoSyn-NoSyn:4\r\nNoSyn-NoSyn:5\r\nSyn-Syn:1\r\nSyn-Syn:2\r\nSyn-Syn:3\r\nSyn-Syn:4\r\nSyn-Syn:5\r\n```\r\n可以看到，当一个线程执行完毕了另一个线程才开始执行，因为他们持有的都是同一个对象锁\r\n\r\n接下来，把 **printNoSyn()** 方法的 **synchronized** 去掉，看看打印什么：\r\n\r\n```\r\nNoSyn-NoSyn:1\r\nNoSyn-NoSyn:2\r\nSyn-Syn:1\r\nNoSyn-NoSyn:3\r\nNoSyn-NoSyn:4\r\nNoSyn-NoSyn:5\r\nSyn-Syn:2\r\nSyn-Syn:3\r\nSyn-Syn:4\r\nSyn-Syn:5\r\n```\r\n这时候，输出结果是两个线程交替进行的。\r\n\r\n这说明，**某个线程得到了对象锁，但是另一个线程还是可以访问没有进行同步的方法或者代码**。进行了同步的方法（加锁方法）和没有进行同步的方法（普通方法）是互不影响的。\r\n\r\n这时候，我们修改一下，看一看 **类锁** 的效果\r\n\r\n#### 类锁\r\n\r\n在 `SynClassTest` 中添加一个方法，表示类锁：\r\n\r\n```\r\n    public void printClassSyn()   {\r\n        synchronized (SynClassTest.class){\r\n            int i = 0;\r\n            while (i++ < 5){\r\n                System.out.println(\"ClassSyn-\" + Thread.currentThread().getName() + \":\" + i);\r\n            }\r\n        }\r\n    }\r\n```\r\n同时，测试的地方也添加一个线程打印\r\n\r\n```\r\n        Thread c = new Thread(() -> {\r\n            obj.printClassSyn();\r\n        }, \"ClassSyn\");\r\n        ...\r\n        c.start();\r\n```\r\n\r\n再来看看打印结果：\r\n\r\n```\r\nNoSyn-NoSyn:1\r\nSyn-Syn:1\r\nSyn-Syn:2\r\nSyn-Syn:3\r\nClassSyn-ClassSyn:1\r\nClassSyn-ClassSyn:2\r\nClassSyn-ClassSyn:3\r\nClassSyn-ClassSyn:4\r\nClassSyn-ClassSyn:5\r\nSyn-Syn:4\r\nSyn-Syn:5\r\nNoSyn-NoSyn:2\r\nNoSyn-NoSyn:3\r\nNoSyn-NoSyn:4\r\nNoSyn-NoSyn:5\r\n```\r\n\r\n从这个打印结果来看，类锁和方法锁的打印结果是交替进行的，说明这两个锁是不互斥的。\r\n\r\n同时也说明了，类锁只是一个抽象出来的概念而已，并不是像名字上的那样给一整个类加上锁\r\n\r\n> ps:因为上面的类锁，synchronized修饰的是SynClassTest.class对象，所以没有在方法前加static修饰，当然我也测试过加了static后的结果，还是差不多的\r\n\r\n当然，锁的概念还有很多，比如 `死锁`、`自旋锁`、`重置锁` 等等，这里就不进行介绍了。感兴趣的小伙伴可以去看这篇文章了解一下：\r\n[不可不说的Java“锁”事](https://tech.meituan.com/2018/11/15/java-lock.html)\r\n\r\n接下来，我们回到前面那个没有完成的懒汉式单例模式。\r\n\r\n### 完善一点的懒汉式单例模式\r\n\r\n知道了 `synchronized` 的用法后，我们就可以来对之前的单例模式进行完善了。\r\n\r\n```\r\n    public static SingleClass getInstance(){\r\n        synchronized (SingleClass.class){\r\n            if (instance == null){\r\n                instance = new SingleClass();\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n```\r\n这样，我们就对这个方法加上了类锁，但是这里又有一个问题了。\r\n\r\n也就是每次调用 `getInstance()` 方法的时候，都会访问到这个锁，因为加锁是有一定的性能开销的。所以这里还有一种更好的方法去完成这个单例模式\r\n\r\n\r\n```\r\n    public static SingleClass getInstance(){\r\n        if(instance == null){\r\n            synchronized (SingleClass.class){\r\n                if (instance == null){\r\n                    instance = new SingleClass();\r\n                }\r\n            }\r\n        }\r\n        return instance;\r\n    }\r\n```\r\n上面的代码中，只有当 `instance == null` 时才进入加锁的代码中，然后再做和之前一样的操作。这也就是我们常说的 `DCL(Double-Check Lock)` 了\r\n\r\n那么这样是不是就完成了呢？\r\n\r\n没想到吧！其实还有一个坑！\r\n\r\n因为实例化一个对象其实可以分为三个步骤：　　\r\n- （1）分配内存空间。　　\r\n- （2）初始化对象。　　\r\n- （3）将内存空间的地址赋值给对应的引用。\r\n\r\n但是由于操作系统可以对指令进行重排序，所以上面的过程也可能会变成如下过程：　\r\n- （1）分配内存空间。　　\r\n- （2）将内存空间的地址赋值给对应的引用。　　\r\n- （3）初始化对象\r\n\r\n也就是说上面的 `instance = new SingleClass();` 不是一个原子性的操作，在多线程中可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。(详细原因请看：[双重检查锁定与延迟初始化](https://www.infoq.cn/article/double-checked-locking-with-delay-initialization/))\r\n\r\n为了避免对指令的重排序，我们需要使用 `volatile` 关键字。\r\n\r\n这里，我们又引入了一个新的概念：**volatile**\r\n\r\n### volatile\r\n\r\n`volatile` 是一个关键字，它的作用如下：\r\n- **可见性**：使系统中所有线程对该关键字修饰的变量共享可见，可以禁止线程的工作内存对volatile修饰的变量进行缓存\r\n- **有序性**：就像上面所提到的，防止指令重排\r\n- **原子性**：volatile关键字用于声明简单类型变量，如int、float、 boolean等数据类型。对这些变量的**读**和**写**都是原子性的，但是其他对于变量的操作就不是了，比如：\r\n    - 基本类型的自增（如count++）等操作不是原子的。\r\n    - 对象的任何非原子成员调用（包括 **成员变量** 和 **成员方法**）不是原子的。\r\n\r\n因为 **有序性** 在上面已经讲过了，下面就针对 **可见性** 和 **原子性** 分别来看几个例子\r\n\r\n#### 可见性\r\n\r\n先创建一个class对象用于进行数据操作\r\n```\r\npublic class VolatileClass {\r\n    private int i = 0;\r\n\r\n    public void increase(){\r\n        i++;\r\n    }\r\n\r\n    public int get(){\r\n        return i;\r\n    }\r\n}\r\n\r\n```\r\n然后是测试\r\n\r\n```\r\n    @Test\r\n    public void test(){\r\n        VolatileClass volatileClass = new VolatileClass();\r\n        Thread write =  new Thread(() -> {\r\n            for(int i = 0; i < 100; i++){\r\n                volatileClass.increase();\r\n            }\r\n            print(\"写入结果：\"+ volatileClass.get());\r\n        }, \"WriteThread\");\r\n        Thread read =   new Thread(() -> {\r\n            print(\"读取开始：\"+ volatileClass.get());\r\n            while (volatileClass.get() < 100){\r\n\r\n            }\r\n            print(\"读取结束：\"+ volatileClass.get());\r\n        }, \"ReadThread\");\r\n        read.start();\r\n        try {\r\n            Thread.sleep(100);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n        write.start();\r\n    }\r\n```\r\n上面先让 **读取线程** 一直运行， 在 100ms 后再用 **写入线程** 修改数据，因为 读取线程是死循环，所以如果它能够获取到修改后的结果，就会打印 **读取结束**。我们看一下打印结果\r\n\r\n\r\n```\r\n读取开始：0\r\n写入结果：100\r\n\r\n```\r\n显然，这里我们就验证了 **可见性** 的问题，接下来，是 **原子性**\r\n\r\n#### 原子性\r\n\r\n> 原子性是指一个操作是不可中断的，要么全部执行成功要么全部执行失败\r\n\r\n\r\n```\r\nint a = 10;\r\na++;\r\nint b=a;\r\na = a+1;\r\n```\r\n上面的四个语句中，只有第一个是原子操作，其他都不是原子操作。\r\n\r\n接下来，我们来验证一下，`volatile` 的原子性\r\n\r\n\r\n```\r\n    @Test\r\n    public void test(){\r\n        VolatileClass volatileClass = new VolatileClass();\r\n        for(int i = 0; i < 10000; i++){\r\n            new Thread(() -> {\r\n                volatileClass.increase();\r\n            }).start();\r\n        }\r\n        print(\"结果:\" + volatileClass.get());\r\n    }\r\n```\r\n为了保证 `increase()` 方法操作不受多线程的影响，我们给它加上了 **synchronized**修饰，同时我们也将变量用 `volatile` 修饰一下：看一下打印结果：\r\n\r\n\r\n```\r\n结果:9993\r\n```\r\n你会发现，结果经常是小于 **10000** 的，所以这也就说明了， `volatile`无法保证修饰对象相关操作的原子性\r\n\r\n那么到此，我们最后用另一个单例作为这篇文章的终点吧\r\n\r\n### 静态内部类单例\r\n\r\n\r\n```\r\npublic class SingleClass {\r\n    \r\n    private SingleClass() { }\r\n    \r\n    private static class LazyHolder{\r\n        private static SingleClass instance = new SingleClass();\r\n    }\r\n\r\n    public static SingleClass getInstance(){\r\n        return LazyHolder.instance;\r\n    }\r\n}\r\n```\r\n\r\n这种单例模式和懒汉式一样，也是只有调用了 `getInstance()` 方法才会初始化实例对象。并且实现起来也比较方便。是最为推荐的一种单例写法。\r\n\r\n还剩下一种枚举实现的单例：\r\n\r\n```\r\npublic enum Singleton {  \r\n    INSTANCE;  \r\n    public void whateverMethod() {  \r\n    }  \r\n}\r\n```\r\n\r\n不算常见，这里就提一下\r\n\r\n之前提过的，一些可以破坏单例的方法，可以去阅读这篇文章，写的比较详细： \r\n[那些年，我们一起写过的“单例模式”](https://zhuanlan.zhihu.com/p/25733866)\r\n\r\n最后，关于单例的内容就到此结束啦(后面有空的话，锁会深入一下)。","c201927e":"---\r\ntitle: 手把手教你android端微信支付接入\r\ndate: 2018-10-08 21:49:47\r\nindex_img: /img/wechat_pay.png\r\ntags: Android\r\n---\r\n\r\n## Android端接入微信支付，蛮简单的\r\n\r\n\r\n### 一、添加gradle依赖：\r\n\r\n在app module目录下的build.gralde中添加\r\n\r\n```\r\ndependencies {\r\n    //微信SDK接入\r\n    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'\r\n}\r\n```\r\ngralde构建完成之后，再做下一步的操作。\r\n\r\n### 二、在AndroidManifest.xml中添加相关权限：\r\n\r\n```\r\n    <!--微信支付权限-->\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/>\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\r\n```\r\n\r\n### 三、创建wxapi目录，并创建WXPayEntryActivity\r\n\r\n在你的package目录下，创建**wxapi**目录，比如说我使用的demo项目，**wxapi**就在目录**net.sourceforge.simcpux**目录下\r\n\r\n同时，在**wxapi**目录下创建**WXPayEntryActivity**\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-001.png)\r\n\r\n**WXPayEntryActivity**实现**IWXAPIEventHandler**接口，这个Activity页面就是支付结果的回调页面，下面是它最简单地实现：\r\n```\r\npublic class WXPayEntryActivity extends Activity implements IWXAPIEventHandler{\r\n\t\r\n\tprivate static final String TAG = \"MicroMsg.SDKSample.WXPayEntryActivity\";\r\n\t\r\n    private IWXAPI api;\r\n\t\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.pay_result);\r\n        \r\n    \tapi = WXAPIFactory.createWXAPI(this, \"你的appid\");\r\n        api.handleIntent(getIntent(), this);\r\n    }\r\n\r\n\t@Override\r\n\tprotected void onNewIntent(Intent intent) {\r\n\t\tsuper.onNewIntent(intent);\r\n\t\tsetIntent(intent);\r\n        api.handleIntent(intent, this);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onReq(BaseReq req) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onResp(BaseResp resp) {\r\n\t\tLog.d(TAG, \"onPayFinish, errCode = \" + resp.errCode);\r\n\r\n\t\tif (resp.getType() == ConstantsAPI.COMMAND_PAY_BY_WX) {\r\n\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n\t\t\tbuilder.setTitle(\"支付结果\");\r\n\t\t\tbuilder.setMessage(getString(R.string.pay_result_callback_msg, String.valueOf(resp.errCode)));\r\n\t\t\tbuilder.show();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n同时，别忘了在**AndroidManifest.xml**中声名**WXPayEntryActivity**\r\n\r\n\r\n```\r\n        <activity\r\n            android:name=\".wxapi.WXPayEntryActivity\"\r\n            android:exported=\"true\"\r\n            android:launchMode=\"singleTop\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.VIEW\"/>\r\n                <category android:name=\"android.intent.category.DEFAULT\"/>\r\n                <data android:scheme=\"你的appid\"/>\r\n            </intent-filter>\r\n\r\n        </activity>\r\n```\r\n\r\n当这些准备工作都做好之后，就可以准备使用了。\r\n\r\n### 四、使用\r\n\r\n当你从服务端获取到订单的相关信息后，就可以调用支付接口了：\r\n```\r\n                IWXAPI api = WXAPIFactory.createWXAPI(context, null);\r\n                api.registerApp(IntentKey.WX_APP_ID);\r\n                PayReq req = new PayReq();\r\n                req.appId\t\t\t= \"wx8888888888888888\";//你的微信appid\r\n                req.partnerId\t\t= \"1900000109\";//商户号\r\n                req.prepayId\t\t= \"WX1217752501201407033233368018\";//预支付交易会话ID\r\n                req.nonceStr\t\t= \"5K8264ILTKCH16CQ2502SI8ZNMTM67VS\";//随机字符串\r\n                req.timeStamp\t\t= \"1412000000\";//时间戳\r\n                req.packageValue\t= \"Sign=WXPay\";扩展字段,这里固定填写Sign=WXPay\r\n                req.sign\t\t\t= \"C380BEC2BFD727A4B6845133519F3AD6\";//签名\r\n//\t\t\t\treq.extData\t\t\t= \"app data\"; // optional\r\n                // 在支付之前，如果应用没有注册到微信，应该先调用IWXMsg.registerApp将应用注册到微信\r\n                api.sendReq(req);\r\n```\r\n\r\n这里需要注意的是，上面的这些信息，都应该从服务器去获取，比如说随机字符串之类的长短也不一定和上面例子中的一致。具体是什么，得看你们的后端给的是什么。\r\n\r\n不出意外的话，通过上面接口的调用，你就可以正常使用微信提供的APP支付了。\r\n\r\n是不是非常简单？！\r\n\r\n***然鹅。。。***\r\n\r\n事情哪儿有这么顺利，到了真正使用的时候，遇到的问题可不少，下面会列举出遇到过的问题，然后说明解决办法。\r\n\r\n\r\n## Android端接入微信支付，坑蛮多的\r\n\r\n**微信支付app的接入，要我来说，对初次尝试的人非常不友好**\r\n\r\n一般情况下，开发者使用新的工具都需要先看一看它的说明文档，如果说明文档写的够好，直接用就是了；如果文档介绍的不够全面，还需要有Demo提供参考。微信的App支付就属于后者。\r\n下面是它的接入文档页面：\r\n\r\n[Android接入指南](https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=1417751808&token=&lang=zh_CN)（还有其他相关信息也可以通过这个页面接入）\r\n\r\n由于仅仅靠着文档的说明不足以让我掌握对微信支付的使用，所以自然而然的，Demo就成了初次接触微信支付者的学习教材啦！\r\n\r\n[Demo下载](https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=11_1)\r\n\r\n当你接入Demo后，一系列的问题将会接踵而至，下面来看一看具体是什么问题\r\n\r\n### 接入Demo\r\n\r\n将下载后的Demo按照Import moudule的方式接入到某个项目中：\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-002.png)\r\n\r\n然后选中这个项目，进行编译：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-003.png)\r\n\r\n接下来，编译器就开始报错了，找到报错的位置，发现是如下问题：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-004.png)\r\n\r\n**到这里开始，我就要吐槽了**\r\n\r\n这种问题一看就是找不到包了，于是我们看一下这个项目中的build.gralde中的依赖，如下\r\n```\r\ndependencies {\r\n    compile files('libs/libammsdk.jar')\r\n    compile files('libs/wechat-sdk-android-with-mta-1.0.2.jar')\r\n}\r\n\r\n```\r\n很显然，是导入的本地jar包，为了方便起见，我们将这里的依赖修改成之前配置时的：\r\n\r\n```\r\ndependencies {\r\n    //微信SDK接入\r\n    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'\r\n}\r\n```\r\n同时，我们还可以发现，重新构建完项目后，上面的问题并没有解决。\r\n\r\n这时候我们在Android studio的中的**External Libraries**去看一看新构建的库:\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-005.png)\r\n\r\n可以看到，正确的引用路径应该是把**sdk**换成**opensdk**\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-006.png)\r\n\r\n当你将所有的路径都修改过来后，还会有如下问题：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-007.png)\r\n\r\n将上面的 **imgObj.imageUrl = url** 修改为：\r\n\r\n```\r\nimgObj.setImagePath(url);\r\n```\r\n这个错误出现的地方有两处吧，当你把这些错误都解决后，再次进行编译，就可以正常运行啦！\r\n\r\nDemo运行后的界面是这样的：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-008.png)\r\n\r\n到了这里，基本上就可以进行测试了，剩下的东西无需再多说，过程差不多和上面直接接入的流程一样，不过要demo里面的更加详细，只需多多观摩即可。\r\n\r\n那么，最后还是说一下需要注意的点吧。\r\n\r\n### 注意事项\r\n\r\n在微信开放平台上面设置app相关参数的时候，需要**应用包名**以及**应用签名**\r\n\r\n![image](https://pay.weixin.qq.com/wiki/doc/api/img/chapter8_5_2.png)\r\n\r\n获取应用签名的工具地址是：[签名工具下载地址](https://open.weixin.qq.com/zh_CN/htmledition/res/dev/download/sdk/Gen_Signature_Android.apk)\r\n\r\n> 这里又要吐槽一下，签名工具就是一个apk，装到手机上后，输入包名，然后生成签名，最关键的是这个签名无法复制，使用下来就一个感受，不方便啊！！！！\r\n\r\n签名工具里面输入的包名就是之前提到过的，可以直接在Androidmanifest.xml中复制。\r\n\r\n**但是**\r\n\r\n    尽管包名一样，release版的项目和debug版的项目最后生成的签名都是不一样的，这点很重要！\r\n    \r\n**所以如果你是用的debug进行测试，那么网站里面的签名一定要填写debug版下获取到的签名，正式发布的时候，要把它换成release版的！如果签名不一致，你是无法通过那个“-1”返回值获取到任何有效的错误信息的!切记！**\r\n\r\n\r\n<font face=\"STCAIYUN\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~那么</font>\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5%E6%B5%81%E7%A8%8B/wxpay-009.png)","2b01d5b9":"---\r\ntitle: 骚年，你还没开始学Flutter吗？\r\ndate: 2019-05-04 21:49:47\r\nindex_img: /img/study_flutter.png\r\ntags: Flutter\r\n---\r\n\r\n# 开场闲聊\r\n\r\n在去年12月份的Flutter Live 2018上，谷歌的Flutter团队宣布**Flutter 1.0 release版**正式发布。\r\n\r\n想必很多小伙伴和我一样，都是从那个时候开始了解到Flutter的，而我也是顺带从那个时候入了Flutter的坑。\r\n\r\n不过应该还有一部分小伙伴对Flutter只是略有耳闻，甚至闻所未闻。为了把这部分小伙伴拉到这个 **“大坑”** 里面来，我不得不在这里向你们展示**Flutter的魅力**所在，同时为了保持客观公正，我也会介绍一些我遇到过的**Flutter的麻烦**之处。  \r\n就像谈恋爱一样，因为优点才会在一起，也因为接受得了缺点才能使情感继续保持。\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/001.png)\r\n\r\n\r\n话不多说，接下来就由我来为诸位展示Flutter所具备的这些的特性吧。\r\n<!--more--> \r\n\r\n\r\n# Flutter的特性\r\n\r\n在我看来，Flutter的特性主要分为两类，分别是**高效性**与**舒适性**，这两者都会是你在进行Flutter开发时最直观的感受，而下面的这些特性从侧面也会展示出这部分效果\r\n\r\n\r\n### 一、热重载\r\n\r\n热重载大家应该都耳熟能详了，和前端开发一样，对代码进行修改后，可以即时看到效果，这点相比于原生开发每次做了一点修改就要从头到尾编译一次不知道高到哪里去了！\r\n\r\n下面是一点简单的演示效果：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/002.gif)\r\n\r\n可以看到，热重载带来的体验提升是巨大的！作为一名原生开发者，你心动了吗？\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/003.gif)\r\n\r\n不过关于热重载还有一些需要说明的地方，在用到可以保存状态的控件时，热重载不能将状态重置，比如说一个动画控件，在动画结束后再进行热重载是无法再次播放动画的（除非你对动画做了循环处理），所以有的时候你看着觉得热重载没效果，这时候就要考虑是不是用到了 **StatefulWidget** 之类的控件。\r\n\r\nFlutter将热重载作为一个亮点，不过由于Flutter的布局是用代码去写的，和Android中的xml不同，它无法进行实时预览，所以你无法想象没有热重载的话，要怎么面对Flutter进行编程，这么看来热重载既是亮点，也是要点。\r\n\r\n### 二、万物基于Widget\r\n\r\nFlutter中的页面都是由一个个的Widget组合而成，甚至连页面本身也是一个Widget，Widget与android中的组件类似，不过前者具有更好的组合性。  \r\n同时Flutter已经封装了许多简单好用的Widget，使用起来非常方便。\r\n\r\n比如在android中你想创建下面这样一个圆，你需要重新写一个xml，并在xml定义各种属性：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/004.png)\r\n\r\n而在Flutter中实现是非常容易的：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/005.png)\r\n\r\n不管是圆形，还是圆角矩形，又或者是不对称圆角矩形，Flutter都提供了很方便的实现方法。\r\n\r\n关于Widget可以看到代码的结构是一层一层的，对于初次接触的人来说想必是很难接受这种代码格式。因为我当初看到Flutter这样的代码时，还产生过劝退的想法，不过写了一段时间后还是觉得蛮带感的。打个比方的话就像初见JoJo和再见JoJo的感觉。\r\n\r\n在android中视图在xml中，代码则由java负责，在习惯了flutter后，我觉得用代码直接去创建视图也未尝不是一种好的解决方法，毕竟xml+java也算历史悠久了。而我也接触过一个前端框架——Vue，flutter的这种结构和vue的就非常类似。\r\n\r\n孰好孰坏因人而异，想必等你使用过一段时间后的flutter后心中会有着一个自己的答案。\r\n\r\n\r\n### 三、跨平台\r\n\r\n跨平台其实是flutter最突出的一个特点了，与其他如React、Week这类跨平台框架不同，Flutter作为后起之秀能脱颖而出与其性能表现和稳点程度是有很大关系的。\r\n\r\n在Flutter Live 2018上，官方已经放出了好几个纯Flutter的应用，并演示了他们在android和ios上的运行效果，其中最为惊艳的就是 **《The History Of Everything》** 了，下面给大家简单的展示一下真机运行效果：\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/007.gif)\r\n\r\n想自行体验的话可以去Google Play或者App Store中下载\r\n\r\n上面应用中的动画大部分由 **Flare** 实现，具体可以参见 [2dimensions(需科学上网)](https://www.2dimensions.com/)，这样可以跑满60帧的矢量动画也只是Flutter性能展现的一面，在跨平台上，其最大的特点就是**接近原生效果**。\r\n\r\n不过目前而言，flutter在跨平台上有一些问题还是需要完善的。比如视频的播放  \r\n具体原因可以看这篇文章：[万万没想到——flutter这样外接纹理](https://www.yuque.com/xytech/flutter/pfpo68)\r\n\r\n还有那些需要用到第三方sdk的时候，可能就需要做双端的channel通信了，但是也有比较积极的团队专门做了flutter的sdk，**声网**就是其中之一\r\n\r\n### 四、年轻\r\n\r\n年轻是flutter的一大优势，同时也是一大劣势。\r\n\r\n就像上面说的，许多第三方sdk还没有开始为flutter做适配，所以flutter的开发生态自然比不了其他技术框架和平台，然而因其发展的势头非常迅猛，所以这其实也是一个机会。大量的开发者可以在这个领域再做建树，未来会是何种状况还是非常令人期待的。\r\n\r\n如同 **Kotlin** 一样，现阶段如果去看国外的一些技术博客，如 **Medium** 里关于 Android 的，大部分语言都已经是kotlin的了，只是国内的博客可能普及度还没有那么高。但是良禽择木而栖，趋势一直都在，怎么选择就看个人了。\r\n\r\n也正是因为flutter比较年轻，所以有些东西还没有一个既定的公认的解决方案。就比如flutter开发过程中都会遇到的 **状态管理**。\r\n\r\n目前flutter中的状态管理框架有许多，最知名的比如从前端引鉴过来的 **Redux**，同时还有 **Bloc**， **Provide** 等。每个状态管理框架解决的范围都不一样，学习成本也各有差异，如何选择还是需要看项目需求与个人喜好。  \r\n具体选择可以看这篇文章：[（译）让我来帮你理解和选择Flutter状态管理方案](https://juejin.im/post/5bac54c45188255c681589d3)\r\n\r\n\r\n### 五、Dart语言\r\n\r\nflutter的开发语言使用的是dart，对于刚接触kotlin的同学来说，再去使用dart想必是一件很苦恼的事情。\r\n\r\n比如kotlin中用 **var表示变量(variable)**，**val表示常量(value)**，而到了dart中虽然可以用var表示变量，但是常量还是只能用final或者const去修饰。\r\n\r\n从很多方面看来kotlin都算是算是采各家所长集于一身，而dart则像是修行还没结束就半路出山了。\r\n\r\n不过因为对比对象是kotlin，所以dart显得不那么出色，其实dart还是有很多好用的点的。\r\n\r\n比如\r\n#### 调用前做对象判空：\r\n\r\n```\r\n//kotlin\r\na?.m()\r\n//dart\r\na?.m()\r\n\r\n```\r\n不同之处在于kotlin如果对象为空则不做处理,同时要求你做对象为空时的赋值，dart如果对象为空则返回null,\r\n\r\n#### 对象为空时赋值\r\n\r\n```\r\n//kotlin\r\nvar x = a?.b ?: c\r\n//dart\r\nvar x = a?.b ?? c\r\n```\r\n两者区别不大.不过dart中还可以使用 ??= 代替?? ,区别是前者可以单独作为赋值语句\r\n\r\ndart虽然在使用上不及kotlin那么舒适，但dart也一直在更新换代，优秀的语言发展到最后一定是有很多共同性的，所以不要过于纠结于语言的选择上，因为它终究只是一种工具。\r\n\r\n# 结束闲聊\r\n\r\n从去年12月flutter发布1.0 release版本到今天，flutter已经迭代了好多个版本了\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/008.png)\r\n\r\n而我在使用过程中确实遇到过一些问题，或简单或麻烦，但大部分都有了解决方案。从稳定性上来讲，使用flutter的交互其实就是对数据进行操作，而正是因为这样，做到了视图与数据分离，所以出bug的情况要少得多。\r\n\r\n为什么我要介绍flutter甚至是鼓励各位原生开发者们去学flutter，主要原因有两个：\r\n- 一、学习flutter的成本很低，因为它难度不大\r\n- 二、从flutter的性能表现上来看，它是可以代替原生应用的，只是现在火候不够\r\n\r\n所以对于现阶段的初中级原生开发者而言，我建议你一定要抽出时间去了解了解flutter，因为大部分你能通过原生去实现的东西，用flutter一样也是可以的，并且还更加轻松，还可以跨平台。\r\n\r\n写到这里，文章中也很少涉及到技术上的东西，主要还是以介绍为主\r\n\r\n下面再介绍一点点我非常推荐的学习flutter的途径吧：\r\n\r\n\r\n\r\n1、 **首先自然是Youtube上flutter官方的视频项目(科学上网)：\r\n[Flutter](https://www.youtube.com/channel/UCwXdFgeE9KYzlDdR7TG9cMw)**\r\n\r\n这里面有个超赞的系列，就是每周一更的 **Flutter Widget of the Week**\r\n\r\n\r\n2、**然后你也可以关注B站的** **[Google中国账号](https://space.bilibili.com/64169458/)**\r\n\r\n其中的视频都有中文翻译，可以找到关于flutter的学习视频，不过和youtube上相比更新要慢很多\r\n\r\n3、**[《Flutter实战》](https://book.flutterchina.club/)**\r\n\r\n万分感谢这位作者开源这本技术书！\r\n\r\n\r\n剩下的学习途径还有许多，不过学习也是发散的，知道上面三个后，其他的途径于你也不在话下了。\r\n\r\n\r\n最后再介绍一个学习途径\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/apk/apk.png)\r\n\r\n没错，就是我用flutter写的一个小项目\r\n\r\n![image](https://blog-pic-1256696029.cos.ap-guangzhou.myqcloud.com/introduce_flutter/009.jpg)\r\n\r\n","450b75aa":"---\r\ntitle: Nim 游戏(简单)\r\ndate: 2020-03-22 12:14:10\r\n---\r\n## 题目描述\r\n\r\n你和你的朋友，两个人一起玩 ``Nim`` 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。\r\n\r\n你们是聪明人，每一步都是最优解。 编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。\r\n\r\n**示例:**\r\n\r\n```\r\n输入: 4\r\n输出: false \r\n解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；\r\n    因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。\r\n```\r\n\r\n## 解题思路\r\n\r\n这题想复杂了，就会真的很复杂。但是只要发现了这道题目的本质，就非常的简单...简单到不可思议，所以记录一下\r\n\r\n由于每个人每次最多能拿 **3** 块石头，所以最后当面前的石头数量低于 **3** 时，你可以拿走全部的石头，你就赢了。\r\n\r\n当石头数量为 **4** 时，无论你怎么操作，最后总会给对手留下可以拿完的石头。但是如果为 **5块**、**6块**、**7块**时，你总是可以想办法留下让对手无法一次拿完的石头，这样你是可以赢的。  \r\n所以只要避免轮到你时，还剩下4块石头即可。同理，**8块**、**12块**也是一样的，也就是说，石头数量不能为4的倍数。\r\n\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun canWinNim(n: Int): Boolean {\r\n        return (n % 4 != 0);\r\n    }\r\n```\r\n","20f81fc1":"---\r\ntitle: Pow(x,n)  (中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n实现 ``pow(x, n)`` ，即计算 x 的 n 次幂函数。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: 2.00000, 10\r\n输出: 1024.00000\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: 2.10000, 3\r\n输出: 9.26100\r\n```\r\n\r\n**示例 3:**\r\n\r\n\r\n```\r\n输入: 2.00000, -2\r\n输出: 0.25000\r\n解释: 2-2 = 1/22 = 1/4 = 0.25\r\n```\r\n\r\n**说明:**\r\n\r\n- -100.0 < ``x`` < 100.0\r\n- ``n`` 是 32 位有符号整数，其数值范围是 [−2^31, 2^31 − 1]。\r\n\r\n\r\n## 解题思路\r\n\r\n最简单粗暴的办法去计算x的n次方，就是将x循环乘以n次。但是显而易见，这样当n非常大的时候计算次数会非常多。\r\n\r\n换一个思路，如果我们用折半的方法去缩小循环的次数呢？\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun myPow(x: Double, n: Int): Double {\r\n        var result = 1.0\r\n        var num = x\r\n        var i = n\r\n        while (i != 0) {\r\n            if (i % 2 != 0) {\r\n                result *= num\r\n            }\r\n            num *= num\r\n            i /= 2\r\n        }\r\n        return if (n < 0) 1 / result else result\r\n    }\r\n```\r\n","27f9abf9":"---\r\ntitle: Z字型变换(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n将一个给定字符串根据给定的行数，以从上往下、从左到右进行Z 字形排列。\r\n\r\n比如输入字符串为 ``\"LEETCODEISHIRING\"`` 行数为 3 时，排列如下：\r\n\r\n\r\n```\r\nL   C   I   R\r\nE T O E S I I G\r\nE   D   H   N\r\n```\r\n之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：``\"LCIRETOESIIGEDHN\"``。\r\n\r\n请你实现这个将字符串进行指定行数变换的函数：\r\n\r\n\r\n```\r\nstring convert(string s, int numRows);\r\n```\r\n\r\n\r\n**示例1:**\r\n\r\n\r\n```\r\n输入: s = \"LEETCODEISHIRING\", numRows = 3\r\n输出: \"LCIRETOESIIGEDHN\"\r\n```\r\n\r\n\r\n**示例2:**\r\n\r\n\r\n```\r\n输入: s = \"LEETCODEISHIRING\", numRows = 4\r\n输出: \"LDREOEIIECIHNTSG\"\r\n解释:\r\n\r\nL     D     R\r\nE   O E   I I\r\nE C   I H   N\r\nT     S     G\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n说实话，这题没有什么特别的解体思路。因为思路上来说解决这道题目很简单。\r\n\r\n那为什么我要将这题记录下来呢？\r\n\r\n主要做完题目后对比答案，被答案的解法给惊艳到了。这种感觉于我而言就像直接吃掉第六个烧饼，然后肚子就饱了。\r\n\r\n答案的解法可读性也不强，但是这种恰到好处的代码甚至让我怀疑出题者是先想到答案，再想到题目的。\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    public String convert(String s, int numRows) {\r\n\r\n        if (numRows == 1) return s;\r\n\r\n        List<StringBuilder> rows = new ArrayList<>();\r\n        for (int i = 0; i < Math.min(numRows, s.length()); i++)\r\n            rows.add(new StringBuilder());\r\n\r\n        int curRow = 0;\r\n        boolean goingDown = false;\r\n\r\n        for (char c : s.toCharArray()) {\r\n            rows.get(curRow).append(c);\r\n            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\r\n            curRow += goingDown ? 1 : -1;\r\n        }\r\n\r\n        StringBuilder ret = new StringBuilder();\r\n        for (StringBuilder row : rows) ret.append(row);\r\n        return ret.toString();\r\n    }\r\n}\r\n\r\n```\r\n","75c598fd":"---\r\ntitle: 三数之和(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个包含 n 个整数的数组 ``nums``，判断 ``nums`` 中是否存在三个元素 *a，b，c* ，使得 *a + b + c = 0* ？找出所有满足条件且不重复的三元组。\r\n\r\n**注意**：答案中不可以包含重复的三元组。\r\n\r\n\r\n```\r\n例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\r\n\r\n满足要求的三元组集合为：\r\n[\r\n  [-1, 0, 1],\r\n  [-1, -1, 2]\r\n]\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n#### 排序+双指针\r\n\r\n解决此题的思路的要点就是如何避免重复选择。所以需要用到排序，而双指针则可以加快选择\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun threeSum(nums: IntArray): List<List<Int>> {\r\n        nums.sort()\r\n        val resultList = mutableListOf<List<Int>>()\r\n        for (i in 0 until nums.size - 2) {\r\n            if(nums[i] > 0) break\r\n            var left = i+1\r\n            var right = nums.size - 1\r\n            while (left < right){\r\n                val lv = nums[left]\r\n                val rv = nums[right]\r\n                val mv = nums[i]\r\n                val sum = lv + rv + mv\r\n                when {\r\n                    sum == 0 -> {\r\n                        val list = listOf(lv,mv,rv)\r\n                        if(!resultList.contains(list)) resultList.add(list)\r\n                        left++\r\n                        right--\r\n                    }\r\n                    sum < 0 -> left++\r\n                    else -> right--\r\n                }\r\n            }\r\n        }\r\n        return resultList\r\n    }\r\n}\r\n```\r\n\r\n\r\n","721fe4b1":"---\r\ntitle: 不同路径 II(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n一个机器人位于一个 *m x n* 网格的左上角 （起始点在下图中标记为“Start” ）。\r\n\r\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\r\n\r\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/72131874-76e5eb80-33b8-11ea-8cb9-a6cc28b18d9a.png)\r\n\r\n网格中的障碍物和空位置分别用 1 和 0 来表示。\r\n\r\n**说明**：m 和 n 的值均不超过 100。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入:\r\n[\r\n  [0,0,0],\r\n  [0,1,0],\r\n  [0,0,0]\r\n]\r\n输出: 2\r\n解释:\r\n3x3 网格的正中间有一个障碍物。\r\n从左上角到右下角一共有 2 条不同的路径：\r\n1. 向右 -> 向右 -> 向下 -> 向下\r\n2. 向下 -> 向下 -> 向右 -> 向右\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n这题相较于它的上一个版本来说，多了 **障碍物** 的设置。\r\n\r\n如果某个格子上有障碍物，那么我们不考虑包含这个格子的任何路径。也就是说**这个格子提供的路径值为0**。而没有障碍物的格子，提供的路径值为1。\r\n\r\n接下来我们还是将上边界和左边界全部设置为1(这里的1和用于表示障碍物的1，虽然数值一样，但是概念不同)，不过这里需要注意几点：\r\n- 如果第一个点就存在障碍物，那后面的点就都为0了\r\n- 如果第一个点没有障碍物，将第一个点的值由0设置为1，表示提供一个路径值\r\n- 遍历第一行，如果存在障碍物，将改点的数值由1设置为0，表示不提供路径值\r\n- 遍历第一列，与上面一样\r\n- 从第[1][1]点开始进行遍历，如果发现某个点有障碍物，将其值由1设为0，否则该点的值为左边的点和上边的点的值相加\r\n\r\n\r\n根据以上几点，我们就可以使用**动态规划**来解决问题了\r\n\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun uniquePathsWithObstacles(obstacleGrid: Array<IntArray>): Int {\r\n        val column = obstacleGrid.size\r\n        val row = obstacleGrid[0].size\r\n        if(obstacleGrid[0][0] == 1) return 0\r\n        obstacleGrid[0][0] = 1\r\n        for (i in 1 until column) {\r\n            obstacleGrid[i][0] = if(obstacleGrid[i-1][0] == 1 && obstacleGrid[i][0] == 0) 1 else 0\r\n        }\r\n        for(i in 1 until row){\r\n            obstacleGrid[0][i] = if(obstacleGrid[0][i-1] == 1 && obstacleGrid[0][i] == 0) 1 else 0\r\n        }\r\n        for(i in 1 until column){\r\n            for(j in 1 until row){\r\n                if(obstacleGrid[i][j] == 1){\r\n                    obstacleGrid[i][j] = 0\r\n                } else {\r\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\r\n                }\r\n            }\r\n        }\r\n        return obstacleGrid[column-1][row-1]\r\n    }\r\n```\r\n","4eebe70f":"---\r\ntitle: 不同路径(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n一个机器人位于一个 *m x n* 网格的左上角 （起始点在下图中标记为“Start” ）。\r\n\r\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\r\n\r\n问总共有多少条不同的路径？\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/72131874-76e5eb80-33b8-11ea-8cb9-a6cc28b18d9a.png)\r\n\r\n\r\n例如，上图是一个7 x 3 的网格。有多少可能的路径？\r\n\r\n**说明**：m 和 n 的值均不超过 100。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: m = 3, n = 2\r\n输出: 3\r\n解释:\r\n从左上角开始，总共有 3 条路径可以到达右下角。\r\n1. 向右 -> 向右 -> 向下\r\n2. 向右 -> 向下 -> 向右\r\n3. 向下 -> 向右 -> 向右\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: m = 7, n = 3\r\n输出: 28\r\n```\r\n\r\n## 解题思路\r\n\r\n这题涉及到 **动态规划** 的概念。\r\n\r\n由于机器人只能 **向右** 或者 **向下** 移动，如果我们以dp[i][j]表示机器人到达第i行第j列的路径数和。那么可以很容易得到：\r\n\r\n    dp[i][j] = dp[i-1][j] + dp[i][j-1]\r\n\r\n> 对于第一行 dp[0][j]，或者第一列 dp[i][0]，由于都是在边界，所以只能为 1\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/72132900-14dab580-33bb-11ea-98af-a091211702af.png)\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/72132916-1e641d80-33bb-11ea-830d-70a5d075890e.png)\r\n\r\n根据上面的式子，就可以求出所有路径\r\n\r\n(本题也可以根据排列组合来求解，不过太简单了，这里就不说了)\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun uniquePaths(m: Int, n: Int): Int {\r\n        val dp = Array(n){IntArray(m)}\r\n        for (i in 0 until m) {\r\n            dp[0][i] = 1\r\n        }\r\n        for(i in 0 until n){\r\n            dp[i][0] = 1\r\n        }\r\n        for(i in 1 until n){\r\n            for(j in 1 until m){\r\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\r\n            }\r\n        }\r\n        return dp[n-1][m-1]\r\n    }\r\n```\r\n\r\n**优化版：**\r\n\r\n```\r\n    fun uniquePaths(m: Int, n: Int): Int {\r\n        val memo = IntArray(n){i -> 1}\r\n        for (i in 1 until m) {\r\n            for (j in 1 until n) {\r\n                memo[j] += memo[j - 1]\r\n            }\r\n        }\r\n        return memo[n - 1]\r\n    }\r\n```\r\n","7540bc52":"---\r\ntitle: 两数之和 II - 输入有序数组(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个已按照 ***升序排列*** 的有序数组，找到两个数使得它们相加之和等于目标数。\r\n\r\n函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。\r\n\r\n**说明:**\r\n- 返回的下标值（index1 和 index2）不是从零开始的。\r\n- 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入: numbers = [2, 7, 11, 15], target = 9\r\n输出: [1,2]\r\n解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n#### 思路一\r\n\r\n常规思路，直接两个for循环，找到为止。\r\n\r\n\r\n#### 思路二\r\n\r\n根据本题的题干，输入的数组是一个 **升序数组** 所以我们完全可以同时进行首位一起查找\r\n\r\n\r\n## 答案\r\n\r\n#### 常规解法\r\n\r\n\r\n```\r\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\r\n        for (i in 0 until  numbers.size - 1){\r\n            for (j in i+1 until numbers.size){\r\n                if(numbers[i] + numbers[j] == target){\r\n                    return intArrayOf(i+1,j+1)\r\n                }\r\n            }\r\n        }\r\n        return intArrayOf()\r\n    }\r\n```\r\n\r\n\r\n#### 双指针解法\r\n\r\n\r\n```\r\n    fun twoSum(numbers: IntArray, target: Int): IntArray {\r\n        var left = 0\r\n        var right = numbers.size-1\r\n        while (left < right){\r\n            val sum = numbers[left] + numbers[right];\r\n            if(sum == target){\r\n                return intArrayOf(left+1,right+1)\r\n            } else if(sum < target){\r\n                left++\r\n            } else{\r\n                right--\r\n            }\r\n        }\r\n        return intArrayOf()\r\n    }\r\n```\r\n","6770d5e9":"---\r\ntitle: 两数相除(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定两个整数，被除数``dividend``和除数``divisor``。将两数相除，要求不使用乘法、除法和 mod 运算符。\r\n\r\n返回被除数``dividend``除以除数``divisor``得到的商。\r\n \r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: dividend = 10, divisor = 3\r\n输出: 3\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: dividend = 7, divisor = -3\r\n输出: -2\r\n```\r\n\r\n**说明:**\r\n\r\n- 被除数和除数均为 32 位有符号整数。\r\n- 除数不为 0。\r\n- 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。本题中，如果除法结果溢出，则返回 2^31 − 1。\r\n\r\n\r\n## 解题思路\r\n\r\n由于不能使用乘法与除法之类的操作。\r\n\r\n最简单的办法就是循环使用被除数减去除数，直到被除数小于除数为止。\r\n\r\n但是很明显，这样的方法耗时过多。所以并不推荐这种办法\r\n\r\n看一下除法的公式：\r\n\r\n```\r\na = mb + n\r\n\r\n其中 a 为被除数，b 为除数，m 为商，n 为余数\r\n```\r\n我们可以把公式转换一下：\r\n\r\n\r\n```\r\na - (m-1)b = b + n\r\n```\r\n这样看其实只要把 ``除数b`` 一直翻倍，直到再翻一倍就比 ``被除数a`` 大,这时候通过后者与前者的 ``差值`` ，再去求商即可。\r\n\r\n那么如何在不使用乘法的情况下对除数翻倍呢？答案就是移位！\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun divide(dividend: Int, divisor: Int): Int {\r\n        var dividendNum = dividend\r\n        var divisorNum = divisor\r\n        val sign = (dividendNum > 0) xor (divisorNum > 0)\r\n        var result = 0\r\n        if (dividendNum > 0) {\r\n            dividendNum = -dividendNum\r\n        }\r\n        if (divisorNum > 0) divisorNum = -divisorNum\r\n        while (dividendNum <= divisorNum) {\r\n            var tempResult = -1\r\n            var tempDivisor = divisorNum\r\n            while (dividendNum <= tempDivisor shl 1) {\r\n                if (tempDivisor <= Integer.MIN_VALUE shr 1) break\r\n                tempResult = tempResult shl 1\r\n                tempDivisor = tempDivisor shl 1\r\n            }\r\n            dividendNum -= tempDivisor\r\n            result += tempResult\r\n        }\r\n        if (!sign) {\r\n            if (result <= Integer.MIN_VALUE) return Integer.MAX_VALUE\r\n            result = -result\r\n        }\r\n        return result\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n","60397cbe":"---\r\ntitle: 两整数之和(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n**不使用**运算符`` + ``和 ``-`` ，计算两整数 ``a`` 、``b`` 之和。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: a = 1, b = 2\r\n输出: 3\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: a = -2, b = 3\r\n输出: 1\r\n```\r\n\r\n## 解题思路\r\n\r\nleecode中有写的比较好的解题说明，所以这里直接拿来主义了\r\n\r\n因为不能使用 **+** 和 **-** 符号，那么我们就要使用其他方式来替代这两个运算符的功能\r\n\r\n#### 位运算中的加法\r\n位运算中，加法结果如下\r\n\r\n```\r\n0 + 0 = 0\r\n0 + 1 = 1\r\n1 + 0 = 1\r\n1 + 1 = 0（进位 1）\r\n```\r\n可以看出，这就是 **异或** 运算的结果：相同为0，不同为1\r\n\r\n#### 异或和与运算操作\r\n\r\n在位运算操作中，**异或**的一个重要特性是**无进位加法**。我们来看一个例子：\r\n\r\n```\r\na = 5 = 0101\r\nb = 4 = 0100\r\n\r\na ^ b 如下：\r\n\r\n0 1 0 1\r\n0 1 0 0\r\n-------\r\n0 0 0 1\r\n```\r\n``a ^ b`` 得到了一个无进位加法结果，如果要得到 ``a + b `` 的最终值，我们还要找到进位的数，把这二者相加。在位运算中，我们可以使用与操作获得进位\r\n\r\n```\r\na = 5 = 0101\r\nb = 4 = 0100\r\n\r\na & b 如下：\r\n\r\n0 1 0 1\r\n0 1 0 0\r\n-------\r\n0 1 0 0\r\n```\r\n由计算结果可见，``0100`` 并不是我们想要的进位，``1 + 1`` 所获得的进位应该要放置在它的更高位，即左侧位上，因此我们还要把 ``0100`` 左移一位，才是我们所要的进位结果。\r\n \r\n - ``a + b`` 的问题拆分为 ``(a 和 b 的无进位结果) + (a 和 b 的进位结果)``\r\n- 无进位加法使用**异或运算**计算得出\r\n- 进位结果使用与**运算**和**移位运算**计算得出\r\n- 循环此过程，直到进位为 0\r\n \r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun getSum(a: Int, b: Int): Int {\r\n        return if(b == 0) a else getSum(a xor b, (a and b) shl 1)\r\n    }\r\n```\r\n","452f12f3":"---\r\ntitle: 二叉树的最小深度(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个二叉树，找出其最小深度。\r\n\r\n最小深度是从根节点到最近叶子节点的最短路径上的节点数量。\r\n\r\n说明: 叶子节点是指没有子节点的节点。\r\n\r\n**示例:**\r\n\r\n给定二叉树 ``[3,9,20,null,null,15,7]``,\r\n\r\n```\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n```\r\n返回它的最小深度  2.\r\n\r\n## 解题思路\r\n\r\n参考一下“平衡二叉树（简单）”的解法，自然就知道如何解题了。\r\n\r\n通过递归，只返回节点左右子树中高度最小的数值即可\r\n\r\n## 答案\r\n\r\n\r\n```\r\n/**\r\n * Example:\r\n * var ti = TreeNode(5)\r\n * var v = ti.`val`\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nimport kotlin.math.min\r\nimport kotlin.math.max\r\n\r\nclass Solution {\r\n    fun minDepth(root: TreeNode?): Int {\r\n        if(root == null) return 0\r\n        val left = minDepth(root.left)\r\n        val right = minDepth(root.right)\r\n        if(left == 0 || right == 0) return max(left,right) + 1\r\n        return min(left,right) + 1\r\n    }\r\n}\r\n```\r\n","e4415f18":"---\r\ntitle: 全排列 II(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个可包含重复数字的序列，返回所有不重复的全排列。\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入: [1,1,2]\r\n输出:\r\n[\r\n  [1,1,2],\r\n  [1,2,1],\r\n  [2,1,1]\r\n]\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n这题是 [全排列](https://leetcode-cn.com/problems/permutations/) 的进阶版，具体的改动就是，由不包含重复的输入序列变成了可包含重复的数字序列。\r\n\r\n显然，出了需要使用回溯外，还需要进行剪枝才行。这题的难点就是如何去写剪枝的逻辑了。\r\n\r\n先看看不减枝的常规解法：\r\n\r\n#### 一般思路：\r\n\r\n通过Set的特性，来完成去重操作，不过这样耗时会高很多。\r\n\r\n#### 优化思路：\r\n\r\nleecode上面有非常好的思路，下面将其放上：\r\n\r\n\r\n<img width=\"500\" alt=\"WeChatcf0b8272848f0486837568e93d4607e7\" src=\"https://user-images.githubusercontent.com/30992818/71465127-aa404c00-27f6-11ea-9979-43c572364b7a.png\">\r\n\r\n\r\n<img width=\"500\" alt=\"https://user-images.githubusercontent.com/30992818/71465153-c04e0c80-27f6-11ea-9427-acd5d30f7460.png\">\r\n\r\n<img width=\"500\" alt=\"https://user-images.githubusercontent.com/30992818/71465188-dbb91780-27f6-11ea-9b8d-7e4003484fed.png\">\r\n\r\n<img width=\"500\" alt=\"https://user-images.githubusercontent.com/30992818/71465247-ff7c5d80-27f6-11ea-9cee-c5dfb0d47f39.png\">\r\n\r\n\r\n\r\n## 答案\r\n\r\n#### 一般答案\r\n\r\n\r\n```\r\n    fun permute(nums: IntArray): List<List<Int>> {\r\n        val result = mutableListOf<List<Int>>()\r\n        for (i in nums.indices) {\r\n            val newNumbs = nums.toMutableList()\r\n            newNumbs.removeAt(i)\r\n            traceBackPermute(newNumbs, mutableListOf(nums[i]), result)\r\n        }\r\n        return result\r\n    }\r\n\r\n    private fun traceBackPermute(\r\n        numbs: List<Int>,\r\n        currentList: MutableList<Int>,\r\n        result: MutableList<List<Int>>\r\n    ) {\r\n        if (numbs.isEmpty()) {\r\n            val list = mutableListOf<Int>()\r\n            list.addAll(currentList)\r\n            if (!result.contains(list)) result.add(list)\r\n            return\r\n        }\r\n        for (i in numbs.indices) {\r\n            val newNumbs = numbs.toMutableList()\r\n            newNumbs.removeAt(i)\r\n            currentList.add(numbs[i])\r\n            traceBackPermute(newNumbs, currentList, result)\r\n            currentList.remove(currentList.last())\r\n        }\r\n    }\r\n```\r\n\r\n#### 优化答案\r\n\r\n\r\n```\r\n fun permuteUnique(nums: IntArray): List<List<Int>> {\r\n        val result = mutableListOf<List<Int>>()\r\n        nums.sort()\r\n        traceBackPermuteUnique(nums, MutableList(nums.size) {false},0, mutableListOf(),result)\r\n        return result.toList()\r\n    }\r\n\r\n    private fun traceBackPermuteUnique(nums: IntArray,\r\n                                        usedList: MutableList<Boolean>,\r\n                                        currentIndex: Int,\r\n                                        currentList: MutableList<Int>,\r\n                                        result: MutableList<List<Int>>){\r\n        if(currentIndex == nums.size) {\r\n            val list = mutableListOf<Int>()\r\n            list.addAll(currentList)\r\n            result.add(list)\r\n        }\r\n        for (i in nums.indices) {\r\n            if(usedList[i]) continue\r\n            // 与上一个数相等,并且上一个数使用过，则数据重复,不加入集合（数据相同，只出一个排列结果）\r\n            if (i > 0 && nums[i] == nums[i - 1] && usedList[i - 1]) continue\r\n            usedList[i] = true\r\n            currentList.add(nums[i])\r\n            traceBackPermuteUnique(nums,usedList, currentIndex+1,currentList,result)\r\n            currentList.removeAt(currentList.size - 1)\r\n            usedList[i] = false\r\n        }\r\n    }\r\n```\r\n","31f84692":"---\r\ntitle: 区域和检索 - 数组不可变(简单)\r\ndate: 2020-03-03 10:10:46\r\n---\r\n## 题目描述\r\n\r\n给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。\r\n\r\n**示例：**\r\n\r\n\r\n```\r\n给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()\r\n\r\nsumRange(0, 2) -> 1\r\nsumRange(2, 5) -> -1\r\nsumRange(0, 5) -> -3\r\n```\r\n**说明:**\r\n\r\n    1.你可以假设数组不可变。\r\n    2.会多次调用 sumRange 方法。\r\n    \r\n\r\n## 解题思路\r\n\r\n根据题目中的说明，表示会多次调用 **sumRange** 方法，也就是说我们可能需要对计算的结果进行保留，避免每次调用都需要再计算一次\r\n\r\n所以这里有个很巧妙的解题方法，假如数组中有5个数字，那么可能会有 4+3+2+1 种 **sumRange** 的结果需要保存，显然这样是不够的。  \r\n我们可以将其优化为 **sumRange(i,j)** 的值实际上就是 **sumRange(0,j + 1) - sumRange(0, i)** 的值\r\n\r\n于是我们可以只需要存储从0到n的n个sumRange结果\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass NumArray(nums: IntArray) {\r\n        val sums = IntArray(nums.size + 1)\r\n\r\n        init {\r\n            for (i in nums.indices) sums[i+1] += (sums[i] + nums[i])\r\n        }\r\n\r\n        fun sumRange(i: Int, j: Int): Int {\r\n            if(i == 0) return sums[j+1]\r\n            return sums[j+1] - sums[i]\r\n        }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = NumArray(nums)\r\n * var param_1 = obj.sumRange(i,j)\r\n */\r\n```\r\n","f549bc44":"---\r\ntitle: 只出现一次的数字(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\r\n\r\n**说明：**\r\n\r\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: [2,2,1]\r\n输出: 1\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: [4,1,2,1,2]\r\n输出: 4\r\n```\r\n\r\n## 解体思路\r\n\r\n#### 思路一：\r\n\r\n这是常规思路，数组放入Map中，其中key-value不一致的就是那个数字\r\n\r\n\r\n#### 思路二：\r\n\r\n这个才是需要重点说明的，巧妙的解题思路。\r\n\r\n根据“与或非”的特性。使用异或：相同为0，不同为1. 异或同一个数两次，原数不变。\r\n\r\n由此，就可以得出结果\r\n\r\n\r\n## 答案\r\n\r\n#### 常规解法：\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun singleNumber(nums: IntArray): Int {\r\n        val map = mutableMapOf<String,String>()\r\n        for (num in nums) {\r\n            if (!map.keys.contains(num.toString())){\r\n                map[num.toString()] = \"\"\r\n            } else {\r\n                map[num.toString()] = num.toString()\r\n            }\r\n        }\r\n        for (mutableEntry in map) {\r\n            if(mutableEntry.value == \"\") return mutableEntry.key.toInt()\r\n        }\r\n        return 0\r\n    }\r\n}\r\n```\r\n\r\n\r\n#### 巧妙解法\r\n\r\n\r\n```\r\n    fun singleNumber(nums: IntArray): Int {\r\n        var result = 0\r\n        for (num in nums) {\r\n            result = result xor num\r\n        }\r\n        return result\r\n    }\r\n```\r\n","93bd326f":"---\r\ntitle: 四数之和(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个包含 *n* 个整数的数组 ``nums`` 和一个目标值 ``target``，判断 ``nums`` 中是否存在四个元素 *a，b，c* 和 *d* ，使得 *a + b + c + d* 的值与 ``target`` 相等？找出所有满足条件且不重复的四元组。\r\n\r\n**注意：**\r\n\r\n答案中不可以包含重复的四元组。\r\n\r\n**示例：**\r\n\r\n\r\n```\r\n给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。\r\n\r\n满足要求的四元组集合为：\r\n[\r\n  [-1,  0, 0, 1],\r\n  [-2, -1, 1, 2],\r\n  [-2,  0, 0, 2]\r\n]\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n可以参考 [三数之和](https://github.com/asjqkkkk/leecode-sample/blob/master/leecode-normal/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C(%E4%B8%AD%E7%AD%89).md) 的解法\r\n\r\n四数之和无非是在 **排序** 和 **双指针** 的前提下多加了一次for循环\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun fourSum(nums: IntArray, target: Int): List<List<Int>> {\r\n        nums.sort()\r\n        if(nums.size < 4) return listOf()\r\n        if(nums.size == 4) return if(nums.sum() == target) listOf(nums.toList()) else listOf()\r\n        val resultList = mutableListOf<List<Int>>()\r\n        for (i in 0 until nums.size - 3) {\r\n            for(j in i+1 until nums.size - 2){\r\n                var mid = j + 1\r\n                var right = nums.size - 1\r\n                while (mid < right) {\r\n                    val mv = nums[mid]\r\n                    val rv = nums[right]\r\n                    val lv2 = nums[j]\r\n                    val lv = nums[i]\r\n                    val sum = lv + rv + mv + lv2\r\n                    when {\r\n                        sum == target -> {\r\n                            val list = listOf(lv, mv, rv,lv2)\r\n                            if (!resultList.contains(list)) resultList.add(list)\r\n                            mid++\r\n                            right--\r\n                        }\r\n                        sum < target -> mid++\r\n                        else -> right--\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return resultList\r\n    }\r\n}\r\n```\r\n","762474f3":"---\r\ntitle: 在排序数组中查找元素的第一个和最后一个位置(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个按照升序排列的整数数组 ``nums``，和一个目标值 ``target``。找出给定目标值在数组中的开始位置和结束位置。\r\n\r\n你的算法时间复杂度必须是 *O(log n)* 级别。\r\n\r\n如果数组中不存在目标值，返回 ``[-1, -1]``。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: nums = [5,7,7,8,8,10], target = 8\r\n输出: [3,4]\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: nums = [5,7,7,8,8,10], target = 6\r\n输出: [-1,-1]\r\n```\r\n\r\n## 解题思路\r\n\r\n**二分查找法**\r\n\r\n二分查找法不必多说\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun searchRange(nums: IntArray, target: Int): IntArray {\r\n        var result = intArrayOf(-1,-1)\r\n        val leftIdx = binarySearchLeftIndex(nums,target,true)\r\n        if (leftIdx >= nums.size || nums[leftIdx] != target) {\r\n            return result\r\n        }\r\n        result[0] = leftIdx\r\n        result[1] = binarySearchLeftIndex(nums,target,false)-1\r\n        return result\r\n    }\r\n\r\n    private fun binarySearchLeftIndex(nums: IntArray,tartget: Int,isLeft: Boolean) : Int {\r\n        var start = 0\r\n        var end = nums.size\r\n        while (start < end) {\r\n            var mid = start + (end - start) / 2\r\n            if (nums[mid] > tartget || (isLeft && nums[mid] == tartget)) {\r\n                end = mid\r\n            } else {\r\n                start = mid + 1\r\n            }\r\n        }\r\n        return start\r\n    }\r\n}\r\n```\r\n","65806af5":"---\r\ntitle: 子集(中等)\r\ndate: 2020-03-04 05:43:11\r\n---\r\n## 题目描述\r\n\r\n给定一组**不含重复元素**的整数数组 *nums*，返回该数组所有可能的子集（幂集）。\r\n\r\n**说明：** 解集不能包含重复的子集。\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入: nums = [1,2,3]\r\n输出:\r\n[\r\n  [3],\r\n  [1],\r\n  [2],\r\n  [1,2,3],\r\n  [1,3],\r\n  [2,3],\r\n  [1,2],\r\n  []\r\n]\r\n```\r\n\r\n## 解题思路\r\n\r\n很明显，这题可以用 **回溯** 来解决\r\n\r\n不过使用回溯的时候需要注意，Kotlin中 **MutableList** 对象不能直接添加到另外一个list中去，因为它改变了，list中的内容也会改变，和java比，有的不太一样\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun subsets(nums: IntArray): List<List<Int>> {\r\n        val result = mutableListOf<List<Int>>()\r\n        backtraceSubsets(0,nums,result, mutableListOf())\r\n        return result\r\n    }\r\n\r\n    private fun backtraceSubsets(\r\n        index: Int,\r\n        nums: IntArray,\r\n        results: MutableList<List<Int>>, lastNum: MutableList<Int>) {\r\n        results.add(lastNum.toList())\r\n        for (i in index until nums.size) {\r\n            lastNum.add(nums[i])\r\n            backtraceSubsets(i + 1, nums, results, lastNum)\r\n            lastNum.removeAt(lastNum.lastIndex)\r\n        }\r\n    }\r\n```\r\n","978e4035":"---\r\ntitle: 字符串相乘(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定两个以字符串形式表示的非负整数 ``num1`` 和 ``num2``，返回 ``num1`` 和 ``num2`` 的乘积，它们的乘积也表示为字符串形式。\r\n\r\n**示例 1:**\r\n\r\n```\r\n输入: num1 = \"2\", num2 = \"3\"\r\n输出: \"6\"\r\n```\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: num1 = \"123\", num2 = \"456\"\r\n输出: \"56088\"\r\n```\r\n**说明：**\r\n\r\n- ``num1``  和 ``num2`` 的长度小于110。\r\n- ``num1`` 和 ``num2`` 只包含数字 ``0-9``。\r\n- ``num1`` 和 ``num2`` 均不以零开头，除非是数字 ``0`` 本身。\r\n- **不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。**\r\n\r\n\r\n## 解题思路\r\n\r\n可以通过小学学过的，**竖式相乘** 来进行求解\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/72044806-b85e9400-32ef-11ea-8c97-f0e12b4f9c2d.png)\r\n\r\n结合图片来看：\r\n\r\n- 如果乘数 ``num1`` 位数为 ``M``，被乘数 ``num2`` 位数为 ``N``， 那么 ``num1 x num2`` 结果 ``res`` 最大总位数为 **``M+N``**\r\n- 根据上面的信息，如果以字符串的形式表示的话，``num1`` 长度为 ``M``，``num2`` 长度为 ``N``，``res`` 长度为 ``M+N``\r\n- ``num1[i] x num2[j]`` 的结果为 ``tmp``(位数为两位，\"0x\",\"xy\"的形式)，其第一位位于 ``res[i+j]``，第二位位于 ``res[i+j+1]``\r\n\r\n\r\n根据上面的信息，其实就可以写出题解了\r\n\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun multiply(num1: String, num2: String): String {\r\n        if(num1 ==\"0\" || num2 == \"0\") return \"0\"\r\n        val array = IntArray(num1.length + num2.length)\r\n        for (i in (num1.length - 1) downTo 0) {\r\n            val n1 = num1[i] - '0'\r\n            for (j in (num2.length - 1) downTo 0){\r\n                val n2 = num2[j] - '0'\r\n                val sum = array[i + j + 1] + n1 * n2\r\n                array[i + j + 1] = sum % 10\r\n                array[i + j] += sum / 10\r\n            }\r\n        }\r\n        val result = StringBuilder()\r\n        for (i in array.indices) {\r\n            if(i == 0 && array[i] == 0) continue\r\n            result.append(array[i])\r\n        }\r\n        return result.toString()\r\n    }\r\n```\r\n","0e3de2ac":"---\r\ntitle: 将有序数组转换为二叉搜索树(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。\r\n\r\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n给定有序数组: [-10,-3,0,5,9],\r\n\r\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\r\n\r\n      0\r\n     / \\\r\n   -3   9\r\n   /   /\r\n -10  5\r\n```\r\n\r\n## 解题思路\r\n\r\n> 平衡二叉树的一个特性是：左子节点小于父节点，右子节点大于父节点\r\n\r\n也就是说，根据这个特性，我们可以想象得到，每一颗平衡二叉树，根节点的值，就是一个有序数组最中间的值。\r\n\r\n> 再根据平衡二叉树另外一个特性：每个子节点都可以单独看成一颗新的平衡二叉树的根节点（子树）\r\n\r\n两个特性结合，就可以根据二分法来解题了\r\n\r\n## 答案\r\n\r\n\r\n```\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode sortedArrayToBST(int[] nums) {\r\n        return sortedArrayToBST(nums, 0, nums.length);\r\n    }\r\n    \r\n    private TreeNode sortedArrayToBST(int[] nums, int start, int end) {\r\n        if (start >= end) {\r\n            return null;\r\n        }\r\n        int mid = start/2 + end / 2;\r\n        TreeNode root = new TreeNode(nums[mid]);\r\n        root.left = sortedArrayToBST(nums, start, mid);\r\n        root.right = sortedArrayToBST(nums, mid + 1, end);\r\n        return root;\r\n    }\r\n}\r\n```\r\n","369dfa3a":"---\r\ntitle: 平衡二叉树(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个二叉树，判断它是否是高度平衡的二叉树。\r\n\r\n本题中，一棵高度平衡二叉树定义为：\r\n> 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。\r\n\r\n**示例 1:**\r\n\r\n给定二叉树 ``[3,9,20,null,null,15,7]``\r\n\r\n```\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n```\r\n返回 ``true`` 。\r\n\r\n**示例 2:**\r\n\r\n给定二叉树 ``[1,2,2,3,3,null,null,4,4]``\r\n\r\n\r\n```\r\n       1\r\n      / \\\r\n     2   2\r\n    / \\\r\n   3   3\r\n  / \\\r\n 4   4\r\n```\r\n返回 ``false`` 。\r\n\r\n## 解题思路\r\n\r\n由于平衡二叉树**每个节点的左右两个子树**的高度差的绝对值不超过1。\r\n\r\n所以我们根据这个特性来，由底到上来对二叉树进行便利，当遇到有左右子树高度相差超过1时候，停止遍历，并且得到结果。这里，用 **-1** 来表示遍历非平衡二叉树，其他数字则表示正常的高度\r\n\r\n## 答案\r\n\r\n\r\n```\r\n/**\r\n * Example:\r\n * var ti = TreeNode(5)\r\n * var v = ti.`val`\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nimport kotlin.math.abs\r\nimport kotlin.math.max\r\nclass Solution {\r\n    fun isBalanced(root: TreeNode?): Boolean {\r\n        return treeDeep(root) != -1   \r\n    }\r\n    \r\n    fun treeDeep(root: TreeNode?): Int{\r\n        if(root == null) return 0\r\n        val left = treeDeep(root.left)\r\n        if(left == -1) return -1\r\n        val right = treeDeep(root.right)\r\n        if(right == -1) return  -1\r\n        return if(abs(left - right) < 2) max(left,right) + 1 else -1\r\n    }\r\n}\r\n```\r\n","d111c3fe":"---\r\ntitle: 括号生成(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给出 *n* 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。\r\n\r\n例如，给出 *n = 3*，生成结果为：\r\n\r\n\r\n```\r\n[\r\n  \"((()))\",\r\n  \"(()())\",\r\n  \"(())()\",\r\n  \"()(())\",\r\n  \"()()()\"\r\n]\r\n```\r\n\r\n## 解题思路\r\n\r\n这种，求多种可能性的。一般都是使用 **回溯** 来解决问题\r\n\r\n不过难点在于，回溯的代码要如何写。\r\n\r\n首先，可以肯定的是，最左边的一定是左括号，最右边的一定是又括号，而且两者的数量是一致的。\r\n\r\n所以，我们可以首先在字符串中放置一个左括号，当右括号数量比左括号数量小时，我们可以放一个右括号。而左括号数量还没达到字符串一半时，我们随时可以放左括号。\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun generateParenthesis(n: Int): List<String> {\r\n        val result = mutableListOf<String>()\r\n        backtraceParenthesis(\"\",0,0,n,result)\r\n        return result\r\n    }\r\n\r\n    private fun backtraceParenthesis(parenthesis: String, leftNum: Int, rightNum: Int, n: Int, result: MutableList<String>){\r\n        if(parenthesis.length == n * 2){\r\n            result.add(parenthesis)\r\n            return\r\n        }\r\n        if(leftNum < n){\r\n            backtraceParenthesis(\"$parenthesis(\",leftNum+1,rightNum,n,result)\r\n        }\r\n        if(rightNum < leftNum){\r\n            backtraceParenthesis(\"$parenthesis)\",leftNum,rightNum+1,n,result)\r\n        }\r\n    }\r\n}\r\n```\r\n","68a9600c":"---\r\ntitle: 搜索二维矩阵(中等)\r\ndate: 2020-03-03 11:12:38\r\n---\r\n## 题目描述\r\n\r\n编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\r\n\r\n- 每行中的整数从左到右按升序排列。\r\n- 每行的第一个整数大于前一行的最后一个整数。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入:\r\nmatrix = [\r\n  [1,   3,  5,  7],\r\n  [10, 11, 16, 20],\r\n  [23, 30, 34, 50]\r\n]\r\ntarget = 3\r\n输出: true\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入:\r\nmatrix = [\r\n  [1,   3,  5,  7],\r\n  [10, 11, 16, 20],\r\n  [23, 30, 34, 50]\r\n]\r\ntarget = 13\r\n输出: false\r\n```\r\n\r\n## 解题思路\r\n\r\n首先我们需要注意到这个二维矩阵的一些特效，这样有助于我们解题\r\n\r\n特性如下：\r\n\r\n- **从上到下递增、从左到右递增**\r\n- **左下角元素**： 为所在列最大元素，所在行最小元素。\r\n- **右上角元素**： 为所在行最大元素，所在列最小元素。\r\n\r\n左下角和右上角都可以作为突破口，我们就以左下角为例吧\r\n\r\n**从矩阵 matrix 左下角元素（索引设为 (i, j) ）开始遍历，并与目标值对比：**\r\n- 当 `matrix[i][j] > target` 时： 行索引向上移动一格（即 **i--**），即消去矩阵第 i 行元素\r\n- 当 `matrix[i][j] < target` 时： 列索引向右移动一格（即 **j++**），即消去矩阵第 j 列元素\r\n- 当 `matrix[i][j] == target` 时： 返回 true \r\n\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\r\n        var i = matrix.size - 1\r\n        var j = 0\r\n        while(i >= 0 && j < matrix[0].size) {\r\n            if(matrix[i][j] > target) i--\r\n            else if(matrix[i][j] < target) j++\r\n            else return true\r\n        }\r\n        return false\r\n    }\r\n```\r\n","2fbfbef4":"---\r\ntitle: 数字转换为十六进制数(简单)\r\ndate: 2020-03-03 10:10:47\r\n---\r\n## 题目描述\r\n\r\n给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 ``补码运算`` 方法。\r\n\r\n**注意:**\r\n\r\n- 十六进制中所有字母(a-f)都必须是小写。\r\n- 十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符'0'来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。 \r\n- 给定的数确保在32位有符号整数范围内。\r\n- **不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法**。\r\n\r\n**示例 1：**\r\n\r\n\r\n```\r\n输入:\r\n26\r\n\r\n输出:\r\n\"1a\"\r\n```\r\n\r\n**示例 2：**\r\n\r\n```\r\n输入:\r\n-1\r\n\r\n输出:\r\n\"ffffffff\"\r\n```\r\n\r\n## 解题思路\r\n\r\n可以知道任何数字和 ``0xF`` 相 **与** 的结果为 **4位二进制数字**，类似下面这样：\r\n\r\n```\r\n???????xxxx ^ 1111 = xxxx\r\n```\r\n所以，每次计算出结果后，将输入的数右移四位,知道输入的数字为0。就可以了\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun toHex(num: Int): String {\r\n       if (num == 0) return \"0\"\r\n        var i = num\r\n        val r = StringBuilder()\r\n        while( i != 0){\r\n            val j = i and 0xF\r\n            val jj = when(j){\r\n                10 -> \"a\"\r\n                11 -> \"b\"\r\n                12 -> \"c\"\r\n                13 -> \"d\"\r\n                14 -> \"e\"\r\n                15 -> \"f\"\r\n                else -> j.toString()\r\n            }\r\n            r.append(jj)\r\n            i = i.ushr(4)\r\n        }\r\n        return r.reverse().toString()\r\n    }\r\n```\r\n","b7febb15":"---\r\ntitle: 旋转图像(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个 *``n × n``* 的二维矩阵表示一个图像。\r\n\r\n将图像顺时针旋转 90 度。\r\n\r\n**说明：**\r\n\r\n你必须在**原地**旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n给定 matrix = \r\n[\r\n  [1,2,3],\r\n  [4,5,6],\r\n  [7,8,9]\r\n],\r\n\r\n原地旋转输入矩阵，使其变为:\r\n[\r\n  [7,4,1],\r\n  [8,5,2],\r\n  [9,6,3]\r\n]\r\n```\r\n**示例 2:**\r\n\r\n\r\n```\r\n给定 matrix =\r\n[\r\n  [ 5, 1, 9,11],\r\n  [ 2, 4, 8,10],\r\n  [13, 3, 6, 7],\r\n  [15,14,12,16]\r\n], \r\n\r\n原地旋转输入矩阵，使其变为:\r\n[\r\n  [15,13, 2, 5],\r\n  [14, 3, 4, 1],\r\n  [12, 6, 8, 9],\r\n  [16, 7,10,11]\r\n]\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n可以换一个角度来看问题，比如我们不是直接去旋转数组，而是每次先旋转数组的 **上下左右** 四个角。\r\n\r\n接着，旋转数组四个角相邻的元素，直到该层旋转完毕。然后开始里面一层的旋转。\r\n\r\n因为是顺时针旋转，所以旋转方向是 ``左上角 -> 向右``，``右上角 -> 向下``，``右下角 -> 向左``，``左下角 -> 向上``。\r\n\r\n不过理论上是如此，实际写代码的时候还需要仔细一些，因为一不小心可能就会写错元素对应的下标\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun rotate(matrix: Array<IntArray>): Unit {\r\n        val n = matrix.size\r\n        for(i in 0 until n / 2){\r\n            for(j in i until (n - i - 1)){\r\n                val start = matrix[i][j]\r\n                matrix[i][j] = matrix[n-j-1][i]\r\n                matrix[n-j-1][i] = matrix[n-i-1][n-j-1]\r\n                matrix[n-i-1][n-j-1] = matrix[j][n-i-1]\r\n                matrix[j][n-i-1] = start\r\n            }\r\n        }\r\n    }\r\n```\r\n","f1067b56":"---\r\ntitle: 旋转链表(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个链表，旋转链表，将链表每个节点向右移动 *k* 个位置，其中 *k* 是非负数。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: 1->2->3->4->5->NULL, k = 2\r\n输出: 4->5->1->2->3->NULL\r\n解释:\r\n向右旋转 1 步: 5->1->2->3->4->NULL\r\n向右旋转 2 步: 4->5->1->2->3->NULL\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: 0->1->2->NULL, k = 4\r\n输出: 2->0->1->NULL\r\n解释:\r\n向右旋转 1 步: 2->0->1->NULL\r\n向右旋转 2 步: 1->2->0->NULL\r\n向右旋转 3 步: 0->1->2->NULL\r\n向右旋转 4 步: 2->0->1->NULL\r\n```\r\n\r\n## 解题思路\r\n\r\n这题的难点主要在于，k的大小可能超过链表的长度。所以需要先计算出链表的长度，也就是先遍历一遍链表。\r\n\r\n这题可以在第一次遍历链表后，将链表首尾相连，然后可以在第二次遍历时，将链表旋转\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/72131149-65034900-33b6-11ea-8bd7-e96a1a6a7f99.png)\r\n\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun rotateRight(head: ListNode?, k: Int): ListNode? {\r\n        if(head == null || k == 0) return head\r\n        var index = 0\r\n        var temp = head\r\n        while (temp != null){\r\n            index++\r\n            if(temp.next == null){\r\n                temp.next = head\r\n                break\r\n            }\r\n            temp = temp.next\r\n        }\r\n        val realK = k % index\r\n        if(realK == 0 || realK == index) {\r\n            temp?.next = null\r\n            return head\r\n        }\r\n        var temp2 = temp\r\n        var index2 = 0\r\n        var result :ListNode ?= null\r\n        while (temp2!!.next != null){\r\n            index2++\r\n            temp2 = temp2.next\r\n            if(index2 == index - realK){\r\n                result = temp2?.next\r\n                temp2?.next = null\r\n                break\r\n            }\r\n        }\r\n        return result\r\n    }\r\n```\r\n","b0a89e1c":"---\r\ntitle: 无重复字符的最长子串(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: \"abcabcbb\"\r\n输出: 3 \r\n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: \"bbbbb\"\r\n输出: 1\r\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\r\n```\r\n\r\n**示例 3:**\r\n\r\n```\r\n输入: \"pwwkew\"\r\n输出: 3\r\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\r\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n**滑动窗口**\r\n\r\n先简单用图片看一下滑动窗口的概念\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/68823336-6d991500-06ce-11ea-916f-20f3abfb3f40.png)\r\n\r\n比如上面字符串 ``abcdeabcdfgaee`` 首先进入这个队列， ``abcde`` 是满足题目的，但是再往后 ``abcdea`` 就重复了，所以窗口需要进行移动。\r\n\r\n只需要将窗口最左边的元素移出，然后窗口一直往右边移动，知道找到最长的窗口即可。\r\n\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun lengthOfLongestSubstring(s: String): Int {\r\n        val set = mutableSetOf<Char>()\r\n        var right = 0\r\n        var left = 0\r\n        val n = s.length\r\n        var lenght = 0\r\n        while (right < n && left < n){\r\n            if(!set.contains(s[right])){\r\n                set.add(s[right])\r\n                right++\r\n                lenght = maxOf(lenght, right - left)\r\n            } else {\r\n                set.remove(s[left])\r\n                left++\r\n            }\r\n        }\r\n        return lenght\r\n    }\r\n```\r\n","8e41069b":"---\r\ntitle: 最小路径和(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个包含非负整数的 *m x n* 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\r\n\r\n说明：每次只能向下或者向右移动一步。\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入:\r\n[\r\n  [1,3,1],\r\n  [1,5,1],\r\n  [4,2,1]\r\n]\r\n输出: 7\r\n解释: 因为路径 1→3→1→1→1 的总和最小。\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n还是动态规划\r\n\r\n- 可以用 **d[i][j]** 表示从 **d[0][0]** 到 **d[i][j]** 的最小距离\r\n- 对于每个点，该点的值为左边点和上边点中较小的一个与改点想加。如果是左边界或又边界，则少边界上一个点与当前点想加\r\n\r\n\r\n直接看代码，简洁明了\r\n\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun minPathSum(grid: Array<IntArray>): Int {\r\n        val column = grid.size\r\n        val row = grid[0].size\r\n        for(i in 0 until column){\r\n            for(j in 0 until row){\r\n                if(i == 0 && j == 0) continue\r\n                else if(i == 0) grid[i][j] += grid[i][j-1]\r\n                else if(j == 0) grid[i][j] += grid[i-1][j]\r\n                else grid[i][j] += min(grid[i-1][j],grid[i][j-1])\r\n            }\r\n        }\r\n        return grid[column-1][row-1]\r\n    }\r\n```\r\n","1763fbec":"---\r\ntitle: 最长回文子串(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。\r\n\r\n**示例 1：**\r\n\r\n\r\n```\r\n输入: \"babad\"\r\n输出: \"bab\"\r\n注意: \"aba\" 也是一个有效答案。\r\n```\r\n\r\n**示例 2：**\r\n\r\n\r\n```\r\n输入: \"cbbd\"\r\n输出: \"bb\"\r\n```\r\n\r\n## 解题思路\r\n\r\n根据回文数的特性。当字符串个数为奇数个，比如 ``a`` 是一个回文数。当字符串个数为偶数个，比如  ``aa`` 也是一个回文数。\r\n\r\n所以我们要着回文数时，要分两种情况来找\r\n\r\n如何找呢？依赖于上面提到的，回文数的特性，通过 由中间向两边扩散的方法来寻找\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun longestPalindrome(s: String): String {\r\n        if(s.length <= 1) return s\r\n        var max = \"\"\r\n        for (i in 0 until (s.length - 1)) {\r\n            val one = getPalindrome(s, i,i)\r\n            val two = getPalindrome(s, i,i+1)\r\n            val bigger = if(one.length > two.length) one else two\r\n            max = if(max.length > bigger.length) max else bigger\r\n        }\r\n        return max\r\n    }\r\n\r\n    private fun getPalindrome(s: String, left: Int, right: Int) : String{\r\n        var l = left\r\n        var r = right\r\n        var isPalindrome = false\r\n        while (l >= 0 && r < s.length && s[l] == s[r]){\r\n            l--\r\n            r++\r\n            isPalindrome = true\r\n        }\r\n        return if(isPalindrome) s.substring(l+1,r) else s.substring(l, l+1)\r\n    }\r\n}\r\n```\r\n","466beefa":"---\r\ntitle: 有效的完全平方数(简单)\r\ndate: 2020-03-03 10:10:46\r\n---\r\n## 题目描述\r\n\r\n给定一个正整数 *num*，编写一个函数，如果 *num* 是一个完全平方数，则返回 True，否则返回 False。\r\n\r\n说明：不要使用任何内置的库函数，如  ``sqrt``。\r\n\r\n**示例 1：**\r\n\r\n\r\n```\r\n输入：16\r\n输出：True\r\n```\r\n\r\n**示例 2：**\r\n\r\n\r\n```\r\n输入：14\r\n输出：False\r\n```\r\n\r\n## 解题思路\r\n\r\n这题如果使用递归，让一个数慢慢增加，然后取平方，用于判断是否符合条件。  \r\n也是可行的，但是显然这样做耗时会非常的高。\r\n\r\n所以，可以使用二分查找法，先确定int值上限的开方值为 **46340** ，然后以此去展开计算\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun isPerfectSquare(num: Int): Boolean {\r\n        var left = 0\r\n        var right = 46340\r\n        while (left < right){\r\n            val mid = (left + right) / 2\r\n            val theSum = mid * mid\r\n            if(theSum> num){\r\n                right = mid\r\n            } else if(theSum < num){\r\n                left = mid + 1\r\n            } else {\r\n                left = mid\r\n                break\r\n            }\r\n        }\r\n        return left * left == num\r\n    }\r\n```\r\n","ed3ca4f6":"---\r\ntitle: 求众数(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ``⌊ n/2 ⌋`` 的元素。\r\n\r\n你可以假设数组是非空的，并且给定的数组总是存在众数。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: [3,2,3]\r\n输出: 3\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: [2,2,1,1,1,2,2]\r\n输出: 2\r\n```\r\n\r\n## 解题思路\r\n\r\n#### 常规思路\r\n\r\n记录每个数字出现的次数，出现次数超过 n/2 的那个就是\r\n\r\n\r\n#### 偷懒思路\r\n\r\n通过系统提供的api将数组排序，由于众数的个数大于 n/2 ，所以排序后最中间的那个肯定就数众数\r\n\r\n\r\n#### 有意思的思路\r\n\r\n因为众数的个数是大于 n/2的，所以数组众数最多。于是我们可以从第一个数开始count=1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个众数\r\n\r\n\r\n## 答案\r\n\r\n#### 常规答案\r\n\r\n\r\n```\r\n    fun majorityElement(nums: IntArray): Int {\r\n        val map = mutableMapOf<Int,Int>()\r\n        for (num in nums) {\r\n            val value = map[num]\r\n            if(value == null){\r\n                map[num] = 1\r\n            } else {\r\n                map[num] = value+1\r\n            }\r\n        }\r\n        for (mutableEntry in map) {\r\n            if(mutableEntry.value > nums.size / 2) return mutableEntry.key\r\n        }\r\n        return 0\r\n    }\r\n```\r\n\r\n\r\n#### 偷懒答案\r\n\r\n\r\n```\r\n    fun majorityElement(nums: IntArray): Int {\r\n        nums.sort()\r\n        return nums[nums.size / 2]\r\n    }\r\n```\r\n\r\n\r\n#### 有意思的答案\r\n\r\n\r\n```\r\n    fun majorityElement(nums: IntArray): Int {\r\n        var number = nums[0]\r\n        var counter = 1\r\n        for (index in 1 until nums.size - 1) {\r\n            if(nums[index] == number){\r\n                counter++\r\n            } else {\r\n                counter--\r\n                if(counter == 0) number = nums[index + 1]\r\n            }\r\n        }\r\n        return number\r\n    }\r\n```\r\n","b00b8c0e":"---\r\ntitle: 电话号码的字母组合(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\r\n\r\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\r\n\r\n![17_telephone_keypad](https://user-images.githubusercontent.com/30992818/69221490-5cf70c00-0bb2-11ea-8db6-d26e80434f31.png)\r\n\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入：\"23\"\r\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\r\n```\r\n\r\n**说明:**  \r\n尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。\r\n\r\n\r\n\r\n## 解题思路\r\n\r\n#### 回溯\r\n\r\n这个题目算是我第一次遇到回溯。关于“回溯”，概念如下：\r\n\r\n> 回溯法（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。\r\n\r\n和递归的不同之处在于，递归会有一个明显的退出条件，用于结束递归循环。而回溯虽然也是一种循环，但是不需要结束条件，走到最后自然就结束了\r\n\r\n## 答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun letterCombinations(digits: String): List<String> {\r\n        if (digits.isEmpty()) return listOf()\r\n        val map = mapOf(\r\n            \"2\" to \"abc\", \"3\" to \"def\",\r\n            \"4\" to \"ghi\", \"5\" to \"jkl\", \"6\" to \"mno\",\r\n            \"7\" to \"pqrs\", \"8\" to \"tuv\", \"9\" to \"wxyz\"\r\n        )\r\n        val result = mutableListOf<String>()\r\n        backtrackLetter(\"\", digits, result,map)\r\n        return result\r\n    }\r\n\r\n    private fun backtrackLetter(\r\n        combination: String,\r\n        nextDigit: String,\r\n        result: MutableList<String>,\r\n        map: Map<String, String>\r\n    ) {\r\n        if (nextDigit.isEmpty()) {\r\n            result.add(combination)\r\n        } else {\r\n            val digit = nextDigit[0].toString()\r\n            val letters = map[digit] ?: \"\"\r\n            for (letter in letters) {\r\n                backtrackLetter(combination + letter, nextDigit.substring(1), result, map)\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n","caf25760":"---\r\ntitle: 盛最多水的容器(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定 *n* 个非负整数 *a1，a2，...，an*，每个数代表坐标中的一个点 *(i, ai) *。在坐标内画 *n* 条垂直线，垂直线 *i* 的两个端点分别为 *(i, ai)* 和 *(i, 0)*。找出其中的两条线，使得它们与 *x* 轴共同构成的容器可以容纳最多的水。\r\n\r\n说明：你不能倾斜容器，且 *n* 的值至少为 2。\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/69030923-d60c2d00-0a13-11ea-8924-cb7038f9e194.jpg)\r\n\r\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\r\n \r\n \r\n\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入: [1,8,6,2,5,4,8,3,7]\r\n输出: 49\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n\r\n#### 常规思路\r\n\r\n直接使用两个for循环，完全遍历，求出最大面积\r\n\r\n\r\n#### 优化思路\r\n\r\n**双指针**\r\n\r\n直接同时从数组两端开始进行查询。其中值较小的指针向另外一方进行移动。\r\n\r\n因为决定面积的除了和两指针中最小的一个值有关，还与两指针的距离有关。\r\n\r\n如果移动的是数值更大的指针，那样面积是否增加就无法确定了，而移动数值较小的那个指针可以保证面积是有机会增加的。\r\n\r\n## 答案\r\n\r\n#### 常规答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun maxArea(height: IntArray): Int {\r\n        var maxArea = 0\r\n        for(i in 0 until height.size - 1){\r\n            for(j in i+1 until  height.size){\r\n                val area = minOf(height[i],height[j]) * (j - i)\r\n                if(maxArea < area){\r\n                    maxArea = area\r\n                }\r\n            }\r\n        }\r\n        return maxArea\r\n    }\r\n}\r\n```\r\n\r\n\r\n#### 优化答案\r\n\r\n\r\n```\r\nclass Solution {\r\n    fun maxArea(height: IntArray): Int {\r\n        var left = 0\r\n        var right = height.size - 1\r\n        var maxArea = 0\r\n        while (left < right){\r\n            val area = minOf(height[left],height[right]) * (right - left)\r\n            if(maxArea < area){\r\n                maxArea = area\r\n            }\r\n            if(height[left] < height[right]){\r\n                left++\r\n            } else {\r\n                right--\r\n            }\r\n        }\r\n        return maxArea\r\n    }\r\n}\r\n```\r\n\r\n\r\n","eb6dc12c":"---\r\ntitle: 矩阵置零(中等)\r\ndate: 2020-03-03 10:51:16\r\n---\r\n## 题目描述\r\n\r\n给定一个 *m x n* 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用**原地**算法。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: \r\n[\r\n  [1,1,1],\r\n  [1,0,1],\r\n  [1,1,1]\r\n]\r\n输出: \r\n[\r\n  [1,0,1],\r\n  [0,0,0],\r\n  [1,0,1]\r\n]\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: \r\n[\r\n  [0,1,2,0],\r\n  [3,4,5,2],\r\n  [1,3,1,5]\r\n]\r\n输出: \r\n[\r\n  [0,0,0,0],\r\n  [0,4,5,0],\r\n  [0,3,1,0]\r\n]\r\n```\r\n**\r\n进阶:**\r\n\r\n- 一个直接的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。\r\n- 一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。\r\n- 你能想出一个常数空间的解决方案吗？\r\n\r\n\r\n## 解题思路\r\n\r\n如果一个元素为0，则其所在行和列都置零，听起来是不是很像炸弹人游戏里面的那个炸弹效果？\r\n\r\n### 思路一\r\n\r\n维护两个Set，遍历所有元素，然后分别记录有零的行和列。接下来通过遍历Set的方式，分别将对应的行和列全部置零。\r\n\r\n这样做的复杂度如下：\r\n- 时间复杂度：*O(M × N)*，其中 *M* 和 *N* 分别对应行数和列数。\r\n- 空间复杂度：*O(M + N)*。\r\n\r\n\r\n### 思路二\r\n\r\n这个思路属于特殊题目特殊解法，此题就有特解\r\n\r\n通过题目的要求，可以发现下面的特性：\r\n\r\n```\r\nif cell[i][j] == 0 {\r\n    cell[i][0] = 0\r\n    cell[0][j] = 0\r\n}\r\n```\r\n> 所以我们可以用每行和每列的第一个元素作为标记，这个标记用来表示这一行或者这一列是否需要赋零。这意味着对于每个节点不需要访问 M+N 个格子而是只需要对标记点的两个格子赋值。\r\n\r\n接下来，怎么做就很明显了，不过操作起来可能会有一点麻烦：\r\n\r\n- 遍历整个矩阵，如果 cell[i][j] == 0 就将第 i 行和第 j 列的第一个元素标记。\r\n- 第一行和第一列的标记是相同的，都是 cell[0][0]，所以需要一个额外的变量告知第一列是否被标记，同时用 cell[0][0] 继续表示第一行的标记。\r\n- 然后，从第二行第二列的元素开始遍历，如果第 r 行或者第 c 列被标记了，那么就将 cell[r][c] 设为 0。这里第一行和第一列的作用就相当于方法一中的 row_set 和 column_set 。\r\n- 然后我们检查是否 cell[0][0] == 0 ，如果是则赋值第一行的元素为零。\r\n- 然后检查第一列是否被标记，如果是则赋值第一列的元素为零。\r\n\r\n\r\n复杂度如下：\r\n- 时间复杂度：O(M \\times N)O(M×N)\r\n- 空间复杂度：O(1)O(1)\r\n\r\n\r\n## 答案\r\n\r\n### 解法一：\r\n\r\n\r\n```\r\n    fun setZeroes(matrix: Array<IntArray>): Unit {\r\n        val rowMap = mutableSetOf<Int>()\r\n        val columnMap = mutableSetOf<Int>()\r\n        for (i in matrix.indices) {\r\n            for (j in matrix[i].indices) {\r\n                val element = matrix[i][j]\r\n                if(element == 0){\r\n                    rowMap.add(i)\r\n                    columnMap.add(j)\r\n                }\r\n            }\r\n        }\r\n        for (row in rowMap) {\r\n            for (i in matrix[0].indices) {\r\n                matrix[row][i] = 0\r\n            }\r\n        }\r\n        for (column in columnMap) {\r\n            for (i in matrix.indices) {\r\n                matrix[i][column] = 0\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n\r\n### 解法二\r\n\r\n\r\n```\r\n    fun setZeroes(matrix: Array<IntArray>): Unit {\r\n        //利用第一行和第一列保存改行或者该列是否应该被置零\r\n        //由于第一个元素会重合，所以用firstRow、firstLine保存第一行和第一列的数据\r\n        val length = matrix.size\r\n        val row = matrix[0].size\r\n        var firstLine = 1\r\n        var firstRow = 1\r\n        for (i in 0 until length) {\r\n            for (j in 0 until row) {\r\n                if (matrix[i][j] == 0) {\r\n                    if (i == 0) {\r\n                        firstLine = 0\r\n                    } else {\r\n                        matrix[i][0] = 0\r\n                    }\r\n                    if (j == 0) {\r\n                        firstRow = 0\r\n                    } else {\r\n                        matrix[0][j] = 0\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //处理除了第一行和第一列外的其他行列 置为零\r\n        //处理行\r\n        for (i in 1 until length) {\r\n            if (matrix[i][0] == 0) {\r\n                for (j in 1 until row) {\r\n                    matrix[i][j] = 0\r\n                }\r\n            }\r\n        }\r\n        //处理列\r\n        for (i in 1 until row) {\r\n            if (matrix[0][i] == 0) {\r\n                for (j in 1 until length) {\r\n                    matrix[j][i] = 0\r\n                }\r\n            }\r\n        }\r\n        // 处理第一行和第一列\r\n        if (firstLine == 0) {\r\n            for (i in 0 until row) {\r\n                matrix[0][i] = 0\r\n            }  \r\n        }\r\n        if (firstRow == 0) {\r\n            for (i in 0 until length) {\r\n                matrix[i][0] = 0\r\n            }\r\n        }\r\n    }\r\n```\r\n","fa3247c6":"---\r\ntitle: 移动零(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个数组 ``nums``，编写一个函数将所有 ``0`` 移动到数组的末尾，同时保持非零元素的相对顺序。\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入: [0,1,0,3,12]\r\n输出: [1,3,12,0,0]\r\n```\r\n\r\n**说明:**\r\n\r\n    1.必须在原数组上操作，不能拷贝额外的数组。 \r\n    2.尽量减少操作次数。\r\n    \r\n    \r\n    \r\n## 解题思路\r\n\r\n#### 一般思路\r\n\r\n将移动后元素放入一个列表中，然后根据列表去移动数组\r\n\r\n#### 优化思路\r\n\r\n根据题目的要求，不可以拷贝额外的数组，所以上面的思路虽然可以解出题目，但是还是不符合要求。\r\n\r\n\r\n我们可以先将所有的非0元素移动到最前面，然后将后面的所有元素置0即可。虽然看起来比较简单，但是实际的操作还是非常精妙的，所以这里记录下来。\r\n\r\n\r\n## 答案\r\n\r\n#### 一般答案\r\n\r\n\r\n```\r\n    fun moveZeroes(nums: IntArray): Unit {\r\n        if (nums.size < 2) return\r\n        val list = nums.toMutableList()\r\n        var index = 0\r\n        var zeroNum = 0\r\n        while (index < list.size - 1 - zeroNum){\r\n            val num = list[index]\r\n            if(num == 0){\r\n                list.removeAt(index)\r\n                list.add(0)\r\n                zeroNum++\r\n            } else {\r\n                index++\r\n            }\r\n        }\r\n        for (i in nums.indices) {\r\n            nums[i] = list[i]\r\n        }\r\n    }\r\n```\r\n\r\n\r\n#### 优化答案\r\n\r\n\r\n```\r\n    fun moveZeroes(nums: IntArray): Unit {\r\n        var index = 0\r\n        nums.forEach {\r\n            if (it != 0) {\r\n                nums[index] = it\r\n                index++\r\n            }\r\n        }\r\n        while (index < nums.size) {\r\n            nums[index] = 0\r\n            index++\r\n        }\r\n    }\r\n```\r\n","4af2bdf0":"---\r\ntitle: 第三大的数(简单)\r\ndate: 2020-03-03 10:10:47\r\n---\r\n## 题目描述\r\n\r\n给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: [3, 2, 1]\r\n\r\n输出: 1\r\n\r\n解释: 第三大的数是 1.\r\n```\r\n\r\n**示例 2:**\r\n\r\n```\r\n输入: [1, 2]\r\n\r\n输出: 2\r\n\r\n解释: 第三大的数不存在, 所以返回最大的数 2 .\r\n```\r\n\r\n**示例 3:**\r\n\r\n\r\n```\r\n输入: [2, 2, 3, 1]\r\n\r\n输出: 1\r\n\r\n解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。\r\n存在两个值为2的数，它们都排第二。\r\n```\r\n\r\n\r\n## 解题思路\r\n\r\n#### 一般思路\r\n\r\n直接将数组排序，然后从后到前找到第三个不相等的数，虽然能得到结果，不过不符合时间复杂为O(n)的要求\r\n\r\n#### 优化思路\r\n\r\n可以维护一个只有三个元素的 TreeSet \r\n\r\n## 答案\r\n\r\n#### 一般答案\r\n\r\n\r\n```\r\n    fun thirdMax(nums: IntArray): Int {\r\n        if(nums.isEmpty()) return 0\r\n        nums.sort()\r\n        val size = nums.size\r\n        if(nums.size <= 2) return nums[size - 1]\r\n        var end = size - 1\r\n        var num = 1\r\n        while (end >= 1 && num < 3){\r\n            if(nums[end] != nums[end - 1]){\r\n                num++\r\n                end--\r\n            } else {\r\n                end--\r\n            }\r\n        }\r\n        return if(num >= 3) nums[end] else nums[size - 1]\r\n    }\r\n```\r\n\r\n\r\n#### 优化答案\r\n\r\n\r\n```\r\n    fun thirdMax(nums: IntArray): Int {\r\n        val set = sortedSetOf<Int>()\r\n        for (elem in nums) {\r\n            set.add(elem)\r\n            if (set.size > 3) set.remove(set.first())\r\n        }\r\n        return if (set.size < 3) set.last() else set.first()\r\n    }\r\n```\r\n\r\n\r\n话说，优化后耗时反而增加了...","9922a9b4":"---\r\ntitle: 螺旋矩阵(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个包含 *m x n* 个元素的矩阵（*m* 行, *n* 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入:\r\n[\r\n [ 1, 2, 3 ],\r\n [ 4, 5, 6 ],\r\n [ 7, 8, 9 ]\r\n]\r\n输出: [1,2,3,6,9,8,7,4,5]\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入:\r\n[\r\n  [1, 2, 3, 4],\r\n  [5, 6, 7, 8],\r\n  [9,10,11,12]\r\n]\r\n输出: [1,2,3,4,8,12,11,10,9,5,6,7]\r\n```\r\n\r\n## 解题思路\r\n\r\n直接按层模拟\r\n\r\n![image](https://user-images.githubusercontent.com/30992818/72047846-6a00c380-32f6-11ea-9f99-cd266565ad32.png)\r\n\r\n\r\n顺时针来进行输出，一层输出完后进入里层继续输出，知道全部输出完毕\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\r\n        val result = mutableListOf<Int>()\r\n        if (matrix.isEmpty()) return result\r\n        var left = 0\r\n        var right = matrix[0].size - 1\r\n        var top = 0\r\n        var bottom = matrix.size - 1\r\n        while (left <= right && top <= bottom) {\r\n            for(i in left..right){\r\n                result.add(matrix[top][i])\r\n            }\r\n            for(i in top+1..bottom){\r\n                result.add(matrix[i][right])\r\n            }\r\n            if (left < right && top < bottom) {\r\n                for(i in right-1 downTo left+1){\r\n                    result.add(matrix[bottom][i])\r\n                }\r\n                for(i in bottom downTo top+1){\r\n                    result.add(matrix[i][left])\r\n                }\r\n            }\r\n            left++\r\n            right--\r\n            top++\r\n            bottom--\r\n        }\r\n        return result\r\n    }\r\n```\r\n","b03e49c8":"---\r\ntitle: 路径总和(简单)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。\r\n\r\n**说明:** 叶子节点是指没有子节点的节点。\r\n\r\n**示例:**  \r\n给定如下二叉树，以及目标和 ``sum = 22``，\r\n\r\n\r\n```\r\n              5\r\n             / \\\r\n            4   8\r\n           /   / \\\r\n          11  13  4\r\n         /  \\      \\\r\n        7    2      1\r\n\r\n```\r\n返回 ``true``, 因为存在目标和为 22 的根节点到叶子节点的路径 ``5->4->11->2``。\r\n\r\n\r\n## 解题思路\r\n\r\n很容易可以看出，这是一个需要遍历二叉树，然后求出每条路径节点值的和。\r\n\r\n转换一下思路，如果我们不是求和，而是每经过一个节点，减去该节点的值，直到最后一个节点的时候，得到的值恰好为0。不也正好说明这条路径节点值的和与所给数值相等吗？\r\n\r\n## 答案\r\n\r\n\r\n```\r\n/**\r\n * Example:\r\n * var ti = TreeNode(5)\r\n * var v = ti.`val`\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun hasPathSum(root: TreeNode?, sum: Int): Boolean {\r\n        if(root == null) return false\r\n        val resetSum = sum - root.`val`\r\n        if(root.left == null && root.right == null) return resetSum == 0\r\n        return hasPathSum(root.left, resetSum) || hasPathSum(root.right, resetSum)\r\n    }\r\n}\r\n```\r\n","9892fad5":"---\r\ntitle: 跳跃游戏(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个非负整数数组，你最初位于数组的第一个位置。\r\n\r\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\r\n\r\n判断你是否能够到达最后一个位置。\r\n\r\n**示例 1:**\r\n\r\n\r\n```\r\n输入: [2,3,1,1,4]\r\n输出: true\r\n解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。\r\n```\r\n\r\n**示例 2:**\r\n\r\n\r\n```\r\n输入: [3,2,1,0,4]\r\n输出: false\r\n解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。\r\n```\r\n\r\n## 解题思路\r\n\r\n\r\n- 如果某一个作为 起跳点 的格子可以跳跃的距离是3，那么表示后面3个格子都可以作为 起跳点。\r\n- 可以对每一个能作为 起跳点 的格子都尝试跳一次，把能跳到最远的距离不断更新。\r\n- 如果可以一直跳到最后，就成功了。\r\n\r\n## 答案\r\n\r\n\r\n```\r\n    fun canJump(nums: IntArray): Boolean {\r\n        var maxStep = 0\r\n        for (i in nums.indices) {\r\n            if(i > maxStep) return false\r\n            maxStep = max(maxStep, nums[i] + i)\r\n        }\r\n        return true\r\n    }\r\n```\r\n","27197dab":"---\r\ntitle: 链表随机节点(中等)\r\ndate: 2020-03-08 06:14:30\r\n---\r\n## 题目描述\r\n\r\n给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点**被选的概率一样**。\r\n\r\n**进阶:**\r\n如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n// 初始化一个单链表 [1,2,3].\r\nListNode head = new ListNode(1);\r\nhead.next = new ListNode(2);\r\nhead.next.next = new ListNode(3);\r\nSolution solution = new Solution(head);\r\n\r\n// getRandom()方法应随机返回1,2,3中的一个，保证每个元素被返回的概率相等。\r\nsolution.getRandom();\r\n```\r\n\r\n## 解题思路\r\n\r\n这题是一道 **蓄水池抽样** 算法题\r\n\r\n关于蓄水池抽样，简单介绍几个例子：\r\n\r\n### 问题示例\r\n\r\n采样问题经常会被遇到，比如：\r\n\r\n- 从 100000 份调查报告中抽取 1000 份进行统计。\r\n- 从一本很厚的电话簿中抽取 1000 人进行姓氏统计。\r\n- 从 Google 搜索 \"Ken Thompson\"，从中抽取 100 个结果查看哪些是今年的。\r\n\r\n像这样的，**对于输入数据的规模不确定**，但是要求所抽样的对象被抽取的概率一样，这就涉及到了 **蓄水池采样** 算法\r\n\r\n### 算法过程\r\n终于要讲到**蓄水池采样算法**(Reservoir Sampling)了。先说一下算法的过程：\r\n\r\n假设数据序列的规模为 *n* ， 需要采样的数量的为 *k* \r\n\r\n首先构建一个可容纳 *k* 个元素的数组，将序列的前 *k* 个元素放入数组中\r\n\r\n然后从第 *k+1* 个元素开始，以 *k/n* 的概率来决定该元素是否被替换到数组中（数组中的元素被替换的概率是相同的）。当遍历完所有元素之后，数组中剩下的元素即为所需采取的样本。\r\n\r\n### 证明过程\r\n\r\n对于第 *i* 个数(*i <= k*)。在 *k* 步之前，被选中的概率为 1。走到第 *k+1* 步时，第 *i* 个数被第 *k+1* 个数替换的概率为：\r\n\r\n    【第 k+1 个数被选中的概率】 * 【第 i 个数被选中然后替换的概率】\r\n\r\n也就是 *k*/(*k+1*) * *1/k* = *1*/(*k+1*)。则第 *i* 个数被保留的概率为 *1* - *1*/(*k+1*) = *k*/(*k+1*)\r\n\r\n依此类推，第 *i* 个数不被第 *k+2* 个数替换掉的概率为 1 - *k*/(*k+2*) * *1/k* = *k+1*/(*k+2*)。则走到第 *n* 步时，第 *i* 个数被保留的概率为：\r\n![image](https://user-images.githubusercontent.com/30992818/72140924-c3d3bd00-33cc-11ea-8e87-0e7a554ba8c4.png)\r\n\r\n所以对于其中每个元素，被保留的概率都为 *k/n*\r\n\r\n到这里，蓄水池抽样算是证明完毕，接下来，就可以直接使用在代码中了\r\n\r\n## 答案\r\n\r\n\r\n```\r\nimport kotlin.random.Random\r\n\r\nclass Solution(head: ListNode?) {\r\n    \r\n        private val theHead = head\r\n        private val random = Random(1)\r\n\r\n        fun getRandom(): Int {\r\n            var num = 1\r\n            var value = theHead?.`val` ?: 0\r\n            var next = theHead\r\n            while (next?.next != null){\r\n                num++\r\n                next = next.next\r\n                val nextValue = next?.`val` ?: 0\r\n                val randomRate = random.nextDouble()\r\n                val rate = 1.0 / num\r\n                val needChanged = randomRate <= rate\r\n                if(needChanged) value = nextValue\r\n            }\r\n            return value\r\n        }\r\n\r\n}\r\n```\r\n","c5904f5b":"---\r\ntitle: 颜色分类(中等)\r\ndate: 2020-03-03 12:24:38\r\n---\r\n## 题目描述\r\n\r\n给定一个包含红色、白色和蓝色，一共 *n* 个元素的数组，**原地**对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\r\n\r\n此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。\r\n\r\n**注意:**\r\n不能使用代码库中的排序函数来解决这道题。\r\n\r\n**示例:**\r\n\r\n\r\n```\r\n输入: [2,0,2,1,1,0]\r\n输出: [0,0,1,1,2,2]\r\n```\r\n\r\n**进阶：**\r\n\r\n- 一个直观的解决方案是使用计数排序的两趟扫描算法。\r\n首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。\r\n- 你能想出一个仅使用常数空间的一趟扫描算法吗？\r\n\r\n\r\n## 解题思路\r\n\r\n如果没有要求原地排序的话，其实可以通过哈希表的方法去排序\r\n\r\n这里就参照官方的解法吧：\r\n\r\n我们用三个指针（p0, p2 和curr）来分别追踪0的最右边界，2的最左边界和当前考虑的元素。\r\n\r\n本解法的思路是沿着数组移动 `curr` 指针，若 `nums[curr] = 0`，则将其与 `nums[p0]` 互换；若 `nums[curr] = 2` ，则与 `nums[p2]` 互换。\r\n\r\n**算法**\r\n\r\n- 初始化0的最右边界：`p0 = 0`。在整个算法执行过程中 `nums[idx < p0]` = 0.\r\n\r\n- 初始化2的最左边界 ：`p2 = n - 1`。在整个算法执行过程中 `nums[idx > p2] = 2`.\r\n\r\n- 初始化当前考虑的元素序号 ：`curr = 0`.\r\n\r\n- While `curr <= p2` :\r\n\r\n    - 若 `nums[curr] = 0` ：交换第 `curr` 个 和 第 `p0` 个 元素，并将指针都向右移。\r\n\r\n    - 若 `nums[curr] = 2` ：交换第 `curr` 个和第 `p2` 个元素，并将 `p2` 指针左移 。\r\n\r\n    - 若 `nums[curr] = 1` ：将指针 `curr` 右移。\r\n\r\n## 答案\r\n\r\n\r\n```\r\n  public void sortColors(int[] nums) {\r\n    int p0 = 0, curr = 0;\r\n    int p2 = nums.length - 1;\r\n    int tmp;\r\n    while (curr <= p2) {\r\n      if (nums[curr] == 0) {\r\n        tmp = nums[p0];\r\n        nums[p0++] = nums[curr];\r\n        nums[curr++] = tmp;\r\n      }\r\n      else if (nums[curr] == 2) {\r\n        tmp = nums[curr];\r\n        nums[curr] = nums[p2];\r\n        nums[p2--] = tmp;\r\n      }\r\n      else curr++;\r\n    }\r\n  }\r\n```\r\n"}